
f411-usb-msc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcb4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000071c  0800be54  0800be54  0001be54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c570  0800c570  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800c570  0800c570  0001c570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c578  0800c578  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c578  0800c578  0001c578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c57c  0800c57c  0001c57c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800c580  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c30  20000090  0800c610  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cc0  0800c610  00020cc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000265e4  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a38  00000000  00000000  000466a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  0004b0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed8  00000000  00000000  0004c120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae45  00000000  00000000  0004cff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019193  00000000  00000000  00067e3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c39f  00000000  00000000  00080fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010d36f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004658  00000000  00000000  0010d3c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800be3c 	.word	0x0800be3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	0800be3c 	.word	0x0800be3c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008b0:	f000 b96e 	b.w	8000b90 <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	4604      	mov	r4, r0
 80008d4:	468c      	mov	ip, r1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	f040 8083 	bne.w	80009e2 <__udivmoddi4+0x116>
 80008dc:	428a      	cmp	r2, r1
 80008de:	4617      	mov	r7, r2
 80008e0:	d947      	bls.n	8000972 <__udivmoddi4+0xa6>
 80008e2:	fab2 f282 	clz	r2, r2
 80008e6:	b142      	cbz	r2, 80008fa <__udivmoddi4+0x2e>
 80008e8:	f1c2 0020 	rsb	r0, r2, #32
 80008ec:	fa24 f000 	lsr.w	r0, r4, r0
 80008f0:	4091      	lsls	r1, r2
 80008f2:	4097      	lsls	r7, r2
 80008f4:	ea40 0c01 	orr.w	ip, r0, r1
 80008f8:	4094      	lsls	r4, r2
 80008fa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008fe:	0c23      	lsrs	r3, r4, #16
 8000900:	fbbc f6f8 	udiv	r6, ip, r8
 8000904:	fa1f fe87 	uxth.w	lr, r7
 8000908:	fb08 c116 	mls	r1, r8, r6, ip
 800090c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000910:	fb06 f10e 	mul.w	r1, r6, lr
 8000914:	4299      	cmp	r1, r3
 8000916:	d909      	bls.n	800092c <__udivmoddi4+0x60>
 8000918:	18fb      	adds	r3, r7, r3
 800091a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800091e:	f080 8119 	bcs.w	8000b54 <__udivmoddi4+0x288>
 8000922:	4299      	cmp	r1, r3
 8000924:	f240 8116 	bls.w	8000b54 <__udivmoddi4+0x288>
 8000928:	3e02      	subs	r6, #2
 800092a:	443b      	add	r3, r7
 800092c:	1a5b      	subs	r3, r3, r1
 800092e:	b2a4      	uxth	r4, r4
 8000930:	fbb3 f0f8 	udiv	r0, r3, r8
 8000934:	fb08 3310 	mls	r3, r8, r0, r3
 8000938:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800093c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000940:	45a6      	cmp	lr, r4
 8000942:	d909      	bls.n	8000958 <__udivmoddi4+0x8c>
 8000944:	193c      	adds	r4, r7, r4
 8000946:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800094a:	f080 8105 	bcs.w	8000b58 <__udivmoddi4+0x28c>
 800094e:	45a6      	cmp	lr, r4
 8000950:	f240 8102 	bls.w	8000b58 <__udivmoddi4+0x28c>
 8000954:	3802      	subs	r0, #2
 8000956:	443c      	add	r4, r7
 8000958:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800095c:	eba4 040e 	sub.w	r4, r4, lr
 8000960:	2600      	movs	r6, #0
 8000962:	b11d      	cbz	r5, 800096c <__udivmoddi4+0xa0>
 8000964:	40d4      	lsrs	r4, r2
 8000966:	2300      	movs	r3, #0
 8000968:	e9c5 4300 	strd	r4, r3, [r5]
 800096c:	4631      	mov	r1, r6
 800096e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000972:	b902      	cbnz	r2, 8000976 <__udivmoddi4+0xaa>
 8000974:	deff      	udf	#255	; 0xff
 8000976:	fab2 f282 	clz	r2, r2
 800097a:	2a00      	cmp	r2, #0
 800097c:	d150      	bne.n	8000a20 <__udivmoddi4+0x154>
 800097e:	1bcb      	subs	r3, r1, r7
 8000980:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000984:	fa1f f887 	uxth.w	r8, r7
 8000988:	2601      	movs	r6, #1
 800098a:	fbb3 fcfe 	udiv	ip, r3, lr
 800098e:	0c21      	lsrs	r1, r4, #16
 8000990:	fb0e 331c 	mls	r3, lr, ip, r3
 8000994:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000998:	fb08 f30c 	mul.w	r3, r8, ip
 800099c:	428b      	cmp	r3, r1
 800099e:	d907      	bls.n	80009b0 <__udivmoddi4+0xe4>
 80009a0:	1879      	adds	r1, r7, r1
 80009a2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0xe2>
 80009a8:	428b      	cmp	r3, r1
 80009aa:	f200 80e9 	bhi.w	8000b80 <__udivmoddi4+0x2b4>
 80009ae:	4684      	mov	ip, r0
 80009b0:	1ac9      	subs	r1, r1, r3
 80009b2:	b2a3      	uxth	r3, r4
 80009b4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009b8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009bc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009c0:	fb08 f800 	mul.w	r8, r8, r0
 80009c4:	45a0      	cmp	r8, r4
 80009c6:	d907      	bls.n	80009d8 <__udivmoddi4+0x10c>
 80009c8:	193c      	adds	r4, r7, r4
 80009ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009ce:	d202      	bcs.n	80009d6 <__udivmoddi4+0x10a>
 80009d0:	45a0      	cmp	r8, r4
 80009d2:	f200 80d9 	bhi.w	8000b88 <__udivmoddi4+0x2bc>
 80009d6:	4618      	mov	r0, r3
 80009d8:	eba4 0408 	sub.w	r4, r4, r8
 80009dc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009e0:	e7bf      	b.n	8000962 <__udivmoddi4+0x96>
 80009e2:	428b      	cmp	r3, r1
 80009e4:	d909      	bls.n	80009fa <__udivmoddi4+0x12e>
 80009e6:	2d00      	cmp	r5, #0
 80009e8:	f000 80b1 	beq.w	8000b4e <__udivmoddi4+0x282>
 80009ec:	2600      	movs	r6, #0
 80009ee:	e9c5 0100 	strd	r0, r1, [r5]
 80009f2:	4630      	mov	r0, r6
 80009f4:	4631      	mov	r1, r6
 80009f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009fa:	fab3 f683 	clz	r6, r3
 80009fe:	2e00      	cmp	r6, #0
 8000a00:	d14a      	bne.n	8000a98 <__udivmoddi4+0x1cc>
 8000a02:	428b      	cmp	r3, r1
 8000a04:	d302      	bcc.n	8000a0c <__udivmoddi4+0x140>
 8000a06:	4282      	cmp	r2, r0
 8000a08:	f200 80b8 	bhi.w	8000b7c <__udivmoddi4+0x2b0>
 8000a0c:	1a84      	subs	r4, r0, r2
 8000a0e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a12:	2001      	movs	r0, #1
 8000a14:	468c      	mov	ip, r1
 8000a16:	2d00      	cmp	r5, #0
 8000a18:	d0a8      	beq.n	800096c <__udivmoddi4+0xa0>
 8000a1a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a1e:	e7a5      	b.n	800096c <__udivmoddi4+0xa0>
 8000a20:	f1c2 0320 	rsb	r3, r2, #32
 8000a24:	fa20 f603 	lsr.w	r6, r0, r3
 8000a28:	4097      	lsls	r7, r2
 8000a2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a2e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a32:	40d9      	lsrs	r1, r3
 8000a34:	4330      	orrs	r0, r6
 8000a36:	0c03      	lsrs	r3, r0, #16
 8000a38:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a3c:	fa1f f887 	uxth.w	r8, r7
 8000a40:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a48:	fb06 f108 	mul.w	r1, r6, r8
 8000a4c:	4299      	cmp	r1, r3
 8000a4e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a52:	d909      	bls.n	8000a68 <__udivmoddi4+0x19c>
 8000a54:	18fb      	adds	r3, r7, r3
 8000a56:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000a5a:	f080 808d 	bcs.w	8000b78 <__udivmoddi4+0x2ac>
 8000a5e:	4299      	cmp	r1, r3
 8000a60:	f240 808a 	bls.w	8000b78 <__udivmoddi4+0x2ac>
 8000a64:	3e02      	subs	r6, #2
 8000a66:	443b      	add	r3, r7
 8000a68:	1a5b      	subs	r3, r3, r1
 8000a6a:	b281      	uxth	r1, r0
 8000a6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a78:	fb00 f308 	mul.w	r3, r0, r8
 8000a7c:	428b      	cmp	r3, r1
 8000a7e:	d907      	bls.n	8000a90 <__udivmoddi4+0x1c4>
 8000a80:	1879      	adds	r1, r7, r1
 8000a82:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000a86:	d273      	bcs.n	8000b70 <__udivmoddi4+0x2a4>
 8000a88:	428b      	cmp	r3, r1
 8000a8a:	d971      	bls.n	8000b70 <__udivmoddi4+0x2a4>
 8000a8c:	3802      	subs	r0, #2
 8000a8e:	4439      	add	r1, r7
 8000a90:	1acb      	subs	r3, r1, r3
 8000a92:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a96:	e778      	b.n	800098a <__udivmoddi4+0xbe>
 8000a98:	f1c6 0c20 	rsb	ip, r6, #32
 8000a9c:	fa03 f406 	lsl.w	r4, r3, r6
 8000aa0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000aa4:	431c      	orrs	r4, r3
 8000aa6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000aaa:	fa01 f306 	lsl.w	r3, r1, r6
 8000aae:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ab2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ab6:	431f      	orrs	r7, r3
 8000ab8:	0c3b      	lsrs	r3, r7, #16
 8000aba:	fbb1 f9fe 	udiv	r9, r1, lr
 8000abe:	fa1f f884 	uxth.w	r8, r4
 8000ac2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ac6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aca:	fb09 fa08 	mul.w	sl, r9, r8
 8000ace:	458a      	cmp	sl, r1
 8000ad0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ad4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ad8:	d908      	bls.n	8000aec <__udivmoddi4+0x220>
 8000ada:	1861      	adds	r1, r4, r1
 8000adc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ae0:	d248      	bcs.n	8000b74 <__udivmoddi4+0x2a8>
 8000ae2:	458a      	cmp	sl, r1
 8000ae4:	d946      	bls.n	8000b74 <__udivmoddi4+0x2a8>
 8000ae6:	f1a9 0902 	sub.w	r9, r9, #2
 8000aea:	4421      	add	r1, r4
 8000aec:	eba1 010a 	sub.w	r1, r1, sl
 8000af0:	b2bf      	uxth	r7, r7
 8000af2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000af6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000afa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000afe:	fb00 f808 	mul.w	r8, r0, r8
 8000b02:	45b8      	cmp	r8, r7
 8000b04:	d907      	bls.n	8000b16 <__udivmoddi4+0x24a>
 8000b06:	19e7      	adds	r7, r4, r7
 8000b08:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000b0c:	d22e      	bcs.n	8000b6c <__udivmoddi4+0x2a0>
 8000b0e:	45b8      	cmp	r8, r7
 8000b10:	d92c      	bls.n	8000b6c <__udivmoddi4+0x2a0>
 8000b12:	3802      	subs	r0, #2
 8000b14:	4427      	add	r7, r4
 8000b16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b1a:	eba7 0708 	sub.w	r7, r7, r8
 8000b1e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b22:	454f      	cmp	r7, r9
 8000b24:	46c6      	mov	lr, r8
 8000b26:	4649      	mov	r1, r9
 8000b28:	d31a      	bcc.n	8000b60 <__udivmoddi4+0x294>
 8000b2a:	d017      	beq.n	8000b5c <__udivmoddi4+0x290>
 8000b2c:	b15d      	cbz	r5, 8000b46 <__udivmoddi4+0x27a>
 8000b2e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b32:	eb67 0701 	sbc.w	r7, r7, r1
 8000b36:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b3a:	40f2      	lsrs	r2, r6
 8000b3c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b40:	40f7      	lsrs	r7, r6
 8000b42:	e9c5 2700 	strd	r2, r7, [r5]
 8000b46:	2600      	movs	r6, #0
 8000b48:	4631      	mov	r1, r6
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	462e      	mov	r6, r5
 8000b50:	4628      	mov	r0, r5
 8000b52:	e70b      	b.n	800096c <__udivmoddi4+0xa0>
 8000b54:	4606      	mov	r6, r0
 8000b56:	e6e9      	b.n	800092c <__udivmoddi4+0x60>
 8000b58:	4618      	mov	r0, r3
 8000b5a:	e6fd      	b.n	8000958 <__udivmoddi4+0x8c>
 8000b5c:	4543      	cmp	r3, r8
 8000b5e:	d2e5      	bcs.n	8000b2c <__udivmoddi4+0x260>
 8000b60:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b64:	eb69 0104 	sbc.w	r1, r9, r4
 8000b68:	3801      	subs	r0, #1
 8000b6a:	e7df      	b.n	8000b2c <__udivmoddi4+0x260>
 8000b6c:	4608      	mov	r0, r1
 8000b6e:	e7d2      	b.n	8000b16 <__udivmoddi4+0x24a>
 8000b70:	4660      	mov	r0, ip
 8000b72:	e78d      	b.n	8000a90 <__udivmoddi4+0x1c4>
 8000b74:	4681      	mov	r9, r0
 8000b76:	e7b9      	b.n	8000aec <__udivmoddi4+0x220>
 8000b78:	4666      	mov	r6, ip
 8000b7a:	e775      	b.n	8000a68 <__udivmoddi4+0x19c>
 8000b7c:	4630      	mov	r0, r6
 8000b7e:	e74a      	b.n	8000a16 <__udivmoddi4+0x14a>
 8000b80:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b84:	4439      	add	r1, r7
 8000b86:	e713      	b.n	80009b0 <__udivmoddi4+0xe4>
 8000b88:	3802      	subs	r0, #2
 8000b8a:	443c      	add	r4, r7
 8000b8c:	e724      	b.n	80009d8 <__udivmoddi4+0x10c>
 8000b8e:	bf00      	nop

08000b90 <__aeabi_idiv0>:
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop

08000b94 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff fb1f 	bl	80001e0 <strlen>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	4803      	ldr	r0, [pc, #12]	; (8000bbc <Send_Uart+0x28>)
 8000bae:	f003 fadc 	bl	800416a <HAL_UART_Transmit>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000124 	.word	0x20000124

08000bc0 <Mount_USB>:



void Mount_USB (void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	490a      	ldr	r1, [pc, #40]	; (8000bf0 <Mount_USB+0x30>)
 8000bc8:	480a      	ldr	r0, [pc, #40]	; (8000bf4 <Mount_USB+0x34>)
 8000bca:	f009 faf9 	bl	800a1c0 <f_mount>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <Mount_USB+0x38>)
 8000bd4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting USB ...\n\n");
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <Mount_USB+0x38>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d003      	beq.n	8000be6 <Mount_USB+0x26>
 8000bde:	4807      	ldr	r0, [pc, #28]	; (8000bfc <Mount_USB+0x3c>)
 8000be0:	f7ff ffd8 	bl	8000b94 <Send_Uart>
	else Send_Uart("USB mounted successfully...\n");
}
 8000be4:	e002      	b.n	8000bec <Mount_USB+0x2c>
	else Send_Uart("USB mounted successfully...\n");
 8000be6:	4806      	ldr	r0, [pc, #24]	; (8000c00 <Mount_USB+0x40>)
 8000be8:	f7ff ffd4 	bl	8000b94 <Send_Uart>
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	2000016c 	.word	0x2000016c
 8000bf4:	200003a0 	.word	0x200003a0
 8000bf8:	20000104 	.word	0x20000104
 8000bfc:	0800be54 	.word	0x0800be54
 8000c00:	0800be74 	.word	0x0800be74

08000c04 <Unmount_USB>:

void Unmount_USB (void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	fresult = f_mount(NULL, USBHPath, 1);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	490a      	ldr	r1, [pc, #40]	; (8000c34 <Unmount_USB+0x30>)
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f009 fad7 	bl	800a1c0 <f_mount>
 8000c12:	4603      	mov	r3, r0
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <Unmount_USB+0x34>)
 8000c18:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("USB UNMOUNTED successfully...\n\n\n");
 8000c1a:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <Unmount_USB+0x34>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d103      	bne.n	8000c2a <Unmount_USB+0x26>
 8000c22:	4806      	ldr	r0, [pc, #24]	; (8000c3c <Unmount_USB+0x38>)
 8000c24:	f7ff ffb6 	bl	8000b94 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING USB \n\n\n");
}
 8000c28:	e002      	b.n	8000c30 <Unmount_USB+0x2c>
	else Send_Uart("ERROR!!! in UNMOUNTING USB \n\n\n");
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <Unmount_USB+0x3c>)
 8000c2c:	f7ff ffb2 	bl	8000b94 <Send_Uart>
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	2000016c 	.word	0x2000016c
 8000c38:	20000104 	.word	0x20000104
 8000c3c:	0800be94 	.word	0x0800be94
 8000c40:	0800beb8 	.word	0x0800beb8

08000c44 <Write_File>:




FRESULT Write_File (char *name, char *data)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b088      	sub	sp, #32
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]

	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 8000c4e:	4955      	ldr	r1, [pc, #340]	; (8000da4 <Write_File+0x160>)
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f009 fed6 	bl	800aa02 <f_stat>
 8000c56:	4603      	mov	r3, r0
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4b53      	ldr	r3, [pc, #332]	; (8000da8 <Write_File+0x164>)
 8000c5c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000c5e:	4b52      	ldr	r3, [pc, #328]	; (8000da8 <Write_File+0x164>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d012      	beq.n	8000c8c <Write_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 8000c66:	2064      	movs	r0, #100	; 0x64
 8000c68:	f00a fca2 	bl	800b5b0 <malloc>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	494e      	ldr	r1, [pc, #312]	; (8000dac <Write_File+0x168>)
 8000c74:	68b8      	ldr	r0, [r7, #8]
 8000c76:	f00a fd7b 	bl	800b770 <siprintf>
		Send_Uart (buf);
 8000c7a:	68b8      	ldr	r0, [r7, #8]
 8000c7c:	f7ff ff8a 	bl	8000b94 <Send_Uart>
	    free(buf);
 8000c80:	68b8      	ldr	r0, [r7, #8]
 8000c82:	f00a fc9d 	bl	800b5c0 <free>
	    return fresult;
 8000c86:	4b48      	ldr	r3, [pc, #288]	; (8000da8 <Write_File+0x164>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	e087      	b.n	8000d9c <Write_File+0x158>
	}

	else
	{
	    /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_EXISTING | FA_WRITE);
 8000c8c:	2202      	movs	r2, #2
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	4847      	ldr	r0, [pc, #284]	; (8000db0 <Write_File+0x16c>)
 8000c92:	f009 fadb 	bl	800a24c <f_open>
 8000c96:	4603      	mov	r3, r0
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b43      	ldr	r3, [pc, #268]	; (8000da8 <Write_File+0x164>)
 8000c9c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000c9e:	4b42      	ldr	r3, [pc, #264]	; (8000da8 <Write_File+0x164>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d015      	beq.n	8000cd2 <Write_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000ca6:	2064      	movs	r0, #100	; 0x64
 8000ca8:	f00a fc82 	bl	800b5b0 <malloc>
 8000cac:	4603      	mov	r3, r0
 8000cae:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000cb0:	4b3d      	ldr	r3, [pc, #244]	; (8000da8 <Write_File+0x164>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	493e      	ldr	r1, [pc, #248]	; (8000db4 <Write_File+0x170>)
 8000cba:	68f8      	ldr	r0, [r7, #12]
 8000cbc:	f00a fd58 	bl	800b770 <siprintf>
	    	Send_Uart(buf);
 8000cc0:	68f8      	ldr	r0, [r7, #12]
 8000cc2:	f7ff ff67 	bl	8000b94 <Send_Uart>
	        free(buf);
 8000cc6:	68f8      	ldr	r0, [r7, #12]
 8000cc8:	f00a fc7a 	bl	800b5c0 <free>
	        return fresult;
 8000ccc:	4b36      	ldr	r3, [pc, #216]	; (8000da8 <Write_File+0x164>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	e064      	b.n	8000d9c <Write_File+0x158>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000cd2:	2064      	movs	r0, #100	; 0x64
 8000cd4:	f00a fc6c 	bl	800b5b0 <malloc>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "Opening file-->  *%s*  To WRITE data in it\n", name);
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	4936      	ldr	r1, [pc, #216]	; (8000db8 <Write_File+0x174>)
 8000ce0:	69f8      	ldr	r0, [r7, #28]
 8000ce2:	f00a fd45 	bl	800b770 <siprintf>
	    	Send_Uart(buf);
 8000ce6:	69f8      	ldr	r0, [r7, #28]
 8000ce8:	f7ff ff54 	bl	8000b94 <Send_Uart>
	        free(buf);
 8000cec:	69f8      	ldr	r0, [r7, #28]
 8000cee:	f00a fc67 	bl	800b5c0 <free>

	    	fresult = f_write(&USBHFile, data, strlen(data), &bw);
 8000cf2:	6838      	ldr	r0, [r7, #0]
 8000cf4:	f7ff fa74 	bl	80001e0 <strlen>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	4b30      	ldr	r3, [pc, #192]	; (8000dbc <Write_File+0x178>)
 8000cfc:	6839      	ldr	r1, [r7, #0]
 8000cfe:	482c      	ldr	r0, [pc, #176]	; (8000db0 <Write_File+0x16c>)
 8000d00:	f009 fc62 	bl	800a5c8 <f_write>
 8000d04:	4603      	mov	r3, r0
 8000d06:	461a      	mov	r2, r3
 8000d08:	4b27      	ldr	r3, [pc, #156]	; (8000da8 <Write_File+0x164>)
 8000d0a:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8000d0c:	4b26      	ldr	r3, [pc, #152]	; (8000da8 <Write_File+0x164>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d012      	beq.n	8000d3a <Write_File+0xf6>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000d14:	2064      	movs	r0, #100	; 0x64
 8000d16:	f00a fc4b 	bl	800b5b0 <malloc>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	61bb      	str	r3, [r7, #24]
	    		sprintf (buf, "ERROR!!! No. %d while writing to the FILE *%s*\n\n", fresult, name);
 8000d1e:	4b22      	ldr	r3, [pc, #136]	; (8000da8 <Write_File+0x164>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	461a      	mov	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4926      	ldr	r1, [pc, #152]	; (8000dc0 <Write_File+0x17c>)
 8000d28:	69b8      	ldr	r0, [r7, #24]
 8000d2a:	f00a fd21 	bl	800b770 <siprintf>
	    		Send_Uart(buf);
 8000d2e:	69b8      	ldr	r0, [r7, #24]
 8000d30:	f7ff ff30 	bl	8000b94 <Send_Uart>
	    		free(buf);
 8000d34:	69b8      	ldr	r0, [r7, #24]
 8000d36:	f00a fc43 	bl	800b5c0 <free>
	    	}

	    	/* Close file */
	    	fresult = f_close(&USBHFile);
 8000d3a:	481d      	ldr	r0, [pc, #116]	; (8000db0 <Write_File+0x16c>)
 8000d3c:	f009 fe37 	bl	800a9ae <f_close>
 8000d40:	4603      	mov	r3, r0
 8000d42:	461a      	mov	r2, r3
 8000d44:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <Write_File+0x164>)
 8000d46:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8000d48:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <Write_File+0x164>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d013      	beq.n	8000d78 <Write_File+0x134>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000d50:	2064      	movs	r0, #100	; 0x64
 8000d52:	f00a fc2d 	bl	800b5b0 <malloc>
 8000d56:	4603      	mov	r3, r0
 8000d58:	613b      	str	r3, [r7, #16]
	    		sprintf (buf, "ERROR!!! No. %d in closing file *%s* after writing it\n\n", fresult, name);
 8000d5a:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <Write_File+0x164>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4918      	ldr	r1, [pc, #96]	; (8000dc4 <Write_File+0x180>)
 8000d64:	6938      	ldr	r0, [r7, #16]
 8000d66:	f00a fd03 	bl	800b770 <siprintf>
	    		Send_Uart(buf);
 8000d6a:	6938      	ldr	r0, [r7, #16]
 8000d6c:	f7ff ff12 	bl	8000b94 <Send_Uart>
	    		free(buf);
 8000d70:	6938      	ldr	r0, [r7, #16]
 8000d72:	f00a fc25 	bl	800b5c0 <free>
 8000d76:	e00f      	b.n	8000d98 <Write_File+0x154>
	    	}
	    	else
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000d78:	2064      	movs	r0, #100	; 0x64
 8000d7a:	f00a fc19 	bl	800b5b0 <malloc>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	617b      	str	r3, [r7, #20]
	    		sprintf (buf, "File *%s* is WRITTEN and CLOSED successfully\n\n", name);
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	4910      	ldr	r1, [pc, #64]	; (8000dc8 <Write_File+0x184>)
 8000d86:	6978      	ldr	r0, [r7, #20]
 8000d88:	f00a fcf2 	bl	800b770 <siprintf>
	    		Send_Uart(buf);
 8000d8c:	6978      	ldr	r0, [r7, #20]
 8000d8e:	f7ff ff01 	bl	8000b94 <Send_Uart>
	    		free(buf);
 8000d92:	6978      	ldr	r0, [r7, #20]
 8000d94:	f00a fc14 	bl	800b5c0 <free>
	    	}
	    }
	    return fresult;
 8000d98:	4b03      	ldr	r3, [pc, #12]	; (8000da8 <Write_File+0x164>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
	}
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3720      	adds	r7, #32
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000108 	.word	0x20000108
 8000da8:	20000104 	.word	0x20000104
 8000dac:	0800bf28 	.word	0x0800bf28
 8000db0:	20000170 	.word	0x20000170
 8000db4:	0800bf48 	.word	0x0800bf48
 8000db8:	0800bf70 	.word	0x0800bf70
 8000dbc:	20000100 	.word	0x20000100
 8000dc0:	0800bf9c 	.word	0x0800bf9c
 8000dc4:	0800bfd0 	.word	0x0800bfd0
 8000dc8:	0800c008 	.word	0x0800c008

08000dcc <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &USBHfno);
 8000dd4:	4943      	ldr	r1, [pc, #268]	; (8000ee4 <Create_File+0x118>)
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f009 fe13 	bl	800aa02 <f_stat>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	461a      	mov	r2, r3
 8000de0:	4b41      	ldr	r3, [pc, #260]	; (8000ee8 <Create_File+0x11c>)
 8000de2:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000de4:	4b40      	ldr	r3, [pc, #256]	; (8000ee8 <Create_File+0x11c>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d112      	bne.n	8000e12 <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 8000dec:	2064      	movs	r0, #100	; 0x64
 8000dee:	f00a fbdf 	bl	800b5b0 <malloc>
 8000df2:	4603      	mov	r3, r0
 8000df4:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	493c      	ldr	r1, [pc, #240]	; (8000eec <Create_File+0x120>)
 8000dfa:	68f8      	ldr	r0, [r7, #12]
 8000dfc:	f00a fcb8 	bl	800b770 <siprintf>
		Send_Uart(buf);
 8000e00:	68f8      	ldr	r0, [r7, #12]
 8000e02:	f7ff fec7 	bl	8000b94 <Send_Uart>
		free(buf);
 8000e06:	68f8      	ldr	r0, [r7, #12]
 8000e08:	f00a fbda 	bl	800b5c0 <free>
	    return fresult;
 8000e0c:	4b36      	ldr	r3, [pc, #216]	; (8000ee8 <Create_File+0x11c>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	e063      	b.n	8000eda <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&USBHFile, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8000e12:	220b      	movs	r2, #11
 8000e14:	6879      	ldr	r1, [r7, #4]
 8000e16:	4836      	ldr	r0, [pc, #216]	; (8000ef0 <Create_File+0x124>)
 8000e18:	f009 fa18 	bl	800a24c <f_open>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	461a      	mov	r2, r3
 8000e20:	4b31      	ldr	r3, [pc, #196]	; (8000ee8 <Create_File+0x11c>)
 8000e22:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000e24:	4b30      	ldr	r3, [pc, #192]	; (8000ee8 <Create_File+0x11c>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d015      	beq.n	8000e58 <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 8000e2c:	2064      	movs	r0, #100	; 0x64
 8000e2e:	f00a fbbf 	bl	800b5b0 <malloc>
 8000e32:	4603      	mov	r3, r0
 8000e34:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 8000e36:	4b2c      	ldr	r3, [pc, #176]	; (8000ee8 <Create_File+0x11c>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	492d      	ldr	r1, [pc, #180]	; (8000ef4 <Create_File+0x128>)
 8000e40:	6938      	ldr	r0, [r7, #16]
 8000e42:	f00a fc95 	bl	800b770 <siprintf>
			Send_Uart(buf);
 8000e46:	6938      	ldr	r0, [r7, #16]
 8000e48:	f7ff fea4 	bl	8000b94 <Send_Uart>
			free(buf);
 8000e4c:	6938      	ldr	r0, [r7, #16]
 8000e4e:	f00a fbb7 	bl	800b5c0 <free>
		    return fresult;
 8000e52:	4b25      	ldr	r3, [pc, #148]	; (8000ee8 <Create_File+0x11c>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	e040      	b.n	8000eda <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8000e58:	2064      	movs	r0, #100	; 0x64
 8000e5a:	f00a fba9 	bl	800b5b0 <malloc>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	4924      	ldr	r1, [pc, #144]	; (8000ef8 <Create_File+0x12c>)
 8000e66:	69f8      	ldr	r0, [r7, #28]
 8000e68:	f00a fc82 	bl	800b770 <siprintf>
			Send_Uart(buf);
 8000e6c:	69f8      	ldr	r0, [r7, #28]
 8000e6e:	f7ff fe91 	bl	8000b94 <Send_Uart>
			free(buf);
 8000e72:	69f8      	ldr	r0, [r7, #28]
 8000e74:	f00a fba4 	bl	800b5c0 <free>
		}

		fresult = f_close(&USBHFile);
 8000e78:	481d      	ldr	r0, [pc, #116]	; (8000ef0 <Create_File+0x124>)
 8000e7a:	f009 fd98 	bl	800a9ae <f_close>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <Create_File+0x11c>)
 8000e84:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000e86:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <Create_File+0x11c>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d013      	beq.n	8000eb6 <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 8000e8e:	2064      	movs	r0, #100	; 0x64
 8000e90:	f00a fb8e 	bl	800b5b0 <malloc>
 8000e94:	4603      	mov	r3, r0
 8000e96:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8000e98:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <Create_File+0x11c>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4916      	ldr	r1, [pc, #88]	; (8000efc <Create_File+0x130>)
 8000ea2:	6978      	ldr	r0, [r7, #20]
 8000ea4:	f00a fc64 	bl	800b770 <siprintf>
			Send_Uart(buf);
 8000ea8:	6978      	ldr	r0, [r7, #20]
 8000eaa:	f7ff fe73 	bl	8000b94 <Send_Uart>
			free(buf);
 8000eae:	6978      	ldr	r0, [r7, #20]
 8000eb0:	f00a fb86 	bl	800b5c0 <free>
 8000eb4:	e00f      	b.n	8000ed6 <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8000eb6:	2064      	movs	r0, #100	; 0x64
 8000eb8:	f00a fb7a 	bl	800b5b0 <malloc>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	490f      	ldr	r1, [pc, #60]	; (8000f00 <Create_File+0x134>)
 8000ec4:	69b8      	ldr	r0, [r7, #24]
 8000ec6:	f00a fc53 	bl	800b770 <siprintf>
			Send_Uart(buf);
 8000eca:	69b8      	ldr	r0, [r7, #24]
 8000ecc:	f7ff fe62 	bl	8000b94 <Send_Uart>
			free(buf);
 8000ed0:	69b8      	ldr	r0, [r7, #24]
 8000ed2:	f00a fb75 	bl	800b5c0 <free>
		}
	}
    return fresult;
 8000ed6:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <Create_File+0x11c>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3720      	adds	r7, #32
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000108 	.word	0x20000108
 8000ee8:	20000104 	.word	0x20000104
 8000eec:	0800c0fc 	.word	0x0800c0fc
 8000ef0:	20000170 	.word	0x20000170
 8000ef4:	0800c134 	.word	0x0800c134
 8000ef8:	0800c15c 	.word	0x0800c15c
 8000efc:	0800c19c 	.word	0x0800c19c
 8000f00:	0800c0dc 	.word	0x0800c0dc

08000f04 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	; 0x28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 8000f0e:	495e      	ldr	r1, [pc, #376]	; (8001088 <Update_File+0x184>)
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f009 fd76 	bl	800aa02 <f_stat>
 8000f16:	4603      	mov	r3, r0
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b5c      	ldr	r3, [pc, #368]	; (800108c <Update_File+0x188>)
 8000f1c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000f1e:	4b5b      	ldr	r3, [pc, #364]	; (800108c <Update_File+0x188>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d012      	beq.n	8000f4c <Update_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 8000f26:	2064      	movs	r0, #100	; 0x64
 8000f28:	f00a fb42 	bl	800b5b0 <malloc>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	4957      	ldr	r1, [pc, #348]	; (8001090 <Update_File+0x18c>)
 8000f34:	68f8      	ldr	r0, [r7, #12]
 8000f36:	f00a fc1b 	bl	800b770 <siprintf>
		Send_Uart (buf);
 8000f3a:	68f8      	ldr	r0, [r7, #12]
 8000f3c:	f7ff fe2a 	bl	8000b94 <Send_Uart>
		free(buf);
 8000f40:	68f8      	ldr	r0, [r7, #12]
 8000f42:	f00a fb3d 	bl	800b5c0 <free>
	    return fresult;
 8000f46:	4b51      	ldr	r3, [pc, #324]	; (800108c <Update_File+0x188>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	e098      	b.n	800107e <Update_File+0x17a>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_APPEND | FA_WRITE);
 8000f4c:	2232      	movs	r2, #50	; 0x32
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	4850      	ldr	r0, [pc, #320]	; (8001094 <Update_File+0x190>)
 8000f52:	f009 f97b 	bl	800a24c <f_open>
 8000f56:	4603      	mov	r3, r0
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b4c      	ldr	r3, [pc, #304]	; (800108c <Update_File+0x188>)
 8000f5c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000f5e:	4b4b      	ldr	r3, [pc, #300]	; (800108c <Update_File+0x188>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d015      	beq.n	8000f92 <Update_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000f66:	2064      	movs	r0, #100	; 0x64
 8000f68:	f00a fb22 	bl	800b5b0 <malloc>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000f70:	4b46      	ldr	r3, [pc, #280]	; (800108c <Update_File+0x188>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4947      	ldr	r1, [pc, #284]	; (8001098 <Update_File+0x194>)
 8000f7a:	6938      	ldr	r0, [r7, #16]
 8000f7c:	f00a fbf8 	bl	800b770 <siprintf>
	    	Send_Uart(buf);
 8000f80:	6938      	ldr	r0, [r7, #16]
 8000f82:	f7ff fe07 	bl	8000b94 <Send_Uart>
	        free(buf);
 8000f86:	6938      	ldr	r0, [r7, #16]
 8000f88:	f00a fb1a 	bl	800b5c0 <free>
	        return fresult;
 8000f8c:	4b3f      	ldr	r3, [pc, #252]	; (800108c <Update_File+0x188>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	e075      	b.n	800107e <Update_File+0x17a>
	    }

    	char *buf = malloc(100*sizeof(char));
 8000f92:	2064      	movs	r0, #100	; 0x64
 8000f94:	f00a fb0c 	bl	800b5b0 <malloc>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
    	sprintf (buf, "Opening file-->  *%s*  To UPDATE data in it\n", name);
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	493f      	ldr	r1, [pc, #252]	; (800109c <Update_File+0x198>)
 8000fa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fa2:	f00a fbe5 	bl	800b770 <siprintf>
    	Send_Uart(buf);
 8000fa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fa8:	f7ff fdf4 	bl	8000b94 <Send_Uart>
        free(buf);
 8000fac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fae:	f00a fb07 	bl	800b5c0 <free>

	    /* Writing text */
	    fresult = f_write(&USBHFile, data, strlen (data), &bw);
 8000fb2:	6838      	ldr	r0, [r7, #0]
 8000fb4:	f7ff f914 	bl	80001e0 <strlen>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	4b39      	ldr	r3, [pc, #228]	; (80010a0 <Update_File+0x19c>)
 8000fbc:	6839      	ldr	r1, [r7, #0]
 8000fbe:	4835      	ldr	r0, [pc, #212]	; (8001094 <Update_File+0x190>)
 8000fc0:	f009 fb02 	bl	800a5c8 <f_write>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4b30      	ldr	r3, [pc, #192]	; (800108c <Update_File+0x188>)
 8000fca:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000fcc:	4b2f      	ldr	r3, [pc, #188]	; (800108c <Update_File+0x188>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d013      	beq.n	8000ffc <Update_File+0xf8>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000fd4:	2064      	movs	r0, #100	; 0x64
 8000fd6:	f00a faeb 	bl	800b5b0 <malloc>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 8000fde:	4b2b      	ldr	r3, [pc, #172]	; (800108c <Update_File+0x188>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	492f      	ldr	r1, [pc, #188]	; (80010a4 <Update_File+0x1a0>)
 8000fe8:	69f8      	ldr	r0, [r7, #28]
 8000fea:	f00a fbc1 	bl	800b770 <siprintf>
	    	Send_Uart(buf);
 8000fee:	69f8      	ldr	r0, [r7, #28]
 8000ff0:	f7ff fdd0 	bl	8000b94 <Send_Uart>
	    	free(buf);
 8000ff4:	69f8      	ldr	r0, [r7, #28]
 8000ff6:	f00a fae3 	bl	800b5c0 <free>
 8000ffa:	e00f      	b.n	800101c <Update_File+0x118>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000ffc:	2064      	movs	r0, #100	; 0x64
 8000ffe:	f00a fad7 	bl	800b5b0 <malloc>
 8001002:	4603      	mov	r3, r0
 8001004:	623b      	str	r3, [r7, #32]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	4927      	ldr	r1, [pc, #156]	; (80010a8 <Update_File+0x1a4>)
 800100a:	6a38      	ldr	r0, [r7, #32]
 800100c:	f00a fbb0 	bl	800b770 <siprintf>
	    	Send_Uart(buf);
 8001010:	6a38      	ldr	r0, [r7, #32]
 8001012:	f7ff fdbf 	bl	8000b94 <Send_Uart>
	    	free(buf);
 8001016:	6a38      	ldr	r0, [r7, #32]
 8001018:	f00a fad2 	bl	800b5c0 <free>
	    }

	    /* Close file */
	    fresult = f_close(&USBHFile);
 800101c:	481d      	ldr	r0, [pc, #116]	; (8001094 <Update_File+0x190>)
 800101e:	f009 fcc6 	bl	800a9ae <f_close>
 8001022:	4603      	mov	r3, r0
 8001024:	461a      	mov	r2, r3
 8001026:	4b19      	ldr	r3, [pc, #100]	; (800108c <Update_File+0x188>)
 8001028:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800102a:	4b18      	ldr	r3, [pc, #96]	; (800108c <Update_File+0x188>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d013      	beq.n	800105a <Update_File+0x156>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001032:	2064      	movs	r0, #100	; 0x64
 8001034:	f00a fabc 	bl	800b5b0 <malloc>
 8001038:	4603      	mov	r3, r0
 800103a:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 800103c:	4b13      	ldr	r3, [pc, #76]	; (800108c <Update_File+0x188>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	461a      	mov	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4919      	ldr	r1, [pc, #100]	; (80010ac <Update_File+0x1a8>)
 8001046:	6978      	ldr	r0, [r7, #20]
 8001048:	f00a fb92 	bl	800b770 <siprintf>
	    	Send_Uart(buf);
 800104c:	6978      	ldr	r0, [r7, #20]
 800104e:	f7ff fda1 	bl	8000b94 <Send_Uart>
	    	free(buf);
 8001052:	6978      	ldr	r0, [r7, #20]
 8001054:	f00a fab4 	bl	800b5c0 <free>
 8001058:	e00f      	b.n	800107a <Update_File+0x176>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 800105a:	2064      	movs	r0, #100	; 0x64
 800105c:	f00a faa8 	bl	800b5b0 <malloc>
 8001060:	4603      	mov	r3, r0
 8001062:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	4912      	ldr	r1, [pc, #72]	; (80010b0 <Update_File+0x1ac>)
 8001068:	69b8      	ldr	r0, [r7, #24]
 800106a:	f00a fb81 	bl	800b770 <siprintf>
	    	Send_Uart(buf);
 800106e:	69b8      	ldr	r0, [r7, #24]
 8001070:	f7ff fd90 	bl	8000b94 <Send_Uart>
	    	free(buf);
 8001074:	69b8      	ldr	r0, [r7, #24]
 8001076:	f00a faa3 	bl	800b5c0 <free>
	     }
	}
    return fresult;
 800107a:	4b04      	ldr	r3, [pc, #16]	; (800108c <Update_File+0x188>)
 800107c:	781b      	ldrb	r3, [r3, #0]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3728      	adds	r7, #40	; 0x28
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000108 	.word	0x20000108
 800108c:	20000104 	.word	0x20000104
 8001090:	0800bf28 	.word	0x0800bf28
 8001094:	20000170 	.word	0x20000170
 8001098:	0800bf48 	.word	0x0800bf48
 800109c:	0800c1c0 	.word	0x0800c1c0
 80010a0:	20000100 	.word	0x20000100
 80010a4:	0800c1f0 	.word	0x0800c1f0
 80010a8:	0800c218 	.word	0x0800c218
 80010ac:	0800c0b4 	.word	0x0800c0b4
 80010b0:	0800c0dc 	.word	0x0800c0dc

080010b4 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f009 fd8e 	bl	800abde <f_mkdir>
 80010c2:	4603      	mov	r3, r0
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <Create_Dir+0x74>)
 80010c8:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <Create_Dir+0x74>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d110      	bne.n	80010f4 <Create_Dir+0x40>
    {
    	char *buf = malloc(100*sizeof(char));
 80010d2:	2064      	movs	r0, #100	; 0x64
 80010d4:	f00a fa6c 	bl	800b5b0 <malloc>
 80010d8:	4603      	mov	r3, r0
 80010da:	60bb      	str	r3, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n\n", name);
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	4913      	ldr	r1, [pc, #76]	; (800112c <Create_Dir+0x78>)
 80010e0:	68b8      	ldr	r0, [r7, #8]
 80010e2:	f00a fb45 	bl	800b770 <siprintf>
    	Send_Uart (buf);
 80010e6:	68b8      	ldr	r0, [r7, #8]
 80010e8:	f7ff fd54 	bl	8000b94 <Send_Uart>
    	free(buf);
 80010ec:	68b8      	ldr	r0, [r7, #8]
 80010ee:	f00a fa67 	bl	800b5c0 <free>
 80010f2:	e012      	b.n	800111a <Create_Dir+0x66>
    }
    else
    {
    	char *buf = malloc(100*sizeof(char));
 80010f4:	2064      	movs	r0, #100	; 0x64
 80010f6:	f00a fa5b 	bl	800b5b0 <malloc>
 80010fa:	4603      	mov	r3, r0
 80010fc:	60fb      	str	r3, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 80010fe:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <Create_Dir+0x74>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	461a      	mov	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	490a      	ldr	r1, [pc, #40]	; (8001130 <Create_Dir+0x7c>)
 8001108:	68f8      	ldr	r0, [r7, #12]
 800110a:	f00a fb31 	bl	800b770 <siprintf>
    	Send_Uart(buf);
 800110e:	68f8      	ldr	r0, [r7, #12]
 8001110:	f7ff fd40 	bl	8000b94 <Send_Uart>
    	free(buf);
 8001114:	68f8      	ldr	r0, [r7, #12]
 8001116:	f00a fa53 	bl	800b5c0 <free>
    }
    return fresult;
 800111a:	4b03      	ldr	r3, [pc, #12]	; (8001128 <Create_Dir+0x74>)
 800111c:	781b      	ldrb	r3, [r3, #0]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000104 	.word	0x20000104
 800112c:	0800c27c 	.word	0x0800c27c
 8001130:	0800c2a4 	.word	0x0800c2a4

08001134 <Check_USB_Details>:

void Check_USB_Details (void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pUSBHFatFS);
 800113a:	4a30      	ldr	r2, [pc, #192]	; (80011fc <Check_USB_Details+0xc8>)
 800113c:	4930      	ldr	r1, [pc, #192]	; (8001200 <Check_USB_Details+0xcc>)
 800113e:	4831      	ldr	r0, [pc, #196]	; (8001204 <Check_USB_Details+0xd0>)
 8001140:	f009 fc98 	bl	800aa74 <f_getfree>

    total = (uint32_t)((pUSBHFatFS->n_fatent - 2) * pUSBHFatFS->csize * 0.5);
 8001144:	4b2d      	ldr	r3, [pc, #180]	; (80011fc <Check_USB_Details+0xc8>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	3b02      	subs	r3, #2
 800114c:	4a2b      	ldr	r2, [pc, #172]	; (80011fc <Check_USB_Details+0xc8>)
 800114e:	6812      	ldr	r2, [r2, #0]
 8001150:	8952      	ldrh	r2, [r2, #10]
 8001152:	fb02 f303 	mul.w	r3, r2, r3
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fb06 	bl	8000768 <__aeabi_ui2d>
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	4b29      	ldr	r3, [pc, #164]	; (8001208 <Check_USB_Details+0xd4>)
 8001162:	f7ff f895 	bl	8000290 <__aeabi_dmul>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4610      	mov	r0, r2
 800116c:	4619      	mov	r1, r3
 800116e:	f7ff fb75 	bl	800085c <__aeabi_d2uiz>
 8001172:	4603      	mov	r3, r0
 8001174:	4a25      	ldr	r2, [pc, #148]	; (800120c <Check_USB_Details+0xd8>)
 8001176:	6013      	str	r3, [r2, #0]
    char *buf = malloc(30*sizeof(char));
 8001178:	201e      	movs	r0, #30
 800117a:	f00a fa19 	bl	800b5b0 <malloc>
 800117e:	4603      	mov	r3, r0
 8001180:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB  Total Size: \t%lu\n",total);
 8001182:	4b22      	ldr	r3, [pc, #136]	; (800120c <Check_USB_Details+0xd8>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	4921      	ldr	r1, [pc, #132]	; (8001210 <Check_USB_Details+0xdc>)
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f00a faf0 	bl	800b770 <siprintf>
    Send_Uart(buf);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff fcff 	bl	8000b94 <Send_Uart>
    free(buf);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f00a fa12 	bl	800b5c0 <free>
    free_space = (uint32_t)(fre_clust * pUSBHFatFS->csize * 0.5);
 800119c:	4b17      	ldr	r3, [pc, #92]	; (80011fc <Check_USB_Details+0xc8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	895b      	ldrh	r3, [r3, #10]
 80011a2:	461a      	mov	r2, r3
 80011a4:	4b16      	ldr	r3, [pc, #88]	; (8001200 <Check_USB_Details+0xcc>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	fb03 f302 	mul.w	r3, r3, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fadb 	bl	8000768 <__aeabi_ui2d>
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <Check_USB_Details+0xd4>)
 80011b8:	f7ff f86a 	bl	8000290 <__aeabi_dmul>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	f7ff fb4a 	bl	800085c <__aeabi_d2uiz>
 80011c8:	4603      	mov	r3, r0
 80011ca:	4a12      	ldr	r2, [pc, #72]	; (8001214 <Check_USB_Details+0xe0>)
 80011cc:	6013      	str	r3, [r2, #0]
    buf = malloc(30*sizeof(char));
 80011ce:	201e      	movs	r0, #30
 80011d0:	f00a f9ee 	bl	800b5b0 <malloc>
 80011d4:	4603      	mov	r3, r0
 80011d6:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB Free Space: \t%lu\n",free_space);
 80011d8:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <Check_USB_Details+0xe0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	490e      	ldr	r1, [pc, #56]	; (8001218 <Check_USB_Details+0xe4>)
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f00a fac5 	bl	800b770 <siprintf>
    Send_Uart(buf);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff fcd4 	bl	8000b94 <Send_Uart>
    free(buf);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f00a f9e7 	bl	800b5c0 <free>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	200000f8 	.word	0x200000f8
 8001200:	200000f0 	.word	0x200000f0
 8001204:	0800c2d0 	.word	0x0800c2d0
 8001208:	3fe00000 	.word	0x3fe00000
 800120c:	20000120 	.word	0x20000120
 8001210:	0800c2d4 	.word	0x0800c2d4
 8001214:	200000fc 	.word	0x200000fc
 8001218:	0800c2ec 	.word	0x0800c2ec

0800121c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001220:	f000 fa3e 	bl	80016a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001224:	f000 f816 	bl	8001254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001228:	f000 f8a6 	bl	8001378 <MX_GPIO_Init>
  MX_FATFS_Init();
 800122c:	f004 fa1e 	bl	800566c <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001230:	f009 fe38 	bl	800aea4 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8001234:	f000 f876 	bl	8001324 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001238:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800123c:	4804      	ldr	r0, [pc, #16]	; (8001250 <main+0x34>)
 800123e:	f000 fd74 	bl	8001d2a <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8001242:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001246:	f000 fa9d 	bl	8001784 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800124a:	f009 fe51 	bl	800aef0 <MX_USB_HOST_Process>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800124e:	e7f3      	b.n	8001238 <main+0x1c>
 8001250:	40020800 	.word	0x40020800

08001254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b094      	sub	sp, #80	; 0x50
 8001258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125a:	f107 0320 	add.w	r3, r7, #32
 800125e:	2230      	movs	r2, #48	; 0x30
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f00a f9c2 	bl	800b5ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001278:	2300      	movs	r3, #0
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	4b27      	ldr	r3, [pc, #156]	; (800131c <SystemClock_Config+0xc8>)
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	4a26      	ldr	r2, [pc, #152]	; (800131c <SystemClock_Config+0xc8>)
 8001282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001286:	6413      	str	r3, [r2, #64]	; 0x40
 8001288:	4b24      	ldr	r3, [pc, #144]	; (800131c <SystemClock_Config+0xc8>)
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001294:	2300      	movs	r3, #0
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	4b21      	ldr	r3, [pc, #132]	; (8001320 <SystemClock_Config+0xcc>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a20      	ldr	r2, [pc, #128]	; (8001320 <SystemClock_Config+0xcc>)
 800129e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <SystemClock_Config+0xcc>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012b0:	2301      	movs	r3, #1
 80012b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ba:	2302      	movs	r3, #2
 80012bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80012c4:	2319      	movs	r3, #25
 80012c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80012c8:	23c0      	movs	r3, #192	; 0xc0
 80012ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012cc:	2302      	movs	r3, #2
 80012ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012d0:	2304      	movs	r3, #4
 80012d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d4:	f107 0320 	add.w	r3, r7, #32
 80012d8:	4618      	mov	r0, r3
 80012da:	f002 fab1 	bl	8003840 <HAL_RCC_OscConfig>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012e4:	f000 f8c0 	bl	8001468 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e8:	230f      	movs	r3, #15
 80012ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ec:	2302      	movs	r3, #2
 80012ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80012f0:	2380      	movs	r3, #128	; 0x80
 80012f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	2101      	movs	r1, #1
 8001302:	4618      	mov	r0, r3
 8001304:	f002 fd14 	bl	8003d30 <HAL_RCC_ClockConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800130e:	f000 f8ab 	bl	8001468 <Error_Handler>
  }
}
 8001312:	bf00      	nop
 8001314:	3750      	adds	r7, #80	; 0x50
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800
 8001320:	40007000 	.word	0x40007000

08001324 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 800132a:	4a12      	ldr	r2, [pc, #72]	; (8001374 <MX_USART2_UART_Init+0x50>)
 800132c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 8001330:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001334:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001342:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001348:	4b09      	ldr	r3, [pc, #36]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 800134a:	220c      	movs	r2, #12
 800134c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800135a:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 800135c:	f002 feb8 	bl	80040d0 <HAL_UART_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001366:	f000 f87f 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000124 	.word	0x20000124
 8001374:	40004400 	.word	0x40004400

08001378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
 800138c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	4b32      	ldr	r3, [pc, #200]	; (800145c <MX_GPIO_Init+0xe4>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a31      	ldr	r2, [pc, #196]	; (800145c <MX_GPIO_Init+0xe4>)
 8001398:	f043 0304 	orr.w	r3, r3, #4
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b2f      	ldr	r3, [pc, #188]	; (800145c <MX_GPIO_Init+0xe4>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	4b2b      	ldr	r3, [pc, #172]	; (800145c <MX_GPIO_Init+0xe4>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a2a      	ldr	r2, [pc, #168]	; (800145c <MX_GPIO_Init+0xe4>)
 80013b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b28      	ldr	r3, [pc, #160]	; (800145c <MX_GPIO_Init+0xe4>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	4b24      	ldr	r3, [pc, #144]	; (800145c <MX_GPIO_Init+0xe4>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a23      	ldr	r2, [pc, #140]	; (800145c <MX_GPIO_Init+0xe4>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b21      	ldr	r3, [pc, #132]	; (800145c <MX_GPIO_Init+0xe4>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	4b1d      	ldr	r3, [pc, #116]	; (800145c <MX_GPIO_Init+0xe4>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a1c      	ldr	r2, [pc, #112]	; (800145c <MX_GPIO_Init+0xe4>)
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b1a      	ldr	r3, [pc, #104]	; (800145c <MX_GPIO_Init+0xe4>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001404:	4816      	ldr	r0, [pc, #88]	; (8001460 <MX_GPIO_Init+0xe8>)
 8001406:	f000 fc77 	bl	8001cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800140a:	2200      	movs	r2, #0
 800140c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001410:	4814      	ldr	r0, [pc, #80]	; (8001464 <MX_GPIO_Init+0xec>)
 8001412:	f000 fc71 	bl	8001cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800141a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141c:	2301      	movs	r3, #1
 800141e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001420:	2302      	movs	r3, #2
 8001422:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2300      	movs	r3, #0
 8001426:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	4619      	mov	r1, r3
 800142e:	480c      	ldr	r0, [pc, #48]	; (8001460 <MX_GPIO_Init+0xe8>)
 8001430:	f000 fade 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143a:	2301      	movs	r3, #1
 800143c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001446:	f107 0314 	add.w	r3, r7, #20
 800144a:	4619      	mov	r1, r3
 800144c:	4805      	ldr	r0, [pc, #20]	; (8001464 <MX_GPIO_Init+0xec>)
 800144e:	f000 facf 	bl	80019f0 <HAL_GPIO_Init>

}
 8001452:	bf00      	nop
 8001454:	3728      	adds	r7, #40	; 0x28
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800
 8001460:	40020800 	.word	0x40020800
 8001464:	40020400 	.word	0x40020400

08001468 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800146c:	b672      	cpsid	i
}
 800146e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001470:	e7fe      	b.n	8001470 <Error_Handler+0x8>
	...

08001474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <HAL_MspInit+0x4c>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	4a0f      	ldr	r2, [pc, #60]	; (80014c0 <HAL_MspInit+0x4c>)
 8001484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001488:	6453      	str	r3, [r2, #68]	; 0x44
 800148a:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <HAL_MspInit+0x4c>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	603b      	str	r3, [r7, #0]
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <HAL_MspInit+0x4c>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	4a08      	ldr	r2, [pc, #32]	; (80014c0 <HAL_MspInit+0x4c>)
 80014a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a4:	6413      	str	r3, [r2, #64]	; 0x40
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <HAL_MspInit+0x4c>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800

080014c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	; 0x28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a19      	ldr	r2, [pc, #100]	; (8001548 <HAL_UART_MspInit+0x84>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d12b      	bne.n	800153e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
 80014ea:	4b18      	ldr	r3, [pc, #96]	; (800154c <HAL_UART_MspInit+0x88>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	4a17      	ldr	r2, [pc, #92]	; (800154c <HAL_UART_MspInit+0x88>)
 80014f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f4:	6413      	str	r3, [r2, #64]	; 0x40
 80014f6:	4b15      	ldr	r3, [pc, #84]	; (800154c <HAL_UART_MspInit+0x88>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <HAL_UART_MspInit+0x88>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a10      	ldr	r2, [pc, #64]	; (800154c <HAL_UART_MspInit+0x88>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b0e      	ldr	r3, [pc, #56]	; (800154c <HAL_UART_MspInit+0x88>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800151e:	230c      	movs	r3, #12
 8001520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001522:	2302      	movs	r3, #2
 8001524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152a:	2303      	movs	r3, #3
 800152c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800152e:	2307      	movs	r3, #7
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	4805      	ldr	r0, [pc, #20]	; (8001550 <HAL_UART_MspInit+0x8c>)
 800153a:	f000 fa59 	bl	80019f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800153e:	bf00      	nop
 8001540:	3728      	adds	r7, #40	; 0x28
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40004400 	.word	0x40004400
 800154c:	40023800 	.word	0x40023800
 8001550:	40020000 	.word	0x40020000

08001554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <NMI_Handler+0x4>

0800155a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800155e:	e7fe      	b.n	800155e <HardFault_Handler+0x4>

08001560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <MemManage_Handler+0x4>

08001566 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800156a:	e7fe      	b.n	800156a <BusFault_Handler+0x4>

0800156c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <UsageFault_Handler+0x4>

08001572 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a0:	f000 f8d0 	bl	8001744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80015ac:	4802      	ldr	r0, [pc, #8]	; (80015b8 <OTG_FS_IRQHandler+0x10>)
 80015ae:	f000 fe41 	bl	8002234 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200009ac 	.word	0x200009ac

080015bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015c4:	4a14      	ldr	r2, [pc, #80]	; (8001618 <_sbrk+0x5c>)
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <_sbrk+0x60>)
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d0:	4b13      	ldr	r3, [pc, #76]	; (8001620 <_sbrk+0x64>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d102      	bne.n	80015de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d8:	4b11      	ldr	r3, [pc, #68]	; (8001620 <_sbrk+0x64>)
 80015da:	4a12      	ldr	r2, [pc, #72]	; (8001624 <_sbrk+0x68>)
 80015dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <_sbrk+0x64>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d207      	bcs.n	80015fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015ec:	f009 ffb6 	bl	800b55c <__errno>
 80015f0:	4603      	mov	r3, r0
 80015f2:	220c      	movs	r2, #12
 80015f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015fa:	e009      	b.n	8001610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <_sbrk+0x64>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001602:	4b07      	ldr	r3, [pc, #28]	; (8001620 <_sbrk+0x64>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	4a05      	ldr	r2, [pc, #20]	; (8001620 <_sbrk+0x64>)
 800160c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800160e:	68fb      	ldr	r3, [r7, #12]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20020000 	.word	0x20020000
 800161c:	00000400 	.word	0x00000400
 8001620:	200000ac 	.word	0x200000ac
 8001624:	20000cc0 	.word	0x20000cc0

08001628 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <SystemInit+0x20>)
 800162e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001632:	4a05      	ldr	r2, [pc, #20]	; (8001648 <SystemInit+0x20>)
 8001634:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001638:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800164c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001684 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001650:	480d      	ldr	r0, [pc, #52]	; (8001688 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001652:	490e      	ldr	r1, [pc, #56]	; (800168c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001654:	4a0e      	ldr	r2, [pc, #56]	; (8001690 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001658:	e002      	b.n	8001660 <LoopCopyDataInit>

0800165a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800165c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165e:	3304      	adds	r3, #4

08001660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001664:	d3f9      	bcc.n	800165a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001666:	4a0b      	ldr	r2, [pc, #44]	; (8001694 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001668:	4c0b      	ldr	r4, [pc, #44]	; (8001698 <LoopFillZerobss+0x26>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800166c:	e001      	b.n	8001672 <LoopFillZerobss>

0800166e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001670:	3204      	adds	r2, #4

08001672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001674:	d3fb      	bcc.n	800166e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001676:	f7ff ffd7 	bl	8001628 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800167a:	f009 ff75 	bl	800b568 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800167e:	f7ff fdcd 	bl	800121c <main>
  bx  lr    
 8001682:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001684:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800168c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001690:	0800c580 	.word	0x0800c580
  ldr r2, =_sbss
 8001694:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001698:	20000cc0 	.word	0x20000cc0

0800169c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800169c:	e7fe      	b.n	800169c <ADC_IRQHandler>
	...

080016a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016a4:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <HAL_Init+0x40>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a0d      	ldr	r2, [pc, #52]	; (80016e0 <HAL_Init+0x40>)
 80016aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016b0:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <HAL_Init+0x40>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <HAL_Init+0x40>)
 80016b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <HAL_Init+0x40>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a07      	ldr	r2, [pc, #28]	; (80016e0 <HAL_Init+0x40>)
 80016c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c8:	2003      	movs	r0, #3
 80016ca:	f000 f94f 	bl	800196c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ce:	200f      	movs	r0, #15
 80016d0:	f000 f808 	bl	80016e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d4:	f7ff fece 	bl	8001474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40023c00 	.word	0x40023c00

080016e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_InitTick+0x54>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_InitTick+0x58>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	4619      	mov	r1, r3
 80016f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001702:	4618      	mov	r0, r3
 8001704:	f000 f967 	bl	80019d6 <HAL_SYSTICK_Config>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e00e      	b.n	8001730 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b0f      	cmp	r3, #15
 8001716:	d80a      	bhi.n	800172e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001718:	2200      	movs	r2, #0
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001720:	f000 f92f 	bl	8001982 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001724:	4a06      	ldr	r2, [pc, #24]	; (8001740 <HAL_InitTick+0x5c>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
 800172c:	e000      	b.n	8001730 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000000 	.word	0x20000000
 800173c:	20000008 	.word	0x20000008
 8001740:	20000004 	.word	0x20000004

08001744 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_IncTick+0x20>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_IncTick+0x24>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4413      	add	r3, r2
 8001754:	4a04      	ldr	r2, [pc, #16]	; (8001768 <HAL_IncTick+0x24>)
 8001756:	6013      	str	r3, [r2, #0]
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	20000008 	.word	0x20000008
 8001768:	20000168 	.word	0x20000168

0800176c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return uwTick;
 8001770:	4b03      	ldr	r3, [pc, #12]	; (8001780 <HAL_GetTick+0x14>)
 8001772:	681b      	ldr	r3, [r3, #0]
}
 8001774:	4618      	mov	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	20000168 	.word	0x20000168

08001784 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800178c:	f7ff ffee 	bl	800176c <HAL_GetTick>
 8001790:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800179c:	d005      	beq.n	80017aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800179e:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <HAL_Delay+0x44>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	461a      	mov	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4413      	add	r3, r2
 80017a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017aa:	bf00      	nop
 80017ac:	f7ff ffde 	bl	800176c <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d8f7      	bhi.n	80017ac <HAL_Delay+0x28>
  {
  }
}
 80017bc:	bf00      	nop
 80017be:	bf00      	nop
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000008 	.word	0x20000008

080017cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <__NVIC_SetPriorityGrouping+0x44>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e8:	4013      	ands	r3, r2
 80017ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017fe:	4a04      	ldr	r2, [pc, #16]	; (8001810 <__NVIC_SetPriorityGrouping+0x44>)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	60d3      	str	r3, [r2, #12]
}
 8001804:	bf00      	nop
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001818:	4b04      	ldr	r3, [pc, #16]	; (800182c <__NVIC_GetPriorityGrouping+0x18>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	0a1b      	lsrs	r3, r3, #8
 800181e:	f003 0307 	and.w	r3, r3, #7
}
 8001822:	4618      	mov	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	2b00      	cmp	r3, #0
 8001840:	db0b      	blt.n	800185a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	f003 021f 	and.w	r2, r3, #31
 8001848:	4907      	ldr	r1, [pc, #28]	; (8001868 <__NVIC_EnableIRQ+0x38>)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	095b      	lsrs	r3, r3, #5
 8001850:	2001      	movs	r0, #1
 8001852:	fa00 f202 	lsl.w	r2, r0, r2
 8001856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	e000e100 	.word	0xe000e100

0800186c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	6039      	str	r1, [r7, #0]
 8001876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187c:	2b00      	cmp	r3, #0
 800187e:	db0a      	blt.n	8001896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	b2da      	uxtb	r2, r3
 8001884:	490c      	ldr	r1, [pc, #48]	; (80018b8 <__NVIC_SetPriority+0x4c>)
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	0112      	lsls	r2, r2, #4
 800188c:	b2d2      	uxtb	r2, r2
 800188e:	440b      	add	r3, r1
 8001890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001894:	e00a      	b.n	80018ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	b2da      	uxtb	r2, r3
 800189a:	4908      	ldr	r1, [pc, #32]	; (80018bc <__NVIC_SetPriority+0x50>)
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	3b04      	subs	r3, #4
 80018a4:	0112      	lsls	r2, r2, #4
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	440b      	add	r3, r1
 80018aa:	761a      	strb	r2, [r3, #24]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000e100 	.word	0xe000e100
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b089      	sub	sp, #36	; 0x24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f1c3 0307 	rsb	r3, r3, #7
 80018da:	2b04      	cmp	r3, #4
 80018dc:	bf28      	it	cs
 80018de:	2304      	movcs	r3, #4
 80018e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3304      	adds	r3, #4
 80018e6:	2b06      	cmp	r3, #6
 80018e8:	d902      	bls.n	80018f0 <NVIC_EncodePriority+0x30>
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3b03      	subs	r3, #3
 80018ee:	e000      	b.n	80018f2 <NVIC_EncodePriority+0x32>
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43da      	mvns	r2, r3
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	401a      	ands	r2, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001908:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	fa01 f303 	lsl.w	r3, r1, r3
 8001912:	43d9      	mvns	r1, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001918:	4313      	orrs	r3, r2
         );
}
 800191a:	4618      	mov	r0, r3
 800191c:	3724      	adds	r7, #36	; 0x24
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
	...

08001928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3b01      	subs	r3, #1
 8001934:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001938:	d301      	bcc.n	800193e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800193a:	2301      	movs	r3, #1
 800193c:	e00f      	b.n	800195e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800193e:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <SysTick_Config+0x40>)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3b01      	subs	r3, #1
 8001944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001946:	210f      	movs	r1, #15
 8001948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800194c:	f7ff ff8e 	bl	800186c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <SysTick_Config+0x40>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001956:	4b04      	ldr	r3, [pc, #16]	; (8001968 <SysTick_Config+0x40>)
 8001958:	2207      	movs	r2, #7
 800195a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	e000e010 	.word	0xe000e010

0800196c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff ff29 	bl	80017cc <__NVIC_SetPriorityGrouping>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001982:	b580      	push	{r7, lr}
 8001984:	b086      	sub	sp, #24
 8001986:	af00      	add	r7, sp, #0
 8001988:	4603      	mov	r3, r0
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
 800198e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001994:	f7ff ff3e 	bl	8001814 <__NVIC_GetPriorityGrouping>
 8001998:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	68b9      	ldr	r1, [r7, #8]
 800199e:	6978      	ldr	r0, [r7, #20]
 80019a0:	f7ff ff8e 	bl	80018c0 <NVIC_EncodePriority>
 80019a4:	4602      	mov	r2, r0
 80019a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019aa:	4611      	mov	r1, r2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff5d 	bl	800186c <__NVIC_SetPriority>
}
 80019b2:	bf00      	nop
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	4603      	mov	r3, r0
 80019c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff ff31 	bl	8001830 <__NVIC_EnableIRQ>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff ffa2 	bl	8001928 <SysTick_Config>
 80019e4:	4603      	mov	r3, r0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	; 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
 8001a0a:	e159      	b.n	8001cc0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	f040 8148 	bne.w	8001cba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d005      	beq.n	8001a42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d130      	bne.n	8001aa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	68da      	ldr	r2, [r3, #12]
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a78:	2201      	movs	r2, #1
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	091b      	lsrs	r3, r3, #4
 8001a8e:	f003 0201 	and.w	r2, r3, #1
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	2b03      	cmp	r3, #3
 8001aae:	d017      	beq.n	8001ae0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	2203      	movs	r2, #3
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d123      	bne.n	8001b34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	08da      	lsrs	r2, r3, #3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3208      	adds	r2, #8
 8001af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	220f      	movs	r2, #15
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	691a      	ldr	r2, [r3, #16]
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	08da      	lsrs	r2, r3, #3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3208      	adds	r2, #8
 8001b2e:	69b9      	ldr	r1, [r7, #24]
 8001b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	2203      	movs	r2, #3
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 0203 	and.w	r2, r3, #3
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 80a2 	beq.w	8001cba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	4b57      	ldr	r3, [pc, #348]	; (8001cd8 <HAL_GPIO_Init+0x2e8>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	4a56      	ldr	r2, [pc, #344]	; (8001cd8 <HAL_GPIO_Init+0x2e8>)
 8001b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b84:	6453      	str	r3, [r2, #68]	; 0x44
 8001b86:	4b54      	ldr	r3, [pc, #336]	; (8001cd8 <HAL_GPIO_Init+0x2e8>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b92:	4a52      	ldr	r2, [pc, #328]	; (8001cdc <HAL_GPIO_Init+0x2ec>)
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	089b      	lsrs	r3, r3, #2
 8001b98:	3302      	adds	r3, #2
 8001b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	220f      	movs	r2, #15
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a49      	ldr	r2, [pc, #292]	; (8001ce0 <HAL_GPIO_Init+0x2f0>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d019      	beq.n	8001bf2 <HAL_GPIO_Init+0x202>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a48      	ldr	r2, [pc, #288]	; (8001ce4 <HAL_GPIO_Init+0x2f4>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d013      	beq.n	8001bee <HAL_GPIO_Init+0x1fe>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a47      	ldr	r2, [pc, #284]	; (8001ce8 <HAL_GPIO_Init+0x2f8>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d00d      	beq.n	8001bea <HAL_GPIO_Init+0x1fa>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a46      	ldr	r2, [pc, #280]	; (8001cec <HAL_GPIO_Init+0x2fc>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d007      	beq.n	8001be6 <HAL_GPIO_Init+0x1f6>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a45      	ldr	r2, [pc, #276]	; (8001cf0 <HAL_GPIO_Init+0x300>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d101      	bne.n	8001be2 <HAL_GPIO_Init+0x1f2>
 8001bde:	2304      	movs	r3, #4
 8001be0:	e008      	b.n	8001bf4 <HAL_GPIO_Init+0x204>
 8001be2:	2307      	movs	r3, #7
 8001be4:	e006      	b.n	8001bf4 <HAL_GPIO_Init+0x204>
 8001be6:	2303      	movs	r3, #3
 8001be8:	e004      	b.n	8001bf4 <HAL_GPIO_Init+0x204>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e002      	b.n	8001bf4 <HAL_GPIO_Init+0x204>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <HAL_GPIO_Init+0x204>
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	69fa      	ldr	r2, [r7, #28]
 8001bf6:	f002 0203 	and.w	r2, r2, #3
 8001bfa:	0092      	lsls	r2, r2, #2
 8001bfc:	4093      	lsls	r3, r2
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c04:	4935      	ldr	r1, [pc, #212]	; (8001cdc <HAL_GPIO_Init+0x2ec>)
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	089b      	lsrs	r3, r3, #2
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c12:	4b38      	ldr	r3, [pc, #224]	; (8001cf4 <HAL_GPIO_Init+0x304>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c36:	4a2f      	ldr	r2, [pc, #188]	; (8001cf4 <HAL_GPIO_Init+0x304>)
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c3c:	4b2d      	ldr	r3, [pc, #180]	; (8001cf4 <HAL_GPIO_Init+0x304>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c60:	4a24      	ldr	r2, [pc, #144]	; (8001cf4 <HAL_GPIO_Init+0x304>)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c66:	4b23      	ldr	r3, [pc, #140]	; (8001cf4 <HAL_GPIO_Init+0x304>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c8a:	4a1a      	ldr	r2, [pc, #104]	; (8001cf4 <HAL_GPIO_Init+0x304>)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c90:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <HAL_GPIO_Init+0x304>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cb4:	4a0f      	ldr	r2, [pc, #60]	; (8001cf4 <HAL_GPIO_Init+0x304>)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	61fb      	str	r3, [r7, #28]
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	2b0f      	cmp	r3, #15
 8001cc4:	f67f aea2 	bls.w	8001a0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	3724      	adds	r7, #36	; 0x24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40013800 	.word	0x40013800
 8001ce0:	40020000 	.word	0x40020000
 8001ce4:	40020400 	.word	0x40020400
 8001ce8:	40020800 	.word	0x40020800
 8001cec:	40020c00 	.word	0x40020c00
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40013c00 	.word	0x40013c00

08001cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	807b      	strh	r3, [r7, #2]
 8001d04:	4613      	mov	r3, r2
 8001d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d08:	787b      	ldrb	r3, [r7, #1]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d0e:	887a      	ldrh	r2, [r7, #2]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d14:	e003      	b.n	8001d1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d16:	887b      	ldrh	r3, [r7, #2]
 8001d18:	041a      	lsls	r2, r3, #16
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	619a      	str	r2, [r3, #24]
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b085      	sub	sp, #20
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	460b      	mov	r3, r1
 8001d34:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d3c:	887a      	ldrh	r2, [r7, #2]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	4013      	ands	r3, r2
 8001d42:	041a      	lsls	r2, r3, #16
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	43d9      	mvns	r1, r3
 8001d48:	887b      	ldrh	r3, [r7, #2]
 8001d4a:	400b      	ands	r3, r1
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	619a      	str	r2, [r3, #24]
}
 8001d52:	bf00      	nop
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001d5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d60:	b08f      	sub	sp, #60	; 0x3c
 8001d62:	af0a      	add	r7, sp, #40	; 0x28
 8001d64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e054      	b.n	8001e1a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d106      	bne.n	8001d90 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f009 f922 	bl	800afd4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2203      	movs	r2, #3
 8001d94:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d102      	bne.n	8001daa <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f002 fd16 	bl	80047e0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	603b      	str	r3, [r7, #0]
 8001dba:	687e      	ldr	r6, [r7, #4]
 8001dbc:	466d      	mov	r5, sp
 8001dbe:	f106 0410 	add.w	r4, r6, #16
 8001dc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dce:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dd2:	1d33      	adds	r3, r6, #4
 8001dd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dd6:	6838      	ldr	r0, [r7, #0]
 8001dd8:	f002 fc90 	bl	80046fc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2101      	movs	r1, #1
 8001de2:	4618      	mov	r0, r3
 8001de4:	f002 fd0d 	bl	8004802 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	603b      	str	r3, [r7, #0]
 8001dee:	687e      	ldr	r6, [r7, #4]
 8001df0:	466d      	mov	r5, sp
 8001df2:	f106 0410 	add.w	r4, r6, #16
 8001df6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001df8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dfe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e02:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e06:	1d33      	adds	r3, r6, #4
 8001e08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e0a:	6838      	ldr	r0, [r7, #0]
 8001e0c:	f002 fe74 	bl	8004af8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e22 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001e22:	b590      	push	{r4, r7, lr}
 8001e24:	b089      	sub	sp, #36	; 0x24
 8001e26:	af04      	add	r7, sp, #16
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	4608      	mov	r0, r1
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	461a      	mov	r2, r3
 8001e30:	4603      	mov	r3, r0
 8001e32:	70fb      	strb	r3, [r7, #3]
 8001e34:	460b      	mov	r3, r1
 8001e36:	70bb      	strb	r3, [r7, #2]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d101      	bne.n	8001e4a <HAL_HCD_HC_Init+0x28>
 8001e46:	2302      	movs	r3, #2
 8001e48:	e076      	b.n	8001f38 <HAL_HCD_HC_Init+0x116>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001e52:	78fb      	ldrb	r3, [r7, #3]
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	212c      	movs	r1, #44	; 0x2c
 8001e58:	fb01 f303 	mul.w	r3, r1, r3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	333d      	adds	r3, #61	; 0x3d
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001e64:	78fb      	ldrb	r3, [r7, #3]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	212c      	movs	r1, #44	; 0x2c
 8001e6a:	fb01 f303 	mul.w	r3, r1, r3
 8001e6e:	4413      	add	r3, r2
 8001e70:	3338      	adds	r3, #56	; 0x38
 8001e72:	787a      	ldrb	r2, [r7, #1]
 8001e74:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001e76:	78fb      	ldrb	r3, [r7, #3]
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	212c      	movs	r1, #44	; 0x2c
 8001e7c:	fb01 f303 	mul.w	r3, r1, r3
 8001e80:	4413      	add	r3, r2
 8001e82:	3340      	adds	r3, #64	; 0x40
 8001e84:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001e86:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e88:	78fb      	ldrb	r3, [r7, #3]
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	212c      	movs	r1, #44	; 0x2c
 8001e8e:	fb01 f303 	mul.w	r3, r1, r3
 8001e92:	4413      	add	r3, r2
 8001e94:	3339      	adds	r3, #57	; 0x39
 8001e96:	78fa      	ldrb	r2, [r7, #3]
 8001e98:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001e9a:	78fb      	ldrb	r3, [r7, #3]
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	212c      	movs	r1, #44	; 0x2c
 8001ea0:	fb01 f303 	mul.w	r3, r1, r3
 8001ea4:	4413      	add	r3, r2
 8001ea6:	333f      	adds	r3, #63	; 0x3f
 8001ea8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001eac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	78ba      	ldrb	r2, [r7, #2]
 8001eb2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001eb6:	b2d0      	uxtb	r0, r2
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	212c      	movs	r1, #44	; 0x2c
 8001ebc:	fb01 f303 	mul.w	r3, r1, r3
 8001ec0:	4413      	add	r3, r2
 8001ec2:	333a      	adds	r3, #58	; 0x3a
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001ec8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	da09      	bge.n	8001ee4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	212c      	movs	r1, #44	; 0x2c
 8001ed6:	fb01 f303 	mul.w	r3, r1, r3
 8001eda:	4413      	add	r3, r2
 8001edc:	333b      	adds	r3, #59	; 0x3b
 8001ede:	2201      	movs	r2, #1
 8001ee0:	701a      	strb	r2, [r3, #0]
 8001ee2:	e008      	b.n	8001ef6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001ee4:	78fb      	ldrb	r3, [r7, #3]
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	212c      	movs	r1, #44	; 0x2c
 8001eea:	fb01 f303 	mul.w	r3, r1, r3
 8001eee:	4413      	add	r3, r2
 8001ef0:	333b      	adds	r3, #59	; 0x3b
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001ef6:	78fb      	ldrb	r3, [r7, #3]
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	212c      	movs	r1, #44	; 0x2c
 8001efc:	fb01 f303 	mul.w	r3, r1, r3
 8001f00:	4413      	add	r3, r2
 8001f02:	333c      	adds	r3, #60	; 0x3c
 8001f04:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001f08:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6818      	ldr	r0, [r3, #0]
 8001f0e:	787c      	ldrb	r4, [r7, #1]
 8001f10:	78ba      	ldrb	r2, [r7, #2]
 8001f12:	78f9      	ldrb	r1, [r7, #3]
 8001f14:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f16:	9302      	str	r3, [sp, #8]
 8001f18:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f1c:	9301      	str	r3, [sp, #4]
 8001f1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	4623      	mov	r3, r4
 8001f26:	f002 ff61 	bl	8004dec <USB_HC_Init>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd90      	pop	{r4, r7, pc}

08001f40 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d101      	bne.n	8001f5e <HAL_HCD_HC_Halt+0x1e>
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	e00f      	b.n	8001f7e <HAL_HCD_HC_Halt+0x3e>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	78fa      	ldrb	r2, [r7, #3]
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f003 f99d 	bl	80052ae <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	4608      	mov	r0, r1
 8001f92:	4611      	mov	r1, r2
 8001f94:	461a      	mov	r2, r3
 8001f96:	4603      	mov	r3, r0
 8001f98:	70fb      	strb	r3, [r7, #3]
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	70bb      	strb	r3, [r7, #2]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001fa2:	78fb      	ldrb	r3, [r7, #3]
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	212c      	movs	r1, #44	; 0x2c
 8001fa8:	fb01 f303 	mul.w	r3, r1, r3
 8001fac:	4413      	add	r3, r2
 8001fae:	333b      	adds	r3, #59	; 0x3b
 8001fb0:	78ba      	ldrb	r2, [r7, #2]
 8001fb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	212c      	movs	r1, #44	; 0x2c
 8001fba:	fb01 f303 	mul.w	r3, r1, r3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	333f      	adds	r3, #63	; 0x3f
 8001fc2:	787a      	ldrb	r2, [r7, #1]
 8001fc4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001fc6:	7c3b      	ldrb	r3, [r7, #16]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d112      	bne.n	8001ff2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001fcc:	78fb      	ldrb	r3, [r7, #3]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	212c      	movs	r1, #44	; 0x2c
 8001fd2:	fb01 f303 	mul.w	r3, r1, r3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	3342      	adds	r3, #66	; 0x42
 8001fda:	2203      	movs	r2, #3
 8001fdc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001fde:	78fb      	ldrb	r3, [r7, #3]
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	212c      	movs	r1, #44	; 0x2c
 8001fe4:	fb01 f303 	mul.w	r3, r1, r3
 8001fe8:	4413      	add	r3, r2
 8001fea:	333d      	adds	r3, #61	; 0x3d
 8001fec:	7f3a      	ldrb	r2, [r7, #28]
 8001fee:	701a      	strb	r2, [r3, #0]
 8001ff0:	e008      	b.n	8002004 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ff2:	78fb      	ldrb	r3, [r7, #3]
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	212c      	movs	r1, #44	; 0x2c
 8001ff8:	fb01 f303 	mul.w	r3, r1, r3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	3342      	adds	r3, #66	; 0x42
 8002000:	2202      	movs	r2, #2
 8002002:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002004:	787b      	ldrb	r3, [r7, #1]
 8002006:	2b03      	cmp	r3, #3
 8002008:	f200 80c6 	bhi.w	8002198 <HAL_HCD_HC_SubmitRequest+0x210>
 800200c:	a201      	add	r2, pc, #4	; (adr r2, 8002014 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800200e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002012:	bf00      	nop
 8002014:	08002025 	.word	0x08002025
 8002018:	08002185 	.word	0x08002185
 800201c:	08002089 	.word	0x08002089
 8002020:	08002107 	.word	0x08002107
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002024:	7c3b      	ldrb	r3, [r7, #16]
 8002026:	2b01      	cmp	r3, #1
 8002028:	f040 80b8 	bne.w	800219c <HAL_HCD_HC_SubmitRequest+0x214>
 800202c:	78bb      	ldrb	r3, [r7, #2]
 800202e:	2b00      	cmp	r3, #0
 8002030:	f040 80b4 	bne.w	800219c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002034:	8b3b      	ldrh	r3, [r7, #24]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d108      	bne.n	800204c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800203a:	78fb      	ldrb	r3, [r7, #3]
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	212c      	movs	r1, #44	; 0x2c
 8002040:	fb01 f303 	mul.w	r3, r1, r3
 8002044:	4413      	add	r3, r2
 8002046:	3355      	adds	r3, #85	; 0x55
 8002048:	2201      	movs	r2, #1
 800204a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800204c:	78fb      	ldrb	r3, [r7, #3]
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	212c      	movs	r1, #44	; 0x2c
 8002052:	fb01 f303 	mul.w	r3, r1, r3
 8002056:	4413      	add	r3, r2
 8002058:	3355      	adds	r3, #85	; 0x55
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d109      	bne.n	8002074 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	212c      	movs	r1, #44	; 0x2c
 8002066:	fb01 f303 	mul.w	r3, r1, r3
 800206a:	4413      	add	r3, r2
 800206c:	3342      	adds	r3, #66	; 0x42
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002072:	e093      	b.n	800219c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	212c      	movs	r1, #44	; 0x2c
 800207a:	fb01 f303 	mul.w	r3, r1, r3
 800207e:	4413      	add	r3, r2
 8002080:	3342      	adds	r3, #66	; 0x42
 8002082:	2202      	movs	r2, #2
 8002084:	701a      	strb	r2, [r3, #0]
      break;
 8002086:	e089      	b.n	800219c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002088:	78bb      	ldrb	r3, [r7, #2]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d11d      	bne.n	80020ca <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800208e:	78fb      	ldrb	r3, [r7, #3]
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	212c      	movs	r1, #44	; 0x2c
 8002094:	fb01 f303 	mul.w	r3, r1, r3
 8002098:	4413      	add	r3, r2
 800209a:	3355      	adds	r3, #85	; 0x55
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d109      	bne.n	80020b6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020a2:	78fb      	ldrb	r3, [r7, #3]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	212c      	movs	r1, #44	; 0x2c
 80020a8:	fb01 f303 	mul.w	r3, r1, r3
 80020ac:	4413      	add	r3, r2
 80020ae:	3342      	adds	r3, #66	; 0x42
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80020b4:	e073      	b.n	800219e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020b6:	78fb      	ldrb	r3, [r7, #3]
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	212c      	movs	r1, #44	; 0x2c
 80020bc:	fb01 f303 	mul.w	r3, r1, r3
 80020c0:	4413      	add	r3, r2
 80020c2:	3342      	adds	r3, #66	; 0x42
 80020c4:	2202      	movs	r2, #2
 80020c6:	701a      	strb	r2, [r3, #0]
      break;
 80020c8:	e069      	b.n	800219e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80020ca:	78fb      	ldrb	r3, [r7, #3]
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	212c      	movs	r1, #44	; 0x2c
 80020d0:	fb01 f303 	mul.w	r3, r1, r3
 80020d4:	4413      	add	r3, r2
 80020d6:	3354      	adds	r3, #84	; 0x54
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d109      	bne.n	80020f2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020de:	78fb      	ldrb	r3, [r7, #3]
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	212c      	movs	r1, #44	; 0x2c
 80020e4:	fb01 f303 	mul.w	r3, r1, r3
 80020e8:	4413      	add	r3, r2
 80020ea:	3342      	adds	r3, #66	; 0x42
 80020ec:	2200      	movs	r2, #0
 80020ee:	701a      	strb	r2, [r3, #0]
      break;
 80020f0:	e055      	b.n	800219e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	212c      	movs	r1, #44	; 0x2c
 80020f8:	fb01 f303 	mul.w	r3, r1, r3
 80020fc:	4413      	add	r3, r2
 80020fe:	3342      	adds	r3, #66	; 0x42
 8002100:	2202      	movs	r2, #2
 8002102:	701a      	strb	r2, [r3, #0]
      break;
 8002104:	e04b      	b.n	800219e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002106:	78bb      	ldrb	r3, [r7, #2]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d11d      	bne.n	8002148 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800210c:	78fb      	ldrb	r3, [r7, #3]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	212c      	movs	r1, #44	; 0x2c
 8002112:	fb01 f303 	mul.w	r3, r1, r3
 8002116:	4413      	add	r3, r2
 8002118:	3355      	adds	r3, #85	; 0x55
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d109      	bne.n	8002134 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	212c      	movs	r1, #44	; 0x2c
 8002126:	fb01 f303 	mul.w	r3, r1, r3
 800212a:	4413      	add	r3, r2
 800212c:	3342      	adds	r3, #66	; 0x42
 800212e:	2200      	movs	r2, #0
 8002130:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002132:	e034      	b.n	800219e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	212c      	movs	r1, #44	; 0x2c
 800213a:	fb01 f303 	mul.w	r3, r1, r3
 800213e:	4413      	add	r3, r2
 8002140:	3342      	adds	r3, #66	; 0x42
 8002142:	2202      	movs	r2, #2
 8002144:	701a      	strb	r2, [r3, #0]
      break;
 8002146:	e02a      	b.n	800219e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002148:	78fb      	ldrb	r3, [r7, #3]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	212c      	movs	r1, #44	; 0x2c
 800214e:	fb01 f303 	mul.w	r3, r1, r3
 8002152:	4413      	add	r3, r2
 8002154:	3354      	adds	r3, #84	; 0x54
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d109      	bne.n	8002170 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800215c:	78fb      	ldrb	r3, [r7, #3]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	212c      	movs	r1, #44	; 0x2c
 8002162:	fb01 f303 	mul.w	r3, r1, r3
 8002166:	4413      	add	r3, r2
 8002168:	3342      	adds	r3, #66	; 0x42
 800216a:	2200      	movs	r2, #0
 800216c:	701a      	strb	r2, [r3, #0]
      break;
 800216e:	e016      	b.n	800219e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002170:	78fb      	ldrb	r3, [r7, #3]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	212c      	movs	r1, #44	; 0x2c
 8002176:	fb01 f303 	mul.w	r3, r1, r3
 800217a:	4413      	add	r3, r2
 800217c:	3342      	adds	r3, #66	; 0x42
 800217e:	2202      	movs	r2, #2
 8002180:	701a      	strb	r2, [r3, #0]
      break;
 8002182:	e00c      	b.n	800219e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	212c      	movs	r1, #44	; 0x2c
 800218a:	fb01 f303 	mul.w	r3, r1, r3
 800218e:	4413      	add	r3, r2
 8002190:	3342      	adds	r3, #66	; 0x42
 8002192:	2200      	movs	r2, #0
 8002194:	701a      	strb	r2, [r3, #0]
      break;
 8002196:	e002      	b.n	800219e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002198:	bf00      	nop
 800219a:	e000      	b.n	800219e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800219c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	212c      	movs	r1, #44	; 0x2c
 80021a4:	fb01 f303 	mul.w	r3, r1, r3
 80021a8:	4413      	add	r3, r2
 80021aa:	3344      	adds	r3, #68	; 0x44
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80021b0:	78fb      	ldrb	r3, [r7, #3]
 80021b2:	8b3a      	ldrh	r2, [r7, #24]
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	202c      	movs	r0, #44	; 0x2c
 80021b8:	fb00 f303 	mul.w	r3, r0, r3
 80021bc:	440b      	add	r3, r1
 80021be:	334c      	adds	r3, #76	; 0x4c
 80021c0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80021c2:	78fb      	ldrb	r3, [r7, #3]
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	212c      	movs	r1, #44	; 0x2c
 80021c8:	fb01 f303 	mul.w	r3, r1, r3
 80021cc:	4413      	add	r3, r2
 80021ce:	3360      	adds	r3, #96	; 0x60
 80021d0:	2200      	movs	r2, #0
 80021d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80021d4:	78fb      	ldrb	r3, [r7, #3]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	212c      	movs	r1, #44	; 0x2c
 80021da:	fb01 f303 	mul.w	r3, r1, r3
 80021de:	4413      	add	r3, r2
 80021e0:	3350      	adds	r3, #80	; 0x50
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80021e6:	78fb      	ldrb	r3, [r7, #3]
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	212c      	movs	r1, #44	; 0x2c
 80021ec:	fb01 f303 	mul.w	r3, r1, r3
 80021f0:	4413      	add	r3, r2
 80021f2:	3339      	adds	r3, #57	; 0x39
 80021f4:	78fa      	ldrb	r2, [r7, #3]
 80021f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	212c      	movs	r1, #44	; 0x2c
 80021fe:	fb01 f303 	mul.w	r3, r1, r3
 8002202:	4413      	add	r3, r2
 8002204:	3361      	adds	r3, #97	; 0x61
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6818      	ldr	r0, [r3, #0]
 800220e:	78fb      	ldrb	r3, [r7, #3]
 8002210:	222c      	movs	r2, #44	; 0x2c
 8002212:	fb02 f303 	mul.w	r3, r2, r3
 8002216:	3338      	adds	r3, #56	; 0x38
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	18d1      	adds	r1, r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	b2db      	uxtb	r3, r3
 8002222:	461a      	mov	r2, r3
 8002224:	f002 fef0 	bl	8005008 <USB_HC_StartXfer>
 8002228:	4603      	mov	r3, r0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop

08002234 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f002 fc13 	bl	8004a76 <USB_GetMode>
 8002250:	4603      	mov	r3, r0
 8002252:	2b01      	cmp	r3, #1
 8002254:	f040 80f6 	bne.w	8002444 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f002 fbf7 	bl	8004a50 <USB_ReadInterrupts>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 80ec 	beq.w	8002442 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f002 fbee 	bl	8004a50 <USB_ReadInterrupts>
 8002274:	4603      	mov	r3, r0
 8002276:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800227e:	d104      	bne.n	800228a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002288:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f002 fbde 	bl	8004a50 <USB_ReadInterrupts>
 8002294:	4603      	mov	r3, r0
 8002296:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800229a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800229e:	d104      	bne.n	80022aa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80022a8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f002 fbce 	bl	8004a50 <USB_ReadInterrupts>
 80022b4:	4603      	mov	r3, r0
 80022b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022be:	d104      	bne.n	80022ca <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f002 fbbe 	bl	8004a50 <USB_ReadInterrupts>
 80022d4:	4603      	mov	r3, r0
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d103      	bne.n	80022e6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2202      	movs	r2, #2
 80022e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f002 fbb0 	bl	8004a50 <USB_ReadInterrupts>
 80022f0:	4603      	mov	r3, r0
 80022f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022fa:	d11c      	bne.n	8002336 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002304:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10f      	bne.n	8002336 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002316:	2110      	movs	r1, #16
 8002318:	6938      	ldr	r0, [r7, #16]
 800231a:	f002 fabf 	bl	800489c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800231e:	6938      	ldr	r0, [r7, #16]
 8002320:	f002 fae0 	bl	80048e4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2101      	movs	r1, #1
 800232a:	4618      	mov	r0, r3
 800232c:	f002 fc98 	bl	8004c60 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f008 fedd 	bl	800b0f0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f002 fb88 	bl	8004a50 <USB_ReadInterrupts>
 8002340:	4603      	mov	r3, r0
 8002342:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002346:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800234a:	d102      	bne.n	8002352 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f001 fa03 	bl	8003758 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f002 fb7a 	bl	8004a50 <USB_ReadInterrupts>
 800235c:	4603      	mov	r3, r0
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b08      	cmp	r3, #8
 8002364:	d106      	bne.n	8002374 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f008 fea6 	bl	800b0b8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2208      	movs	r2, #8
 8002372:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f002 fb69 	bl	8004a50 <USB_ReadInterrupts>
 800237e:	4603      	mov	r3, r0
 8002380:	f003 0310 	and.w	r3, r3, #16
 8002384:	2b10      	cmp	r3, #16
 8002386:	d101      	bne.n	800238c <HAL_HCD_IRQHandler+0x158>
 8002388:	2301      	movs	r3, #1
 800238a:	e000      	b.n	800238e <HAL_HCD_IRQHandler+0x15a>
 800238c:	2300      	movs	r3, #0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d012      	beq.n	80023b8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	699a      	ldr	r2, [r3, #24]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 0210 	bic.w	r2, r2, #16
 80023a0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f001 f906 	bl	80035b4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	699a      	ldr	r2, [r3, #24]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0210 	orr.w	r2, r2, #16
 80023b6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f002 fb47 	bl	8004a50 <USB_ReadInterrupts>
 80023c2:	4603      	mov	r3, r0
 80023c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023cc:	d13a      	bne.n	8002444 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f002 ff5a 	bl	800528c <USB_HC_ReadInterrupt>
 80023d8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]
 80023de:	e025      	b.n	800242c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	fa22 f303 	lsr.w	r3, r2, r3
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d018      	beq.n	8002426 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	015a      	lsls	r2, r3, #5
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4413      	add	r3, r2
 80023fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800240a:	d106      	bne.n	800241a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	b2db      	uxtb	r3, r3
 8002410:	4619      	mov	r1, r3
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f8ab 	bl	800256e <HCD_HC_IN_IRQHandler>
 8002418:	e005      	b.n	8002426 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	4619      	mov	r1, r3
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 fcc6 	bl	8002db2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	3301      	adds	r3, #1
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	429a      	cmp	r2, r3
 8002434:	d3d4      	bcc.n	80023e0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800243e:	615a      	str	r2, [r3, #20]
 8002440:	e000      	b.n	8002444 <HAL_HCD_IRQHandler+0x210>
      return;
 8002442:	bf00      	nop
    }
  }
}
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002458:	2b01      	cmp	r3, #1
 800245a:	d101      	bne.n	8002460 <HAL_HCD_Start+0x16>
 800245c:	2302      	movs	r3, #2
 800245e:	e013      	b.n	8002488 <HAL_HCD_Start+0x3e>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2101      	movs	r1, #1
 800246e:	4618      	mov	r0, r3
 8002470:	f002 fc5a 	bl	8004d28 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4618      	mov	r0, r3
 800247a:	f002 f9a0 	bl	80047be <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d101      	bne.n	80024a6 <HAL_HCD_Stop+0x16>
 80024a2:	2302      	movs	r3, #2
 80024a4:	e00d      	b.n	80024c2 <HAL_HCD_Stop+0x32>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f003 f854 	bl	8005560 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f002 fbfc 	bl	8004cd4 <USB_ResetPort>
 80024dc:	4603      	mov	r3, r0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	460b      	mov	r3, r1
 80024f0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80024f2:	78fb      	ldrb	r3, [r7, #3]
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	212c      	movs	r1, #44	; 0x2c
 80024f8:	fb01 f303 	mul.w	r3, r1, r3
 80024fc:	4413      	add	r3, r2
 80024fe:	3360      	adds	r3, #96	; 0x60
 8002500:	781b      	ldrb	r3, [r3, #0]
}
 8002502:	4618      	mov	r0, r3
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
 8002516:	460b      	mov	r3, r1
 8002518:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800251a:	78fb      	ldrb	r3, [r7, #3]
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	212c      	movs	r1, #44	; 0x2c
 8002520:	fb01 f303 	mul.w	r3, r1, r3
 8002524:	4413      	add	r3, r2
 8002526:	3350      	adds	r3, #80	; 0x50
 8002528:	681b      	ldr	r3, [r3, #0]
}
 800252a:	4618      	mov	r0, r3
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f002 fc40 	bl	8004dc8 <USB_GetCurrentFrame>
 8002548:	4603      	mov	r3, r0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f002 fc1b 	bl	8004d9a <USB_GetHostSpeed>
 8002564:	4603      	mov	r3, r0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b086      	sub	sp, #24
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
 8002576:	460b      	mov	r3, r1
 8002578:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002584:	78fb      	ldrb	r3, [r7, #3]
 8002586:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4413      	add	r3, r2
 8002590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	2b04      	cmp	r3, #4
 800259c:	d119      	bne.n	80025d2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	015a      	lsls	r2, r3, #5
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4413      	add	r3, r2
 80025a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025aa:	461a      	mov	r2, r3
 80025ac:	2304      	movs	r3, #4
 80025ae:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	015a      	lsls	r2, r3, #5
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	0151      	lsls	r1, r2, #5
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	440a      	add	r2, r1
 80025c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025ca:	f043 0302 	orr.w	r3, r3, #2
 80025ce:	60d3      	str	r3, [r2, #12]
 80025d0:	e101      	b.n	80027d6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	015a      	lsls	r2, r3, #5
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	4413      	add	r3, r2
 80025da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025e8:	d12b      	bne.n	8002642 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	015a      	lsls	r2, r3, #5
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	4413      	add	r3, r2
 80025f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f6:	461a      	mov	r2, r3
 80025f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	212c      	movs	r1, #44	; 0x2c
 8002604:	fb01 f303 	mul.w	r3, r1, r3
 8002608:	4413      	add	r3, r2
 800260a:	3361      	adds	r3, #97	; 0x61
 800260c:	2207      	movs	r2, #7
 800260e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	015a      	lsls	r2, r3, #5
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	4413      	add	r3, r2
 8002618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	0151      	lsls	r1, r2, #5
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	440a      	add	r2, r1
 8002626:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800262a:	f043 0302 	orr.w	r3, r3, #2
 800262e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	4611      	mov	r1, r2
 800263a:	4618      	mov	r0, r3
 800263c:	f002 fe37 	bl	80052ae <USB_HC_Halt>
 8002640:	e0c9      	b.n	80027d6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	015a      	lsls	r2, r3, #5
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4413      	add	r3, r2
 800264a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f003 0320 	and.w	r3, r3, #32
 8002654:	2b20      	cmp	r3, #32
 8002656:	d109      	bne.n	800266c <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	015a      	lsls	r2, r3, #5
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	4413      	add	r3, r2
 8002660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002664:	461a      	mov	r2, r3
 8002666:	2320      	movs	r3, #32
 8002668:	6093      	str	r3, [r2, #8]
 800266a:	e0b4      	b.n	80027d6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	015a      	lsls	r2, r3, #5
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	4413      	add	r3, r2
 8002674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b08      	cmp	r3, #8
 8002680:	d133      	bne.n	80026ea <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	015a      	lsls	r2, r3, #5
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4413      	add	r3, r2
 800268a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	0151      	lsls	r1, r2, #5
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	440a      	add	r2, r1
 8002698:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800269c:	f043 0302 	orr.w	r3, r3, #2
 80026a0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	212c      	movs	r1, #44	; 0x2c
 80026a8:	fb01 f303 	mul.w	r3, r1, r3
 80026ac:	4413      	add	r3, r2
 80026ae:	3361      	adds	r3, #97	; 0x61
 80026b0:	2205      	movs	r2, #5
 80026b2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c0:	461a      	mov	r2, r3
 80026c2:	2310      	movs	r3, #16
 80026c4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	015a      	lsls	r2, r3, #5
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4413      	add	r3, r2
 80026ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d2:	461a      	mov	r2, r3
 80026d4:	2308      	movs	r3, #8
 80026d6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	4611      	mov	r1, r2
 80026e2:	4618      	mov	r0, r3
 80026e4:	f002 fde3 	bl	80052ae <USB_HC_Halt>
 80026e8:	e075      	b.n	80027d6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	015a      	lsls	r2, r3, #5
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002700:	d134      	bne.n	800276c <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	015a      	lsls	r2, r3, #5
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4413      	add	r3, r2
 800270a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	0151      	lsls	r1, r2, #5
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	440a      	add	r2, r1
 8002718:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800271c:	f043 0302 	orr.w	r3, r3, #2
 8002720:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	212c      	movs	r1, #44	; 0x2c
 8002728:	fb01 f303 	mul.w	r3, r1, r3
 800272c:	4413      	add	r3, r2
 800272e:	3361      	adds	r3, #97	; 0x61
 8002730:	2208      	movs	r2, #8
 8002732:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	015a      	lsls	r2, r3, #5
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4413      	add	r3, r2
 800273c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002740:	461a      	mov	r2, r3
 8002742:	2310      	movs	r3, #16
 8002744:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	015a      	lsls	r2, r3, #5
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4413      	add	r3, r2
 800274e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002752:	461a      	mov	r2, r3
 8002754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002758:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	4611      	mov	r1, r2
 8002764:	4618      	mov	r0, r3
 8002766:	f002 fda2 	bl	80052ae <USB_HC_Halt>
 800276a:	e034      	b.n	80027d6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4413      	add	r3, r2
 8002774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277e:	2b80      	cmp	r3, #128	; 0x80
 8002780:	d129      	bne.n	80027d6 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	015a      	lsls	r2, r3, #5
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	4413      	add	r3, r2
 800278a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	0151      	lsls	r1, r2, #5
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	440a      	add	r2, r1
 8002798:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800279c:	f043 0302 	orr.w	r3, r3, #2
 80027a0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	212c      	movs	r1, #44	; 0x2c
 80027a8:	fb01 f303 	mul.w	r3, r1, r3
 80027ac:	4413      	add	r3, r2
 80027ae:	3361      	adds	r3, #97	; 0x61
 80027b0:	2206      	movs	r2, #6
 80027b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	4611      	mov	r1, r2
 80027be:	4618      	mov	r0, r3
 80027c0:	f002 fd75 	bl	80052ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	015a      	lsls	r2, r3, #5
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4413      	add	r3, r2
 80027cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d0:	461a      	mov	r2, r3
 80027d2:	2380      	movs	r3, #128	; 0x80
 80027d4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	015a      	lsls	r2, r3, #5
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	4413      	add	r3, r2
 80027de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027ec:	d122      	bne.n	8002834 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	015a      	lsls	r2, r3, #5
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	0151      	lsls	r1, r2, #5
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	440a      	add	r2, r1
 8002804:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002808:	f043 0302 	orr.w	r3, r3, #2
 800280c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	4611      	mov	r1, r2
 8002818:	4618      	mov	r0, r3
 800281a:	f002 fd48 	bl	80052ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	015a      	lsls	r2, r3, #5
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	4413      	add	r3, r2
 8002826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800282a:	461a      	mov	r2, r3
 800282c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002830:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002832:	e2ba      	b.n	8002daa <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	015a      	lsls	r2, r3, #5
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	4413      	add	r3, r2
 800283c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b01      	cmp	r3, #1
 8002848:	f040 811b 	bne.w	8002a82 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d019      	beq.n	8002888 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	212c      	movs	r1, #44	; 0x2c
 800285a:	fb01 f303 	mul.w	r3, r1, r3
 800285e:	4413      	add	r3, r2
 8002860:	3348      	adds	r3, #72	; 0x48
 8002862:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	0159      	lsls	r1, r3, #5
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	440b      	add	r3, r1
 800286c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002876:	1ad2      	subs	r2, r2, r3
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	202c      	movs	r0, #44	; 0x2c
 800287e:	fb00 f303 	mul.w	r3, r0, r3
 8002882:	440b      	add	r3, r1
 8002884:	3350      	adds	r3, #80	; 0x50
 8002886:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	212c      	movs	r1, #44	; 0x2c
 800288e:	fb01 f303 	mul.w	r3, r1, r3
 8002892:	4413      	add	r3, r2
 8002894:	3361      	adds	r3, #97	; 0x61
 8002896:	2201      	movs	r2, #1
 8002898:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	212c      	movs	r1, #44	; 0x2c
 80028a0:	fb01 f303 	mul.w	r3, r1, r3
 80028a4:	4413      	add	r3, r2
 80028a6:	335c      	adds	r3, #92	; 0x5c
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	015a      	lsls	r2, r3, #5
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	4413      	add	r3, r2
 80028b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b8:	461a      	mov	r2, r3
 80028ba:	2301      	movs	r3, #1
 80028bc:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	212c      	movs	r1, #44	; 0x2c
 80028c4:	fb01 f303 	mul.w	r3, r1, r3
 80028c8:	4413      	add	r3, r2
 80028ca:	333f      	adds	r3, #63	; 0x3f
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d009      	beq.n	80028e6 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	212c      	movs	r1, #44	; 0x2c
 80028d8:	fb01 f303 	mul.w	r3, r1, r3
 80028dc:	4413      	add	r3, r2
 80028de:	333f      	adds	r3, #63	; 0x3f
 80028e0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d121      	bne.n	800292a <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	015a      	lsls	r2, r3, #5
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	4413      	add	r3, r2
 80028ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	0151      	lsls	r1, r2, #5
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	440a      	add	r2, r1
 80028fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002900:	f043 0302 	orr.w	r3, r3, #2
 8002904:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	4611      	mov	r1, r2
 8002910:	4618      	mov	r0, r3
 8002912:	f002 fccc 	bl	80052ae <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	015a      	lsls	r2, r3, #5
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4413      	add	r3, r2
 800291e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002922:	461a      	mov	r2, r3
 8002924:	2310      	movs	r3, #16
 8002926:	6093      	str	r3, [r2, #8]
 8002928:	e066      	b.n	80029f8 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	212c      	movs	r1, #44	; 0x2c
 8002930:	fb01 f303 	mul.w	r3, r1, r3
 8002934:	4413      	add	r3, r2
 8002936:	333f      	adds	r3, #63	; 0x3f
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b03      	cmp	r3, #3
 800293c:	d127      	bne.n	800298e <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	015a      	lsls	r2, r3, #5
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	4413      	add	r3, r2
 8002946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	0151      	lsls	r1, r2, #5
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	440a      	add	r2, r1
 8002954:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002958:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800295c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	212c      	movs	r1, #44	; 0x2c
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	4413      	add	r3, r2
 800296a:	3360      	adds	r3, #96	; 0x60
 800296c:	2201      	movs	r2, #1
 800296e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	b2d9      	uxtb	r1, r3
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	202c      	movs	r0, #44	; 0x2c
 800297a:	fb00 f303 	mul.w	r3, r0, r3
 800297e:	4413      	add	r3, r2
 8002980:	3360      	adds	r3, #96	; 0x60
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	461a      	mov	r2, r3
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f008 fbc0 	bl	800b10c <HAL_HCD_HC_NotifyURBChange_Callback>
 800298c:	e034      	b.n	80029f8 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	212c      	movs	r1, #44	; 0x2c
 8002994:	fb01 f303 	mul.w	r3, r1, r3
 8002998:	4413      	add	r3, r2
 800299a:	333f      	adds	r3, #63	; 0x3f
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d12a      	bne.n	80029f8 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	212c      	movs	r1, #44	; 0x2c
 80029a8:	fb01 f303 	mul.w	r3, r1, r3
 80029ac:	4413      	add	r3, r2
 80029ae:	3360      	adds	r3, #96	; 0x60
 80029b0:	2201      	movs	r2, #1
 80029b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	212c      	movs	r1, #44	; 0x2c
 80029ba:	fb01 f303 	mul.w	r3, r1, r3
 80029be:	4413      	add	r3, r2
 80029c0:	3354      	adds	r3, #84	; 0x54
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	f083 0301 	eor.w	r3, r3, #1
 80029c8:	b2d8      	uxtb	r0, r3
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	212c      	movs	r1, #44	; 0x2c
 80029d0:	fb01 f303 	mul.w	r3, r1, r3
 80029d4:	4413      	add	r3, r2
 80029d6:	3354      	adds	r3, #84	; 0x54
 80029d8:	4602      	mov	r2, r0
 80029da:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	b2d9      	uxtb	r1, r3
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	202c      	movs	r0, #44	; 0x2c
 80029e6:	fb00 f303 	mul.w	r3, r0, r3
 80029ea:	4413      	add	r3, r2
 80029ec:	3360      	adds	r3, #96	; 0x60
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	461a      	mov	r2, r3
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f008 fb8a 	bl	800b10c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d12b      	bne.n	8002a58 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	212c      	movs	r1, #44	; 0x2c
 8002a06:	fb01 f303 	mul.w	r3, r1, r3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3348      	adds	r3, #72	; 0x48
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	202c      	movs	r0, #44	; 0x2c
 8002a16:	fb00 f202 	mul.w	r2, r0, r2
 8002a1a:	440a      	add	r2, r1
 8002a1c:	3240      	adds	r2, #64	; 0x40
 8002a1e:	8812      	ldrh	r2, [r2, #0]
 8002a20:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 81be 	beq.w	8002daa <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	212c      	movs	r1, #44	; 0x2c
 8002a34:	fb01 f303 	mul.w	r3, r1, r3
 8002a38:	4413      	add	r3, r2
 8002a3a:	3354      	adds	r3, #84	; 0x54
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	f083 0301 	eor.w	r3, r3, #1
 8002a42:	b2d8      	uxtb	r0, r3
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	212c      	movs	r1, #44	; 0x2c
 8002a4a:	fb01 f303 	mul.w	r3, r1, r3
 8002a4e:	4413      	add	r3, r2
 8002a50:	3354      	adds	r3, #84	; 0x54
 8002a52:	4602      	mov	r2, r0
 8002a54:	701a      	strb	r2, [r3, #0]
}
 8002a56:	e1a8      	b.n	8002daa <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	212c      	movs	r1, #44	; 0x2c
 8002a5e:	fb01 f303 	mul.w	r3, r1, r3
 8002a62:	4413      	add	r3, r2
 8002a64:	3354      	adds	r3, #84	; 0x54
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	f083 0301 	eor.w	r3, r3, #1
 8002a6c:	b2d8      	uxtb	r0, r3
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	212c      	movs	r1, #44	; 0x2c
 8002a74:	fb01 f303 	mul.w	r3, r1, r3
 8002a78:	4413      	add	r3, r2
 8002a7a:	3354      	adds	r3, #84	; 0x54
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	701a      	strb	r2, [r3, #0]
}
 8002a80:	e193      	b.n	8002daa <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	015a      	lsls	r2, r3, #5
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4413      	add	r3, r2
 8002a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	f040 8106 	bne.w	8002ca6 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	015a      	lsls	r2, r3, #5
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	0151      	lsls	r1, r2, #5
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	440a      	add	r2, r1
 8002ab0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ab4:	f023 0302 	bic.w	r3, r3, #2
 8002ab8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	212c      	movs	r1, #44	; 0x2c
 8002ac0:	fb01 f303 	mul.w	r3, r1, r3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	3361      	adds	r3, #97	; 0x61
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d109      	bne.n	8002ae2 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	212c      	movs	r1, #44	; 0x2c
 8002ad4:	fb01 f303 	mul.w	r3, r1, r3
 8002ad8:	4413      	add	r3, r2
 8002ada:	3360      	adds	r3, #96	; 0x60
 8002adc:	2201      	movs	r2, #1
 8002ade:	701a      	strb	r2, [r3, #0]
 8002ae0:	e0c9      	b.n	8002c76 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	212c      	movs	r1, #44	; 0x2c
 8002ae8:	fb01 f303 	mul.w	r3, r1, r3
 8002aec:	4413      	add	r3, r2
 8002aee:	3361      	adds	r3, #97	; 0x61
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b05      	cmp	r3, #5
 8002af4:	d109      	bne.n	8002b0a <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	212c      	movs	r1, #44	; 0x2c
 8002afc:	fb01 f303 	mul.w	r3, r1, r3
 8002b00:	4413      	add	r3, r2
 8002b02:	3360      	adds	r3, #96	; 0x60
 8002b04:	2205      	movs	r2, #5
 8002b06:	701a      	strb	r2, [r3, #0]
 8002b08:	e0b5      	b.n	8002c76 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	212c      	movs	r1, #44	; 0x2c
 8002b10:	fb01 f303 	mul.w	r3, r1, r3
 8002b14:	4413      	add	r3, r2
 8002b16:	3361      	adds	r3, #97	; 0x61
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b06      	cmp	r3, #6
 8002b1c:	d009      	beq.n	8002b32 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	212c      	movs	r1, #44	; 0x2c
 8002b24:	fb01 f303 	mul.w	r3, r1, r3
 8002b28:	4413      	add	r3, r2
 8002b2a:	3361      	adds	r3, #97	; 0x61
 8002b2c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b2e:	2b08      	cmp	r3, #8
 8002b30:	d150      	bne.n	8002bd4 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	212c      	movs	r1, #44	; 0x2c
 8002b38:	fb01 f303 	mul.w	r3, r1, r3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	335c      	adds	r3, #92	; 0x5c
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	1c5a      	adds	r2, r3, #1
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	202c      	movs	r0, #44	; 0x2c
 8002b4a:	fb00 f303 	mul.w	r3, r0, r3
 8002b4e:	440b      	add	r3, r1
 8002b50:	335c      	adds	r3, #92	; 0x5c
 8002b52:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	212c      	movs	r1, #44	; 0x2c
 8002b5a:	fb01 f303 	mul.w	r3, r1, r3
 8002b5e:	4413      	add	r3, r2
 8002b60:	335c      	adds	r3, #92	; 0x5c
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d912      	bls.n	8002b8e <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	212c      	movs	r1, #44	; 0x2c
 8002b6e:	fb01 f303 	mul.w	r3, r1, r3
 8002b72:	4413      	add	r3, r2
 8002b74:	335c      	adds	r3, #92	; 0x5c
 8002b76:	2200      	movs	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	212c      	movs	r1, #44	; 0x2c
 8002b80:	fb01 f303 	mul.w	r3, r1, r3
 8002b84:	4413      	add	r3, r2
 8002b86:	3360      	adds	r3, #96	; 0x60
 8002b88:	2204      	movs	r2, #4
 8002b8a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b8c:	e073      	b.n	8002c76 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	212c      	movs	r1, #44	; 0x2c
 8002b94:	fb01 f303 	mul.w	r3, r1, r3
 8002b98:	4413      	add	r3, r2
 8002b9a:	3360      	adds	r3, #96	; 0x60
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	015a      	lsls	r2, r3, #5
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bb6:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bbe:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	015a      	lsls	r2, r3, #5
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bcc:	461a      	mov	r2, r3
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002bd2:	e050      	b.n	8002c76 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	212c      	movs	r1, #44	; 0x2c
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	3361      	adds	r3, #97	; 0x61
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b03      	cmp	r3, #3
 8002be6:	d122      	bne.n	8002c2e <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	212c      	movs	r1, #44	; 0x2c
 8002bee:	fb01 f303 	mul.w	r3, r1, r3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	3360      	adds	r3, #96	; 0x60
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	015a      	lsls	r2, r3, #5
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	4413      	add	r3, r2
 8002c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c10:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c18:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	015a      	lsls	r2, r3, #5
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c26:	461a      	mov	r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	e023      	b.n	8002c76 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	212c      	movs	r1, #44	; 0x2c
 8002c34:	fb01 f303 	mul.w	r3, r1, r3
 8002c38:	4413      	add	r3, r2
 8002c3a:	3361      	adds	r3, #97	; 0x61
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	2b07      	cmp	r3, #7
 8002c40:	d119      	bne.n	8002c76 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	212c      	movs	r1, #44	; 0x2c
 8002c48:	fb01 f303 	mul.w	r3, r1, r3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	335c      	adds	r3, #92	; 0x5c
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	202c      	movs	r0, #44	; 0x2c
 8002c5a:	fb00 f303 	mul.w	r3, r0, r3
 8002c5e:	440b      	add	r3, r1
 8002c60:	335c      	adds	r3, #92	; 0x5c
 8002c62:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	212c      	movs	r1, #44	; 0x2c
 8002c6a:	fb01 f303 	mul.w	r3, r1, r3
 8002c6e:	4413      	add	r3, r2
 8002c70:	3360      	adds	r3, #96	; 0x60
 8002c72:	2204      	movs	r2, #4
 8002c74:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	015a      	lsls	r2, r3, #5
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c82:	461a      	mov	r2, r3
 8002c84:	2302      	movs	r3, #2
 8002c86:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	b2d9      	uxtb	r1, r3
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	202c      	movs	r0, #44	; 0x2c
 8002c92:	fb00 f303 	mul.w	r3, r0, r3
 8002c96:	4413      	add	r3, r2
 8002c98:	3360      	adds	r3, #96	; 0x60
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f008 fa34 	bl	800b10c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ca4:	e081      	b.n	8002daa <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	2b10      	cmp	r3, #16
 8002cba:	d176      	bne.n	8002daa <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	212c      	movs	r1, #44	; 0x2c
 8002cc2:	fb01 f303 	mul.w	r3, r1, r3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	333f      	adds	r3, #63	; 0x3f
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	d121      	bne.n	8002d14 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	212c      	movs	r1, #44	; 0x2c
 8002cd6:	fb01 f303 	mul.w	r3, r1, r3
 8002cda:	4413      	add	r3, r2
 8002cdc:	335c      	adds	r3, #92	; 0x5c
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	015a      	lsls	r2, r3, #5
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	4413      	add	r3, r2
 8002cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	0151      	lsls	r1, r2, #5
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	440a      	add	r2, r1
 8002cf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cfc:	f043 0302 	orr.w	r3, r3, #2
 8002d00:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f002 face 	bl	80052ae <USB_HC_Halt>
 8002d12:	e041      	b.n	8002d98 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	212c      	movs	r1, #44	; 0x2c
 8002d1a:	fb01 f303 	mul.w	r3, r1, r3
 8002d1e:	4413      	add	r3, r2
 8002d20:	333f      	adds	r3, #63	; 0x3f
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d009      	beq.n	8002d3c <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	212c      	movs	r1, #44	; 0x2c
 8002d2e:	fb01 f303 	mul.w	r3, r1, r3
 8002d32:	4413      	add	r3, r2
 8002d34:	333f      	adds	r3, #63	; 0x3f
 8002d36:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d12d      	bne.n	8002d98 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	212c      	movs	r1, #44	; 0x2c
 8002d42:	fb01 f303 	mul.w	r3, r1, r3
 8002d46:	4413      	add	r3, r2
 8002d48:	335c      	adds	r3, #92	; 0x5c
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d120      	bne.n	8002d98 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	212c      	movs	r1, #44	; 0x2c
 8002d5c:	fb01 f303 	mul.w	r3, r1, r3
 8002d60:	4413      	add	r3, r2
 8002d62:	3361      	adds	r3, #97	; 0x61
 8002d64:	2203      	movs	r2, #3
 8002d66:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	015a      	lsls	r2, r3, #5
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	0151      	lsls	r1, r2, #5
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	440a      	add	r2, r1
 8002d7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d82:	f043 0302 	orr.w	r3, r3, #2
 8002d86:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	4611      	mov	r1, r2
 8002d92:	4618      	mov	r0, r3
 8002d94:	f002 fa8b 	bl	80052ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	015a      	lsls	r2, r3, #5
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	4413      	add	r3, r2
 8002da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da4:	461a      	mov	r2, r3
 8002da6:	2310      	movs	r3, #16
 8002da8:	6093      	str	r3, [r2, #8]
}
 8002daa:	bf00      	nop
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b088      	sub	sp, #32
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002dc8:	78fb      	ldrb	r3, [r7, #3]
 8002dca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	015a      	lsls	r2, r3, #5
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 0304 	and.w	r3, r3, #4
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d119      	bne.n	8002e16 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	015a      	lsls	r2, r3, #5
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dee:	461a      	mov	r2, r3
 8002df0:	2304      	movs	r3, #4
 8002df2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	015a      	lsls	r2, r3, #5
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	0151      	lsls	r1, r2, #5
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	440a      	add	r2, r1
 8002e0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e0e:	f043 0302 	orr.w	r3, r3, #2
 8002e12:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002e14:	e3ca      	b.n	80035ac <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	015a      	lsls	r2, r3, #5
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 0320 	and.w	r3, r3, #32
 8002e28:	2b20      	cmp	r3, #32
 8002e2a:	d13e      	bne.n	8002eaa <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	015a      	lsls	r2, r3, #5
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	4413      	add	r3, r2
 8002e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e38:	461a      	mov	r2, r3
 8002e3a:	2320      	movs	r3, #32
 8002e3c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	212c      	movs	r1, #44	; 0x2c
 8002e44:	fb01 f303 	mul.w	r3, r1, r3
 8002e48:	4413      	add	r3, r2
 8002e4a:	333d      	adds	r3, #61	; 0x3d
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	f040 83ac 	bne.w	80035ac <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	212c      	movs	r1, #44	; 0x2c
 8002e5a:	fb01 f303 	mul.w	r3, r1, r3
 8002e5e:	4413      	add	r3, r2
 8002e60:	333d      	adds	r3, #61	; 0x3d
 8002e62:	2200      	movs	r2, #0
 8002e64:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	212c      	movs	r1, #44	; 0x2c
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	3360      	adds	r3, #96	; 0x60
 8002e74:	2202      	movs	r2, #2
 8002e76:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	015a      	lsls	r2, r3, #5
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	0151      	lsls	r1, r2, #5
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	440a      	add	r2, r1
 8002e8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e92:	f043 0302 	orr.w	r3, r3, #2
 8002e96:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	4611      	mov	r1, r2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f002 fa03 	bl	80052ae <USB_HC_Halt>
}
 8002ea8:	e380      	b.n	80035ac <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	015a      	lsls	r2, r3, #5
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ec0:	d122      	bne.n	8002f08 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	015a      	lsls	r2, r3, #5
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	4413      	add	r3, r2
 8002eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	0151      	lsls	r1, r2, #5
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	440a      	add	r2, r1
 8002ed8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002edc:	f043 0302 	orr.w	r3, r3, #2
 8002ee0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	4611      	mov	r1, r2
 8002eec:	4618      	mov	r0, r3
 8002eee:	f002 f9de 	bl	80052ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	015a      	lsls	r2, r3, #5
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	4413      	add	r3, r2
 8002efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002efe:	461a      	mov	r2, r3
 8002f00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f04:	6093      	str	r3, [r2, #8]
}
 8002f06:	e351      	b.n	80035ac <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	015a      	lsls	r2, r3, #5
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	4413      	add	r3, r2
 8002f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d150      	bne.n	8002fc0 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	212c      	movs	r1, #44	; 0x2c
 8002f24:	fb01 f303 	mul.w	r3, r1, r3
 8002f28:	4413      	add	r3, r2
 8002f2a:	335c      	adds	r3, #92	; 0x5c
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f42:	2b40      	cmp	r3, #64	; 0x40
 8002f44:	d111      	bne.n	8002f6a <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	212c      	movs	r1, #44	; 0x2c
 8002f4c:	fb01 f303 	mul.w	r3, r1, r3
 8002f50:	4413      	add	r3, r2
 8002f52:	333d      	adds	r3, #61	; 0x3d
 8002f54:	2201      	movs	r2, #1
 8002f56:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	015a      	lsls	r2, r3, #5
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	4413      	add	r3, r2
 8002f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f64:	461a      	mov	r2, r3
 8002f66:	2340      	movs	r3, #64	; 0x40
 8002f68:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	0151      	lsls	r1, r2, #5
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	440a      	add	r2, r1
 8002f80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f84:	f043 0302 	orr.w	r3, r3, #2
 8002f88:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	4611      	mov	r1, r2
 8002f94:	4618      	mov	r0, r3
 8002f96:	f002 f98a 	bl	80052ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	2301      	movs	r3, #1
 8002faa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	212c      	movs	r1, #44	; 0x2c
 8002fb2:	fb01 f303 	mul.w	r3, r1, r3
 8002fb6:	4413      	add	r3, r2
 8002fb8:	3361      	adds	r3, #97	; 0x61
 8002fba:	2201      	movs	r2, #1
 8002fbc:	701a      	strb	r2, [r3, #0]
}
 8002fbe:	e2f5      	b.n	80035ac <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	015a      	lsls	r2, r3, #5
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd2:	2b40      	cmp	r3, #64	; 0x40
 8002fd4:	d13c      	bne.n	8003050 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	212c      	movs	r1, #44	; 0x2c
 8002fdc:	fb01 f303 	mul.w	r3, r1, r3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	3361      	adds	r3, #97	; 0x61
 8002fe4:	2204      	movs	r2, #4
 8002fe6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	212c      	movs	r1, #44	; 0x2c
 8002fee:	fb01 f303 	mul.w	r3, r1, r3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	333d      	adds	r3, #61	; 0x3d
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	212c      	movs	r1, #44	; 0x2c
 8003000:	fb01 f303 	mul.w	r3, r1, r3
 8003004:	4413      	add	r3, r2
 8003006:	335c      	adds	r3, #92	; 0x5c
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	015a      	lsls	r2, r3, #5
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	4413      	add	r3, r2
 8003014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	0151      	lsls	r1, r2, #5
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	440a      	add	r2, r1
 8003022:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003026:	f043 0302 	orr.w	r3, r3, #2
 800302a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	4611      	mov	r1, r2
 8003036:	4618      	mov	r0, r3
 8003038:	f002 f939 	bl	80052ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	015a      	lsls	r2, r3, #5
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	4413      	add	r3, r2
 8003044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003048:	461a      	mov	r2, r3
 800304a:	2340      	movs	r3, #64	; 0x40
 800304c:	6093      	str	r3, [r2, #8]
}
 800304e:	e2ad      	b.n	80035ac <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	015a      	lsls	r2, r3, #5
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	4413      	add	r3, r2
 8003058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b08      	cmp	r3, #8
 8003064:	d12a      	bne.n	80030bc <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	015a      	lsls	r2, r3, #5
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	4413      	add	r3, r2
 800306e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003072:	461a      	mov	r2, r3
 8003074:	2308      	movs	r3, #8
 8003076:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	015a      	lsls	r2, r3, #5
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	4413      	add	r3, r2
 8003080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	0151      	lsls	r1, r2, #5
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	440a      	add	r2, r1
 800308e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003092:	f043 0302 	orr.w	r3, r3, #2
 8003096:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	4611      	mov	r1, r2
 80030a2:	4618      	mov	r0, r3
 80030a4:	f002 f903 	bl	80052ae <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	212c      	movs	r1, #44	; 0x2c
 80030ae:	fb01 f303 	mul.w	r3, r1, r3
 80030b2:	4413      	add	r3, r2
 80030b4:	3361      	adds	r3, #97	; 0x61
 80030b6:	2205      	movs	r2, #5
 80030b8:	701a      	strb	r2, [r3, #0]
}
 80030ba:	e277      	b.n	80035ac <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	015a      	lsls	r2, r3, #5
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 0310 	and.w	r3, r3, #16
 80030ce:	2b10      	cmp	r3, #16
 80030d0:	d150      	bne.n	8003174 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	212c      	movs	r1, #44	; 0x2c
 80030d8:	fb01 f303 	mul.w	r3, r1, r3
 80030dc:	4413      	add	r3, r2
 80030de:	335c      	adds	r3, #92	; 0x5c
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	212c      	movs	r1, #44	; 0x2c
 80030ea:	fb01 f303 	mul.w	r3, r1, r3
 80030ee:	4413      	add	r3, r2
 80030f0:	3361      	adds	r3, #97	; 0x61
 80030f2:	2203      	movs	r2, #3
 80030f4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	212c      	movs	r1, #44	; 0x2c
 80030fc:	fb01 f303 	mul.w	r3, r1, r3
 8003100:	4413      	add	r3, r2
 8003102:	333d      	adds	r3, #61	; 0x3d
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d112      	bne.n	8003130 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	212c      	movs	r1, #44	; 0x2c
 8003110:	fb01 f303 	mul.w	r3, r1, r3
 8003114:	4413      	add	r3, r2
 8003116:	333c      	adds	r3, #60	; 0x3c
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d108      	bne.n	8003130 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	212c      	movs	r1, #44	; 0x2c
 8003124:	fb01 f303 	mul.w	r3, r1, r3
 8003128:	4413      	add	r3, r2
 800312a:	333d      	adds	r3, #61	; 0x3d
 800312c:	2201      	movs	r2, #1
 800312e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	4413      	add	r3, r2
 8003138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	0151      	lsls	r1, r2, #5
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	440a      	add	r2, r1
 8003146:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800314a:	f043 0302 	orr.w	r3, r3, #2
 800314e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	4611      	mov	r1, r2
 800315a:	4618      	mov	r0, r3
 800315c:	f002 f8a7 	bl	80052ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	015a      	lsls	r2, r3, #5
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	4413      	add	r3, r2
 8003168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800316c:	461a      	mov	r2, r3
 800316e:	2310      	movs	r3, #16
 8003170:	6093      	str	r3, [r2, #8]
}
 8003172:	e21b      	b.n	80035ac <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	015a      	lsls	r2, r3, #5
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	4413      	add	r3, r2
 800317c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003186:	2b80      	cmp	r3, #128	; 0x80
 8003188:	d174      	bne.n	8003274 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d121      	bne.n	80031d6 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	212c      	movs	r1, #44	; 0x2c
 8003198:	fb01 f303 	mul.w	r3, r1, r3
 800319c:	4413      	add	r3, r2
 800319e:	3361      	adds	r3, #97	; 0x61
 80031a0:	2206      	movs	r2, #6
 80031a2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	015a      	lsls	r2, r3, #5
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	4413      	add	r3, r2
 80031ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	0151      	lsls	r1, r2, #5
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	440a      	add	r2, r1
 80031ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031be:	f043 0302 	orr.w	r3, r3, #2
 80031c2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	4611      	mov	r1, r2
 80031ce:	4618      	mov	r0, r3
 80031d0:	f002 f86d 	bl	80052ae <USB_HC_Halt>
 80031d4:	e044      	b.n	8003260 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	212c      	movs	r1, #44	; 0x2c
 80031dc:	fb01 f303 	mul.w	r3, r1, r3
 80031e0:	4413      	add	r3, r2
 80031e2:	335c      	adds	r3, #92	; 0x5c
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	1c5a      	adds	r2, r3, #1
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	202c      	movs	r0, #44	; 0x2c
 80031ee:	fb00 f303 	mul.w	r3, r0, r3
 80031f2:	440b      	add	r3, r1
 80031f4:	335c      	adds	r3, #92	; 0x5c
 80031f6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	212c      	movs	r1, #44	; 0x2c
 80031fe:	fb01 f303 	mul.w	r3, r1, r3
 8003202:	4413      	add	r3, r2
 8003204:	335c      	adds	r3, #92	; 0x5c
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2b02      	cmp	r3, #2
 800320a:	d920      	bls.n	800324e <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	212c      	movs	r1, #44	; 0x2c
 8003212:	fb01 f303 	mul.w	r3, r1, r3
 8003216:	4413      	add	r3, r2
 8003218:	335c      	adds	r3, #92	; 0x5c
 800321a:	2200      	movs	r2, #0
 800321c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	212c      	movs	r1, #44	; 0x2c
 8003224:	fb01 f303 	mul.w	r3, r1, r3
 8003228:	4413      	add	r3, r2
 800322a:	3360      	adds	r3, #96	; 0x60
 800322c:	2204      	movs	r2, #4
 800322e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	b2d9      	uxtb	r1, r3
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	202c      	movs	r0, #44	; 0x2c
 800323a:	fb00 f303 	mul.w	r3, r0, r3
 800323e:	4413      	add	r3, r2
 8003240:	3360      	adds	r3, #96	; 0x60
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	461a      	mov	r2, r3
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f007 ff60 	bl	800b10c <HAL_HCD_HC_NotifyURBChange_Callback>
 800324c:	e008      	b.n	8003260 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	212c      	movs	r1, #44	; 0x2c
 8003254:	fb01 f303 	mul.w	r3, r1, r3
 8003258:	4413      	add	r3, r2
 800325a:	3360      	adds	r3, #96	; 0x60
 800325c:	2202      	movs	r2, #2
 800325e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	015a      	lsls	r2, r3, #5
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	4413      	add	r3, r2
 8003268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800326c:	461a      	mov	r2, r3
 800326e:	2380      	movs	r3, #128	; 0x80
 8003270:	6093      	str	r3, [r2, #8]
}
 8003272:	e19b      	b.n	80035ac <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	4413      	add	r3, r2
 800327c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800328a:	d134      	bne.n	80032f6 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	015a      	lsls	r2, r3, #5
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	4413      	add	r3, r2
 8003294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	0151      	lsls	r1, r2, #5
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	440a      	add	r2, r1
 80032a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032a6:	f043 0302 	orr.w	r3, r3, #2
 80032aa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	4611      	mov	r1, r2
 80032b6:	4618      	mov	r0, r3
 80032b8:	f001 fff9 	bl	80052ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	015a      	lsls	r2, r3, #5
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	4413      	add	r3, r2
 80032c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c8:	461a      	mov	r2, r3
 80032ca:	2310      	movs	r3, #16
 80032cc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	015a      	lsls	r2, r3, #5
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	4413      	add	r3, r2
 80032d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032da:	461a      	mov	r2, r3
 80032dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	212c      	movs	r1, #44	; 0x2c
 80032e8:	fb01 f303 	mul.w	r3, r1, r3
 80032ec:	4413      	add	r3, r2
 80032ee:	3361      	adds	r3, #97	; 0x61
 80032f0:	2208      	movs	r2, #8
 80032f2:	701a      	strb	r2, [r3, #0]
}
 80032f4:	e15a      	b.n	80035ac <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	015a      	lsls	r2, r3, #5
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b02      	cmp	r3, #2
 800330a:	f040 814f 	bne.w	80035ac <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	015a      	lsls	r2, r3, #5
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	4413      	add	r3, r2
 8003316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	0151      	lsls	r1, r2, #5
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	440a      	add	r2, r1
 8003324:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003328:	f023 0302 	bic.w	r3, r3, #2
 800332c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	212c      	movs	r1, #44	; 0x2c
 8003334:	fb01 f303 	mul.w	r3, r1, r3
 8003338:	4413      	add	r3, r2
 800333a:	3361      	adds	r3, #97	; 0x61
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d17d      	bne.n	800343e <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	212c      	movs	r1, #44	; 0x2c
 8003348:	fb01 f303 	mul.w	r3, r1, r3
 800334c:	4413      	add	r3, r2
 800334e:	3360      	adds	r3, #96	; 0x60
 8003350:	2201      	movs	r2, #1
 8003352:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	212c      	movs	r1, #44	; 0x2c
 800335a:	fb01 f303 	mul.w	r3, r1, r3
 800335e:	4413      	add	r3, r2
 8003360:	333f      	adds	r3, #63	; 0x3f
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	2b02      	cmp	r3, #2
 8003366:	d00a      	beq.n	800337e <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	212c      	movs	r1, #44	; 0x2c
 800336e:	fb01 f303 	mul.w	r3, r1, r3
 8003372:	4413      	add	r3, r2
 8003374:	333f      	adds	r3, #63	; 0x3f
 8003376:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003378:	2b03      	cmp	r3, #3
 800337a:	f040 8100 	bne.w	800357e <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d113      	bne.n	80033ae <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	212c      	movs	r1, #44	; 0x2c
 800338c:	fb01 f303 	mul.w	r3, r1, r3
 8003390:	4413      	add	r3, r2
 8003392:	3355      	adds	r3, #85	; 0x55
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	f083 0301 	eor.w	r3, r3, #1
 800339a:	b2d8      	uxtb	r0, r3
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	212c      	movs	r1, #44	; 0x2c
 80033a2:	fb01 f303 	mul.w	r3, r1, r3
 80033a6:	4413      	add	r3, r2
 80033a8:	3355      	adds	r3, #85	; 0x55
 80033aa:	4602      	mov	r2, r0
 80033ac:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	f040 80e3 	bne.w	800357e <HCD_HC_OUT_IRQHandler+0x7cc>
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	212c      	movs	r1, #44	; 0x2c
 80033be:	fb01 f303 	mul.w	r3, r1, r3
 80033c2:	4413      	add	r3, r2
 80033c4:	334c      	adds	r3, #76	; 0x4c
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 80d8 	beq.w	800357e <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	212c      	movs	r1, #44	; 0x2c
 80033d4:	fb01 f303 	mul.w	r3, r1, r3
 80033d8:	4413      	add	r3, r2
 80033da:	334c      	adds	r3, #76	; 0x4c
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6879      	ldr	r1, [r7, #4]
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	202c      	movs	r0, #44	; 0x2c
 80033e4:	fb00 f202 	mul.w	r2, r0, r2
 80033e8:	440a      	add	r2, r1
 80033ea:	3240      	adds	r2, #64	; 0x40
 80033ec:	8812      	ldrh	r2, [r2, #0]
 80033ee:	4413      	add	r3, r2
 80033f0:	3b01      	subs	r3, #1
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	202c      	movs	r0, #44	; 0x2c
 80033f8:	fb00 f202 	mul.w	r2, r0, r2
 80033fc:	440a      	add	r2, r1
 80033fe:	3240      	adds	r2, #64	; 0x40
 8003400:	8812      	ldrh	r2, [r2, #0]
 8003402:	fbb3 f3f2 	udiv	r3, r3, r2
 8003406:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 80b5 	beq.w	800357e <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	212c      	movs	r1, #44	; 0x2c
 800341a:	fb01 f303 	mul.w	r3, r1, r3
 800341e:	4413      	add	r3, r2
 8003420:	3355      	adds	r3, #85	; 0x55
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	f083 0301 	eor.w	r3, r3, #1
 8003428:	b2d8      	uxtb	r0, r3
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	212c      	movs	r1, #44	; 0x2c
 8003430:	fb01 f303 	mul.w	r3, r1, r3
 8003434:	4413      	add	r3, r2
 8003436:	3355      	adds	r3, #85	; 0x55
 8003438:	4602      	mov	r2, r0
 800343a:	701a      	strb	r2, [r3, #0]
 800343c:	e09f      	b.n	800357e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	212c      	movs	r1, #44	; 0x2c
 8003444:	fb01 f303 	mul.w	r3, r1, r3
 8003448:	4413      	add	r3, r2
 800344a:	3361      	adds	r3, #97	; 0x61
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b03      	cmp	r3, #3
 8003450:	d109      	bne.n	8003466 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	212c      	movs	r1, #44	; 0x2c
 8003458:	fb01 f303 	mul.w	r3, r1, r3
 800345c:	4413      	add	r3, r2
 800345e:	3360      	adds	r3, #96	; 0x60
 8003460:	2202      	movs	r2, #2
 8003462:	701a      	strb	r2, [r3, #0]
 8003464:	e08b      	b.n	800357e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	212c      	movs	r1, #44	; 0x2c
 800346c:	fb01 f303 	mul.w	r3, r1, r3
 8003470:	4413      	add	r3, r2
 8003472:	3361      	adds	r3, #97	; 0x61
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b04      	cmp	r3, #4
 8003478:	d109      	bne.n	800348e <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	212c      	movs	r1, #44	; 0x2c
 8003480:	fb01 f303 	mul.w	r3, r1, r3
 8003484:	4413      	add	r3, r2
 8003486:	3360      	adds	r3, #96	; 0x60
 8003488:	2202      	movs	r2, #2
 800348a:	701a      	strb	r2, [r3, #0]
 800348c:	e077      	b.n	800357e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	212c      	movs	r1, #44	; 0x2c
 8003494:	fb01 f303 	mul.w	r3, r1, r3
 8003498:	4413      	add	r3, r2
 800349a:	3361      	adds	r3, #97	; 0x61
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2b05      	cmp	r3, #5
 80034a0:	d109      	bne.n	80034b6 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	212c      	movs	r1, #44	; 0x2c
 80034a8:	fb01 f303 	mul.w	r3, r1, r3
 80034ac:	4413      	add	r3, r2
 80034ae:	3360      	adds	r3, #96	; 0x60
 80034b0:	2205      	movs	r2, #5
 80034b2:	701a      	strb	r2, [r3, #0]
 80034b4:	e063      	b.n	800357e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	212c      	movs	r1, #44	; 0x2c
 80034bc:	fb01 f303 	mul.w	r3, r1, r3
 80034c0:	4413      	add	r3, r2
 80034c2:	3361      	adds	r3, #97	; 0x61
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b06      	cmp	r3, #6
 80034c8:	d009      	beq.n	80034de <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	212c      	movs	r1, #44	; 0x2c
 80034d0:	fb01 f303 	mul.w	r3, r1, r3
 80034d4:	4413      	add	r3, r2
 80034d6:	3361      	adds	r3, #97	; 0x61
 80034d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80034da:	2b08      	cmp	r3, #8
 80034dc:	d14f      	bne.n	800357e <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	212c      	movs	r1, #44	; 0x2c
 80034e4:	fb01 f303 	mul.w	r3, r1, r3
 80034e8:	4413      	add	r3, r2
 80034ea:	335c      	adds	r3, #92	; 0x5c
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	1c5a      	adds	r2, r3, #1
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	202c      	movs	r0, #44	; 0x2c
 80034f6:	fb00 f303 	mul.w	r3, r0, r3
 80034fa:	440b      	add	r3, r1
 80034fc:	335c      	adds	r3, #92	; 0x5c
 80034fe:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	212c      	movs	r1, #44	; 0x2c
 8003506:	fb01 f303 	mul.w	r3, r1, r3
 800350a:	4413      	add	r3, r2
 800350c:	335c      	adds	r3, #92	; 0x5c
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b02      	cmp	r3, #2
 8003512:	d912      	bls.n	800353a <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	212c      	movs	r1, #44	; 0x2c
 800351a:	fb01 f303 	mul.w	r3, r1, r3
 800351e:	4413      	add	r3, r2
 8003520:	335c      	adds	r3, #92	; 0x5c
 8003522:	2200      	movs	r2, #0
 8003524:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	212c      	movs	r1, #44	; 0x2c
 800352c:	fb01 f303 	mul.w	r3, r1, r3
 8003530:	4413      	add	r3, r2
 8003532:	3360      	adds	r3, #96	; 0x60
 8003534:	2204      	movs	r2, #4
 8003536:	701a      	strb	r2, [r3, #0]
 8003538:	e021      	b.n	800357e <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	212c      	movs	r1, #44	; 0x2c
 8003540:	fb01 f303 	mul.w	r3, r1, r3
 8003544:	4413      	add	r3, r2
 8003546:	3360      	adds	r3, #96	; 0x60
 8003548:	2202      	movs	r2, #2
 800354a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	015a      	lsls	r2, r3, #5
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	4413      	add	r3, r2
 8003554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003562:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800356a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	015a      	lsls	r2, r3, #5
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	4413      	add	r3, r2
 8003574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003578:	461a      	mov	r2, r3
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	015a      	lsls	r2, r3, #5
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	4413      	add	r3, r2
 8003586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800358a:	461a      	mov	r2, r3
 800358c:	2302      	movs	r3, #2
 800358e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	b2d9      	uxtb	r1, r3
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	202c      	movs	r0, #44	; 0x2c
 800359a:	fb00 f303 	mul.w	r3, r0, r3
 800359e:	4413      	add	r3, r2
 80035a0:	3360      	adds	r3, #96	; 0x60
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	461a      	mov	r2, r3
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f007 fdb0 	bl	800b10c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80035ac:	bf00      	nop
 80035ae:	3720      	adds	r7, #32
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b08a      	sub	sp, #40	; 0x28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	f003 030f 	and.w	r3, r3, #15
 80035d4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	0c5b      	lsrs	r3, r3, #17
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	091b      	lsrs	r3, r3, #4
 80035e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035e8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d004      	beq.n	80035fa <HCD_RXQLVL_IRQHandler+0x46>
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	2b05      	cmp	r3, #5
 80035f4:	f000 80a9 	beq.w	800374a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80035f8:	e0aa      	b.n	8003750 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 80a6 	beq.w	800374e <HCD_RXQLVL_IRQHandler+0x19a>
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	212c      	movs	r1, #44	; 0x2c
 8003608:	fb01 f303 	mul.w	r3, r1, r3
 800360c:	4413      	add	r3, r2
 800360e:	3344      	adds	r3, #68	; 0x44
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 809b 	beq.w	800374e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	212c      	movs	r1, #44	; 0x2c
 800361e:	fb01 f303 	mul.w	r3, r1, r3
 8003622:	4413      	add	r3, r2
 8003624:	3350      	adds	r3, #80	; 0x50
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	441a      	add	r2, r3
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	202c      	movs	r0, #44	; 0x2c
 8003632:	fb00 f303 	mul.w	r3, r0, r3
 8003636:	440b      	add	r3, r1
 8003638:	334c      	adds	r3, #76	; 0x4c
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	429a      	cmp	r2, r3
 800363e:	d87a      	bhi.n	8003736 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6818      	ldr	r0, [r3, #0]
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	212c      	movs	r1, #44	; 0x2c
 800364a:	fb01 f303 	mul.w	r3, r1, r3
 800364e:	4413      	add	r3, r2
 8003650:	3344      	adds	r3, #68	; 0x44
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	b292      	uxth	r2, r2
 8003658:	4619      	mov	r1, r3
 800365a:	f001 f9a1 	bl	80049a0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	212c      	movs	r1, #44	; 0x2c
 8003664:	fb01 f303 	mul.w	r3, r1, r3
 8003668:	4413      	add	r3, r2
 800366a:	3344      	adds	r3, #68	; 0x44
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	441a      	add	r2, r3
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	202c      	movs	r0, #44	; 0x2c
 8003678:	fb00 f303 	mul.w	r3, r0, r3
 800367c:	440b      	add	r3, r1
 800367e:	3344      	adds	r3, #68	; 0x44
 8003680:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	212c      	movs	r1, #44	; 0x2c
 8003688:	fb01 f303 	mul.w	r3, r1, r3
 800368c:	4413      	add	r3, r2
 800368e:	3350      	adds	r3, #80	; 0x50
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	441a      	add	r2, r3
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	202c      	movs	r0, #44	; 0x2c
 800369c:	fb00 f303 	mul.w	r3, r0, r3
 80036a0:	440b      	add	r3, r1
 80036a2:	3350      	adds	r3, #80	; 0x50
 80036a4:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	0cdb      	lsrs	r3, r3, #19
 80036b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036ba:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	212c      	movs	r1, #44	; 0x2c
 80036c2:	fb01 f303 	mul.w	r3, r1, r3
 80036c6:	4413      	add	r3, r2
 80036c8:	3340      	adds	r3, #64	; 0x40
 80036ca:	881b      	ldrh	r3, [r3, #0]
 80036cc:	461a      	mov	r2, r3
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d13c      	bne.n	800374e <HCD_RXQLVL_IRQHandler+0x19a>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d039      	beq.n	800374e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	015a      	lsls	r2, r3, #5
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	4413      	add	r3, r2
 80036e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036f0:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036f8:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	015a      	lsls	r2, r3, #5
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	4413      	add	r3, r2
 8003702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003706:	461a      	mov	r2, r3
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	212c      	movs	r1, #44	; 0x2c
 8003712:	fb01 f303 	mul.w	r3, r1, r3
 8003716:	4413      	add	r3, r2
 8003718:	3354      	adds	r3, #84	; 0x54
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	f083 0301 	eor.w	r3, r3, #1
 8003720:	b2d8      	uxtb	r0, r3
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	212c      	movs	r1, #44	; 0x2c
 8003728:	fb01 f303 	mul.w	r3, r1, r3
 800372c:	4413      	add	r3, r2
 800372e:	3354      	adds	r3, #84	; 0x54
 8003730:	4602      	mov	r2, r0
 8003732:	701a      	strb	r2, [r3, #0]
      break;
 8003734:	e00b      	b.n	800374e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	212c      	movs	r1, #44	; 0x2c
 800373c:	fb01 f303 	mul.w	r3, r1, r3
 8003740:	4413      	add	r3, r2
 8003742:	3360      	adds	r3, #96	; 0x60
 8003744:	2204      	movs	r2, #4
 8003746:	701a      	strb	r2, [r3, #0]
      break;
 8003748:	e001      	b.n	800374e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800374a:	bf00      	nop
 800374c:	e000      	b.n	8003750 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800374e:	bf00      	nop
  }
}
 8003750:	bf00      	nop
 8003752:	3728      	adds	r7, #40	; 0x28
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003784:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b02      	cmp	r3, #2
 800378e:	d10b      	bne.n	80037a8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b01      	cmp	r3, #1
 8003798:	d102      	bne.n	80037a0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f007 fc9a 	bl	800b0d4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f043 0302 	orr.w	r3, r3, #2
 80037a6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b08      	cmp	r3, #8
 80037b0:	d132      	bne.n	8003818 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	f043 0308 	orr.w	r3, r3, #8
 80037b8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b04      	cmp	r3, #4
 80037c2:	d126      	bne.n	8003812 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d113      	bne.n	80037f4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80037d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037d6:	d106      	bne.n	80037e6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2102      	movs	r1, #2
 80037de:	4618      	mov	r0, r3
 80037e0:	f001 fa3e 	bl	8004c60 <USB_InitFSLSPClkSel>
 80037e4:	e011      	b.n	800380a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2101      	movs	r1, #1
 80037ec:	4618      	mov	r0, r3
 80037ee:	f001 fa37 	bl	8004c60 <USB_InitFSLSPClkSel>
 80037f2:	e00a      	b.n	800380a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d106      	bne.n	800380a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003802:	461a      	mov	r2, r3
 8003804:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003808:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f007 fc8c 	bl	800b128 <HAL_HCD_PortEnabled_Callback>
 8003810:	e002      	b.n	8003818 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f007 fc96 	bl	800b144 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f003 0320 	and.w	r3, r3, #32
 800381e:	2b20      	cmp	r3, #32
 8003820:	d103      	bne.n	800382a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	f043 0320 	orr.w	r3, r3, #32
 8003828:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003830:	461a      	mov	r2, r3
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	6013      	str	r3, [r2, #0]
}
 8003836:	bf00      	nop
 8003838:	3718      	adds	r7, #24
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
	...

08003840 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e264      	b.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d075      	beq.n	800394a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800385e:	4ba3      	ldr	r3, [pc, #652]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
 8003866:	2b04      	cmp	r3, #4
 8003868:	d00c      	beq.n	8003884 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800386a:	4ba0      	ldr	r3, [pc, #640]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003872:	2b08      	cmp	r3, #8
 8003874:	d112      	bne.n	800389c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003876:	4b9d      	ldr	r3, [pc, #628]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800387e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003882:	d10b      	bne.n	800389c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003884:	4b99      	ldr	r3, [pc, #612]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d05b      	beq.n	8003948 <HAL_RCC_OscConfig+0x108>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d157      	bne.n	8003948 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e23f      	b.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a4:	d106      	bne.n	80038b4 <HAL_RCC_OscConfig+0x74>
 80038a6:	4b91      	ldr	r3, [pc, #580]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a90      	ldr	r2, [pc, #576]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 80038ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	e01d      	b.n	80038f0 <HAL_RCC_OscConfig+0xb0>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038bc:	d10c      	bne.n	80038d8 <HAL_RCC_OscConfig+0x98>
 80038be:	4b8b      	ldr	r3, [pc, #556]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a8a      	ldr	r2, [pc, #552]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 80038c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	4b88      	ldr	r3, [pc, #544]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a87      	ldr	r2, [pc, #540]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 80038d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	e00b      	b.n	80038f0 <HAL_RCC_OscConfig+0xb0>
 80038d8:	4b84      	ldr	r3, [pc, #528]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a83      	ldr	r2, [pc, #524]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 80038de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038e2:	6013      	str	r3, [r2, #0]
 80038e4:	4b81      	ldr	r3, [pc, #516]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a80      	ldr	r2, [pc, #512]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 80038ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d013      	beq.n	8003920 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f8:	f7fd ff38 	bl	800176c <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003900:	f7fd ff34 	bl	800176c <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b64      	cmp	r3, #100	; 0x64
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e204      	b.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003912:	4b76      	ldr	r3, [pc, #472]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0f0      	beq.n	8003900 <HAL_RCC_OscConfig+0xc0>
 800391e:	e014      	b.n	800394a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003920:	f7fd ff24 	bl	800176c <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003928:	f7fd ff20 	bl	800176c <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b64      	cmp	r3, #100	; 0x64
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e1f0      	b.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800393a:	4b6c      	ldr	r3, [pc, #432]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0xe8>
 8003946:	e000      	b.n	800394a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d063      	beq.n	8003a1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003956:	4b65      	ldr	r3, [pc, #404]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 030c 	and.w	r3, r3, #12
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00b      	beq.n	800397a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003962:	4b62      	ldr	r3, [pc, #392]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800396a:	2b08      	cmp	r3, #8
 800396c:	d11c      	bne.n	80039a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800396e:	4b5f      	ldr	r3, [pc, #380]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d116      	bne.n	80039a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800397a:	4b5c      	ldr	r3, [pc, #368]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d005      	beq.n	8003992 <HAL_RCC_OscConfig+0x152>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d001      	beq.n	8003992 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e1c4      	b.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003992:	4b56      	ldr	r3, [pc, #344]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	4952      	ldr	r1, [pc, #328]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039a6:	e03a      	b.n	8003a1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d020      	beq.n	80039f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039b0:	4b4f      	ldr	r3, [pc, #316]	; (8003af0 <HAL_RCC_OscConfig+0x2b0>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b6:	f7fd fed9 	bl	800176c <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039be:	f7fd fed5 	bl	800176c <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e1a5      	b.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d0:	4b46      	ldr	r3, [pc, #280]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0f0      	beq.n	80039be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039dc:	4b43      	ldr	r3, [pc, #268]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	4940      	ldr	r1, [pc, #256]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	600b      	str	r3, [r1, #0]
 80039f0:	e015      	b.n	8003a1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039f2:	4b3f      	ldr	r3, [pc, #252]	; (8003af0 <HAL_RCC_OscConfig+0x2b0>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f8:	f7fd feb8 	bl	800176c <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a00:	f7fd feb4 	bl	800176c <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e184      	b.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a12:	4b36      	ldr	r3, [pc, #216]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d030      	beq.n	8003a8c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d016      	beq.n	8003a60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a32:	4b30      	ldr	r3, [pc, #192]	; (8003af4 <HAL_RCC_OscConfig+0x2b4>)
 8003a34:	2201      	movs	r2, #1
 8003a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a38:	f7fd fe98 	bl	800176c <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a40:	f7fd fe94 	bl	800176c <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e164      	b.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a52:	4b26      	ldr	r3, [pc, #152]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 8003a54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0x200>
 8003a5e:	e015      	b.n	8003a8c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a60:	4b24      	ldr	r3, [pc, #144]	; (8003af4 <HAL_RCC_OscConfig+0x2b4>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a66:	f7fd fe81 	bl	800176c <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a6c:	e008      	b.n	8003a80 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a6e:	f7fd fe7d 	bl	800176c <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e14d      	b.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a80:	4b1a      	ldr	r3, [pc, #104]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 8003a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1f0      	bne.n	8003a6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 80a0 	beq.w	8003bda <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a9e:	4b13      	ldr	r3, [pc, #76]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10f      	bne.n	8003aca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60bb      	str	r3, [r7, #8]
 8003aae:	4b0f      	ldr	r3, [pc, #60]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	4a0e      	ldr	r2, [pc, #56]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 8003ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8003aba:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <HAL_RCC_OscConfig+0x2ac>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac2:	60bb      	str	r3, [r7, #8]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aca:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <HAL_RCC_OscConfig+0x2b8>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d121      	bne.n	8003b1a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ad6:	4b08      	ldr	r3, [pc, #32]	; (8003af8 <HAL_RCC_OscConfig+0x2b8>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a07      	ldr	r2, [pc, #28]	; (8003af8 <HAL_RCC_OscConfig+0x2b8>)
 8003adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ae2:	f7fd fe43 	bl	800176c <HAL_GetTick>
 8003ae6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae8:	e011      	b.n	8003b0e <HAL_RCC_OscConfig+0x2ce>
 8003aea:	bf00      	nop
 8003aec:	40023800 	.word	0x40023800
 8003af0:	42470000 	.word	0x42470000
 8003af4:	42470e80 	.word	0x42470e80
 8003af8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003afc:	f7fd fe36 	bl	800176c <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e106      	b.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0e:	4b85      	ldr	r3, [pc, #532]	; (8003d24 <HAL_RCC_OscConfig+0x4e4>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d0f0      	beq.n	8003afc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d106      	bne.n	8003b30 <HAL_RCC_OscConfig+0x2f0>
 8003b22:	4b81      	ldr	r3, [pc, #516]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b26:	4a80      	ldr	r2, [pc, #512]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003b28:	f043 0301 	orr.w	r3, r3, #1
 8003b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b2e:	e01c      	b.n	8003b6a <HAL_RCC_OscConfig+0x32a>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	2b05      	cmp	r3, #5
 8003b36:	d10c      	bne.n	8003b52 <HAL_RCC_OscConfig+0x312>
 8003b38:	4b7b      	ldr	r3, [pc, #492]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3c:	4a7a      	ldr	r2, [pc, #488]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003b3e:	f043 0304 	orr.w	r3, r3, #4
 8003b42:	6713      	str	r3, [r2, #112]	; 0x70
 8003b44:	4b78      	ldr	r3, [pc, #480]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b48:	4a77      	ldr	r2, [pc, #476]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003b4a:	f043 0301 	orr.w	r3, r3, #1
 8003b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b50:	e00b      	b.n	8003b6a <HAL_RCC_OscConfig+0x32a>
 8003b52:	4b75      	ldr	r3, [pc, #468]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b56:	4a74      	ldr	r2, [pc, #464]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003b58:	f023 0301 	bic.w	r3, r3, #1
 8003b5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b5e:	4b72      	ldr	r3, [pc, #456]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b62:	4a71      	ldr	r2, [pc, #452]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003b64:	f023 0304 	bic.w	r3, r3, #4
 8003b68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d015      	beq.n	8003b9e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b72:	f7fd fdfb 	bl	800176c <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b78:	e00a      	b.n	8003b90 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b7a:	f7fd fdf7 	bl	800176c <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e0c5      	b.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b90:	4b65      	ldr	r3, [pc, #404]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0ee      	beq.n	8003b7a <HAL_RCC_OscConfig+0x33a>
 8003b9c:	e014      	b.n	8003bc8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b9e:	f7fd fde5 	bl	800176c <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ba4:	e00a      	b.n	8003bbc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ba6:	f7fd fde1 	bl	800176c <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e0af      	b.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bbc:	4b5a      	ldr	r3, [pc, #360]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1ee      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bc8:	7dfb      	ldrb	r3, [r7, #23]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d105      	bne.n	8003bda <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bce:	4b56      	ldr	r3, [pc, #344]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	4a55      	ldr	r2, [pc, #340]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003bd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bd8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f000 809b 	beq.w	8003d1a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003be4:	4b50      	ldr	r3, [pc, #320]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 030c 	and.w	r3, r3, #12
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	d05c      	beq.n	8003caa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d141      	bne.n	8003c7c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf8:	4b4c      	ldr	r3, [pc, #304]	; (8003d2c <HAL_RCC_OscConfig+0x4ec>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfe:	f7fd fdb5 	bl	800176c <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c06:	f7fd fdb1 	bl	800176c <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e081      	b.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c18:	4b43      	ldr	r3, [pc, #268]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1f0      	bne.n	8003c06 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	69da      	ldr	r2, [r3, #28]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	019b      	lsls	r3, r3, #6
 8003c34:	431a      	orrs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3a:	085b      	lsrs	r3, r3, #1
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	041b      	lsls	r3, r3, #16
 8003c40:	431a      	orrs	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c46:	061b      	lsls	r3, r3, #24
 8003c48:	4937      	ldr	r1, [pc, #220]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c4e:	4b37      	ldr	r3, [pc, #220]	; (8003d2c <HAL_RCC_OscConfig+0x4ec>)
 8003c50:	2201      	movs	r2, #1
 8003c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c54:	f7fd fd8a 	bl	800176c <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c5c:	f7fd fd86 	bl	800176c <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e056      	b.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c6e:	4b2e      	ldr	r3, [pc, #184]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0f0      	beq.n	8003c5c <HAL_RCC_OscConfig+0x41c>
 8003c7a:	e04e      	b.n	8003d1a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c7c:	4b2b      	ldr	r3, [pc, #172]	; (8003d2c <HAL_RCC_OscConfig+0x4ec>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c82:	f7fd fd73 	bl	800176c <HAL_GetTick>
 8003c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c88:	e008      	b.n	8003c9c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c8a:	f7fd fd6f 	bl	800176c <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e03f      	b.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c9c:	4b22      	ldr	r3, [pc, #136]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1f0      	bne.n	8003c8a <HAL_RCC_OscConfig+0x44a>
 8003ca8:	e037      	b.n	8003d1a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d101      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e032      	b.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cb6:	4b1c      	ldr	r3, [pc, #112]	; (8003d28 <HAL_RCC_OscConfig+0x4e8>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d028      	beq.n	8003d16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d121      	bne.n	8003d16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d11a      	bne.n	8003d16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d111      	bne.n	8003d16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfc:	085b      	lsrs	r3, r3, #1
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d107      	bne.n	8003d16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d10:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d001      	beq.n	8003d1a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	40007000 	.word	0x40007000
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	42470060 	.word	0x42470060

08003d30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e0cc      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d44:	4b68      	ldr	r3, [pc, #416]	; (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d90c      	bls.n	8003d6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d52:	4b65      	ldr	r3, [pc, #404]	; (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5a:	4b63      	ldr	r3, [pc, #396]	; (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d001      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e0b8      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d020      	beq.n	8003dba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d005      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d84:	4b59      	ldr	r3, [pc, #356]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	4a58      	ldr	r2, [pc, #352]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0308 	and.w	r3, r3, #8
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d005      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d9c:	4b53      	ldr	r3, [pc, #332]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	4a52      	ldr	r2, [pc, #328]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003da2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003da6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da8:	4b50      	ldr	r3, [pc, #320]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	494d      	ldr	r1, [pc, #308]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d044      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d107      	bne.n	8003dde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dce:	4b47      	ldr	r3, [pc, #284]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d119      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e07f      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d003      	beq.n	8003dee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dea:	2b03      	cmp	r3, #3
 8003dec:	d107      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dee:	4b3f      	ldr	r3, [pc, #252]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d109      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e06f      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dfe:	4b3b      	ldr	r3, [pc, #236]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e067      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e0e:	4b37      	ldr	r3, [pc, #220]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f023 0203 	bic.w	r2, r3, #3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	4934      	ldr	r1, [pc, #208]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e20:	f7fd fca4 	bl	800176c <HAL_GetTick>
 8003e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e26:	e00a      	b.n	8003e3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e28:	f7fd fca0 	bl	800176c <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e04f      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e3e:	4b2b      	ldr	r3, [pc, #172]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 020c 	and.w	r2, r3, #12
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d1eb      	bne.n	8003e28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e50:	4b25      	ldr	r3, [pc, #148]	; (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d20c      	bcs.n	8003e78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e5e:	4b22      	ldr	r3, [pc, #136]	; (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	b2d2      	uxtb	r2, r2
 8003e64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e66:	4b20      	ldr	r3, [pc, #128]	; (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0307 	and.w	r3, r3, #7
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d001      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e032      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d008      	beq.n	8003e96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e84:	4b19      	ldr	r3, [pc, #100]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	4916      	ldr	r1, [pc, #88]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d009      	beq.n	8003eb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ea2:	4b12      	ldr	r3, [pc, #72]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	490e      	ldr	r1, [pc, #56]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003eb6:	f000 f821 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	4b0b      	ldr	r3, [pc, #44]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	091b      	lsrs	r3, r3, #4
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	490a      	ldr	r1, [pc, #40]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8003ec8:	5ccb      	ldrb	r3, [r1, r3]
 8003eca:	fa22 f303 	lsr.w	r3, r2, r3
 8003ece:	4a09      	ldr	r2, [pc, #36]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ed2:	4b09      	ldr	r3, [pc, #36]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fd fc04 	bl	80016e4 <HAL_InitTick>

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40023c00 	.word	0x40023c00
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	0800c490 	.word	0x0800c490
 8003ef4:	20000000 	.word	0x20000000
 8003ef8:	20000004 	.word	0x20000004

08003efc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003efc:	b5b0      	push	{r4, r5, r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f02:	2100      	movs	r1, #0
 8003f04:	6079      	str	r1, [r7, #4]
 8003f06:	2100      	movs	r1, #0
 8003f08:	60f9      	str	r1, [r7, #12]
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003f0e:	2100      	movs	r1, #0
 8003f10:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f12:	4952      	ldr	r1, [pc, #328]	; (800405c <HAL_RCC_GetSysClockFreq+0x160>)
 8003f14:	6889      	ldr	r1, [r1, #8]
 8003f16:	f001 010c 	and.w	r1, r1, #12
 8003f1a:	2908      	cmp	r1, #8
 8003f1c:	d00d      	beq.n	8003f3a <HAL_RCC_GetSysClockFreq+0x3e>
 8003f1e:	2908      	cmp	r1, #8
 8003f20:	f200 8094 	bhi.w	800404c <HAL_RCC_GetSysClockFreq+0x150>
 8003f24:	2900      	cmp	r1, #0
 8003f26:	d002      	beq.n	8003f2e <HAL_RCC_GetSysClockFreq+0x32>
 8003f28:	2904      	cmp	r1, #4
 8003f2a:	d003      	beq.n	8003f34 <HAL_RCC_GetSysClockFreq+0x38>
 8003f2c:	e08e      	b.n	800404c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f2e:	4b4c      	ldr	r3, [pc, #304]	; (8004060 <HAL_RCC_GetSysClockFreq+0x164>)
 8003f30:	60bb      	str	r3, [r7, #8]
       break;
 8003f32:	e08e      	b.n	8004052 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f34:	4b4b      	ldr	r3, [pc, #300]	; (8004064 <HAL_RCC_GetSysClockFreq+0x168>)
 8003f36:	60bb      	str	r3, [r7, #8]
      break;
 8003f38:	e08b      	b.n	8004052 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f3a:	4948      	ldr	r1, [pc, #288]	; (800405c <HAL_RCC_GetSysClockFreq+0x160>)
 8003f3c:	6849      	ldr	r1, [r1, #4]
 8003f3e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003f42:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f44:	4945      	ldr	r1, [pc, #276]	; (800405c <HAL_RCC_GetSysClockFreq+0x160>)
 8003f46:	6849      	ldr	r1, [r1, #4]
 8003f48:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003f4c:	2900      	cmp	r1, #0
 8003f4e:	d024      	beq.n	8003f9a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f50:	4942      	ldr	r1, [pc, #264]	; (800405c <HAL_RCC_GetSysClockFreq+0x160>)
 8003f52:	6849      	ldr	r1, [r1, #4]
 8003f54:	0989      	lsrs	r1, r1, #6
 8003f56:	4608      	mov	r0, r1
 8003f58:	f04f 0100 	mov.w	r1, #0
 8003f5c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003f60:	f04f 0500 	mov.w	r5, #0
 8003f64:	ea00 0204 	and.w	r2, r0, r4
 8003f68:	ea01 0305 	and.w	r3, r1, r5
 8003f6c:	493d      	ldr	r1, [pc, #244]	; (8004064 <HAL_RCC_GetSysClockFreq+0x168>)
 8003f6e:	fb01 f003 	mul.w	r0, r1, r3
 8003f72:	2100      	movs	r1, #0
 8003f74:	fb01 f102 	mul.w	r1, r1, r2
 8003f78:	1844      	adds	r4, r0, r1
 8003f7a:	493a      	ldr	r1, [pc, #232]	; (8004064 <HAL_RCC_GetSysClockFreq+0x168>)
 8003f7c:	fba2 0101 	umull	r0, r1, r2, r1
 8003f80:	1863      	adds	r3, r4, r1
 8003f82:	4619      	mov	r1, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	461a      	mov	r2, r3
 8003f88:	f04f 0300 	mov.w	r3, #0
 8003f8c:	f7fc fc86 	bl	800089c <__aeabi_uldivmod>
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	4613      	mov	r3, r2
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	e04a      	b.n	8004030 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f9a:	4b30      	ldr	r3, [pc, #192]	; (800405c <HAL_RCC_GetSysClockFreq+0x160>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	099b      	lsrs	r3, r3, #6
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003faa:	f04f 0100 	mov.w	r1, #0
 8003fae:	ea02 0400 	and.w	r4, r2, r0
 8003fb2:	ea03 0501 	and.w	r5, r3, r1
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	4629      	mov	r1, r5
 8003fba:	f04f 0200 	mov.w	r2, #0
 8003fbe:	f04f 0300 	mov.w	r3, #0
 8003fc2:	014b      	lsls	r3, r1, #5
 8003fc4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003fc8:	0142      	lsls	r2, r0, #5
 8003fca:	4610      	mov	r0, r2
 8003fcc:	4619      	mov	r1, r3
 8003fce:	1b00      	subs	r0, r0, r4
 8003fd0:	eb61 0105 	sbc.w	r1, r1, r5
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	f04f 0300 	mov.w	r3, #0
 8003fdc:	018b      	lsls	r3, r1, #6
 8003fde:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003fe2:	0182      	lsls	r2, r0, #6
 8003fe4:	1a12      	subs	r2, r2, r0
 8003fe6:	eb63 0301 	sbc.w	r3, r3, r1
 8003fea:	f04f 0000 	mov.w	r0, #0
 8003fee:	f04f 0100 	mov.w	r1, #0
 8003ff2:	00d9      	lsls	r1, r3, #3
 8003ff4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ff8:	00d0      	lsls	r0, r2, #3
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	1912      	adds	r2, r2, r4
 8004000:	eb45 0303 	adc.w	r3, r5, r3
 8004004:	f04f 0000 	mov.w	r0, #0
 8004008:	f04f 0100 	mov.w	r1, #0
 800400c:	0299      	lsls	r1, r3, #10
 800400e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004012:	0290      	lsls	r0, r2, #10
 8004014:	4602      	mov	r2, r0
 8004016:	460b      	mov	r3, r1
 8004018:	4610      	mov	r0, r2
 800401a:	4619      	mov	r1, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	461a      	mov	r2, r3
 8004020:	f04f 0300 	mov.w	r3, #0
 8004024:	f7fc fc3a 	bl	800089c <__aeabi_uldivmod>
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	4613      	mov	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004030:	4b0a      	ldr	r3, [pc, #40]	; (800405c <HAL_RCC_GetSysClockFreq+0x160>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	0c1b      	lsrs	r3, r3, #16
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	3301      	adds	r3, #1
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	fbb2 f3f3 	udiv	r3, r2, r3
 8004048:	60bb      	str	r3, [r7, #8]
      break;
 800404a:	e002      	b.n	8004052 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800404c:	4b04      	ldr	r3, [pc, #16]	; (8004060 <HAL_RCC_GetSysClockFreq+0x164>)
 800404e:	60bb      	str	r3, [r7, #8]
      break;
 8004050:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004052:	68bb      	ldr	r3, [r7, #8]
}
 8004054:	4618      	mov	r0, r3
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bdb0      	pop	{r4, r5, r7, pc}
 800405c:	40023800 	.word	0x40023800
 8004060:	00f42400 	.word	0x00f42400
 8004064:	017d7840 	.word	0x017d7840

08004068 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800406c:	4b03      	ldr	r3, [pc, #12]	; (800407c <HAL_RCC_GetHCLKFreq+0x14>)
 800406e:	681b      	ldr	r3, [r3, #0]
}
 8004070:	4618      	mov	r0, r3
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	20000000 	.word	0x20000000

08004080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004084:	f7ff fff0 	bl	8004068 <HAL_RCC_GetHCLKFreq>
 8004088:	4602      	mov	r2, r0
 800408a:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	0a9b      	lsrs	r3, r3, #10
 8004090:	f003 0307 	and.w	r3, r3, #7
 8004094:	4903      	ldr	r1, [pc, #12]	; (80040a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004096:	5ccb      	ldrb	r3, [r1, r3]
 8004098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800409c:	4618      	mov	r0, r3
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40023800 	.word	0x40023800
 80040a4:	0800c4a0 	.word	0x0800c4a0

080040a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040ac:	f7ff ffdc 	bl	8004068 <HAL_RCC_GetHCLKFreq>
 80040b0:	4602      	mov	r2, r0
 80040b2:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	0b5b      	lsrs	r3, r3, #13
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	4903      	ldr	r1, [pc, #12]	; (80040cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80040be:	5ccb      	ldrb	r3, [r1, r3]
 80040c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40023800 	.word	0x40023800
 80040cc:	0800c4a0 	.word	0x0800c4a0

080040d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e03f      	b.n	8004162 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d106      	bne.n	80040fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7fd f9e4 	bl	80014c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2224      	movs	r2, #36	; 0x24
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004112:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f929 	bl	800436c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	691a      	ldr	r2, [r3, #16]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004128:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695a      	ldr	r2, [r3, #20]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004138:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004148:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2220      	movs	r2, #32
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b08a      	sub	sp, #40	; 0x28
 800416e:	af02      	add	r7, sp, #8
 8004170:	60f8      	str	r0, [r7, #12]
 8004172:	60b9      	str	r1, [r7, #8]
 8004174:	603b      	str	r3, [r7, #0]
 8004176:	4613      	mov	r3, r2
 8004178:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800417a:	2300      	movs	r3, #0
 800417c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b20      	cmp	r3, #32
 8004188:	d17c      	bne.n	8004284 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d002      	beq.n	8004196 <HAL_UART_Transmit+0x2c>
 8004190:	88fb      	ldrh	r3, [r7, #6]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e075      	b.n	8004286 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d101      	bne.n	80041a8 <HAL_UART_Transmit+0x3e>
 80041a4:	2302      	movs	r3, #2
 80041a6:	e06e      	b.n	8004286 <HAL_UART_Transmit+0x11c>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2221      	movs	r2, #33	; 0x21
 80041ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041be:	f7fd fad5 	bl	800176c <HAL_GetTick>
 80041c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	88fa      	ldrh	r2, [r7, #6]
 80041c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	88fa      	ldrh	r2, [r7, #6]
 80041ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d8:	d108      	bne.n	80041ec <HAL_UART_Transmit+0x82>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d104      	bne.n	80041ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80041e2:	2300      	movs	r3, #0
 80041e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	61bb      	str	r3, [r7, #24]
 80041ea:	e003      	b.n	80041f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041f0:	2300      	movs	r3, #0
 80041f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80041fc:	e02a      	b.n	8004254 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	2200      	movs	r2, #0
 8004206:	2180      	movs	r1, #128	; 0x80
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 f840 	bl	800428e <UART_WaitOnFlagUntilTimeout>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e036      	b.n	8004286 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10b      	bne.n	8004236 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	881b      	ldrh	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800422c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	3302      	adds	r3, #2
 8004232:	61bb      	str	r3, [r7, #24]
 8004234:	e007      	b.n	8004246 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	781a      	ldrb	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	3301      	adds	r3, #1
 8004244:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800424a:	b29b      	uxth	r3, r3
 800424c:	3b01      	subs	r3, #1
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004258:	b29b      	uxth	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1cf      	bne.n	80041fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2200      	movs	r2, #0
 8004266:	2140      	movs	r1, #64	; 0x40
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 f810 	bl	800428e <UART_WaitOnFlagUntilTimeout>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e006      	b.n	8004286 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2220      	movs	r2, #32
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004280:	2300      	movs	r3, #0
 8004282:	e000      	b.n	8004286 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004284:	2302      	movs	r3, #2
  }
}
 8004286:	4618      	mov	r0, r3
 8004288:	3720      	adds	r7, #32
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b090      	sub	sp, #64	; 0x40
 8004292:	af00      	add	r7, sp, #0
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	603b      	str	r3, [r7, #0]
 800429a:	4613      	mov	r3, r2
 800429c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800429e:	e050      	b.n	8004342 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042a6:	d04c      	beq.n	8004342 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80042a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d007      	beq.n	80042be <UART_WaitOnFlagUntilTimeout+0x30>
 80042ae:	f7fd fa5d 	bl	800176c <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d241      	bcs.n	8004342 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	330c      	adds	r3, #12
 80042c4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c8:	e853 3f00 	ldrex	r3, [r3]
 80042cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	330c      	adds	r3, #12
 80042dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042de:	637a      	str	r2, [r7, #52]	; 0x34
 80042e0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042e6:	e841 2300 	strex	r3, r2, [r1]
 80042ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80042ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1e5      	bne.n	80042be <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	3314      	adds	r3, #20
 80042f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	e853 3f00 	ldrex	r3, [r3]
 8004300:	613b      	str	r3, [r7, #16]
   return(result);
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	f023 0301 	bic.w	r3, r3, #1
 8004308:	63bb      	str	r3, [r7, #56]	; 0x38
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	3314      	adds	r3, #20
 8004310:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004312:	623a      	str	r2, [r7, #32]
 8004314:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004316:	69f9      	ldr	r1, [r7, #28]
 8004318:	6a3a      	ldr	r2, [r7, #32]
 800431a:	e841 2300 	strex	r3, r2, [r1]
 800431e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1e5      	bne.n	80042f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2220      	movs	r2, #32
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2220      	movs	r2, #32
 8004332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e00f      	b.n	8004362 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	4013      	ands	r3, r2
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	429a      	cmp	r2, r3
 8004350:	bf0c      	ite	eq
 8004352:	2301      	moveq	r3, #1
 8004354:	2300      	movne	r3, #0
 8004356:	b2db      	uxtb	r3, r3
 8004358:	461a      	mov	r2, r3
 800435a:	79fb      	ldrb	r3, [r7, #7]
 800435c:	429a      	cmp	r2, r3
 800435e:	d09f      	beq.n	80042a0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3740      	adds	r7, #64	; 0x40
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800436c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004370:	b09f      	sub	sp, #124	; 0x7c
 8004372:	af00      	add	r7, sp, #0
 8004374:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004382:	68d9      	ldr	r1, [r3, #12]
 8004384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	ea40 0301 	orr.w	r3, r0, r1
 800438c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800438e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004390:	689a      	ldr	r2, [r3, #8]
 8004392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	431a      	orrs	r2, r3
 8004398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	431a      	orrs	r2, r3
 800439e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80043a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80043b0:	f021 010c 	bic.w	r1, r1, #12
 80043b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043ba:	430b      	orrs	r3, r1
 80043bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80043c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ca:	6999      	ldr	r1, [r3, #24]
 80043cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	ea40 0301 	orr.w	r3, r0, r1
 80043d4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	4bc5      	ldr	r3, [pc, #788]	; (80046f0 <UART_SetConfig+0x384>)
 80043dc:	429a      	cmp	r2, r3
 80043de:	d004      	beq.n	80043ea <UART_SetConfig+0x7e>
 80043e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	4bc3      	ldr	r3, [pc, #780]	; (80046f4 <UART_SetConfig+0x388>)
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d103      	bne.n	80043f2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043ea:	f7ff fe5d 	bl	80040a8 <HAL_RCC_GetPCLK2Freq>
 80043ee:	6778      	str	r0, [r7, #116]	; 0x74
 80043f0:	e002      	b.n	80043f8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043f2:	f7ff fe45 	bl	8004080 <HAL_RCC_GetPCLK1Freq>
 80043f6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004400:	f040 80b6 	bne.w	8004570 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004404:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004406:	461c      	mov	r4, r3
 8004408:	f04f 0500 	mov.w	r5, #0
 800440c:	4622      	mov	r2, r4
 800440e:	462b      	mov	r3, r5
 8004410:	1891      	adds	r1, r2, r2
 8004412:	6439      	str	r1, [r7, #64]	; 0x40
 8004414:	415b      	adcs	r3, r3
 8004416:	647b      	str	r3, [r7, #68]	; 0x44
 8004418:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800441c:	1912      	adds	r2, r2, r4
 800441e:	eb45 0303 	adc.w	r3, r5, r3
 8004422:	f04f 0000 	mov.w	r0, #0
 8004426:	f04f 0100 	mov.w	r1, #0
 800442a:	00d9      	lsls	r1, r3, #3
 800442c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004430:	00d0      	lsls	r0, r2, #3
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	1911      	adds	r1, r2, r4
 8004438:	6639      	str	r1, [r7, #96]	; 0x60
 800443a:	416b      	adcs	r3, r5
 800443c:	667b      	str	r3, [r7, #100]	; 0x64
 800443e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	461a      	mov	r2, r3
 8004444:	f04f 0300 	mov.w	r3, #0
 8004448:	1891      	adds	r1, r2, r2
 800444a:	63b9      	str	r1, [r7, #56]	; 0x38
 800444c:	415b      	adcs	r3, r3
 800444e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004450:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004454:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004458:	f7fc fa20 	bl	800089c <__aeabi_uldivmod>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	4ba5      	ldr	r3, [pc, #660]	; (80046f8 <UART_SetConfig+0x38c>)
 8004462:	fba3 2302 	umull	r2, r3, r3, r2
 8004466:	095b      	lsrs	r3, r3, #5
 8004468:	011e      	lsls	r6, r3, #4
 800446a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800446c:	461c      	mov	r4, r3
 800446e:	f04f 0500 	mov.w	r5, #0
 8004472:	4622      	mov	r2, r4
 8004474:	462b      	mov	r3, r5
 8004476:	1891      	adds	r1, r2, r2
 8004478:	6339      	str	r1, [r7, #48]	; 0x30
 800447a:	415b      	adcs	r3, r3
 800447c:	637b      	str	r3, [r7, #52]	; 0x34
 800447e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004482:	1912      	adds	r2, r2, r4
 8004484:	eb45 0303 	adc.w	r3, r5, r3
 8004488:	f04f 0000 	mov.w	r0, #0
 800448c:	f04f 0100 	mov.w	r1, #0
 8004490:	00d9      	lsls	r1, r3, #3
 8004492:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004496:	00d0      	lsls	r0, r2, #3
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	1911      	adds	r1, r2, r4
 800449e:	65b9      	str	r1, [r7, #88]	; 0x58
 80044a0:	416b      	adcs	r3, r5
 80044a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	461a      	mov	r2, r3
 80044aa:	f04f 0300 	mov.w	r3, #0
 80044ae:	1891      	adds	r1, r2, r2
 80044b0:	62b9      	str	r1, [r7, #40]	; 0x28
 80044b2:	415b      	adcs	r3, r3
 80044b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044ba:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80044be:	f7fc f9ed 	bl	800089c <__aeabi_uldivmod>
 80044c2:	4602      	mov	r2, r0
 80044c4:	460b      	mov	r3, r1
 80044c6:	4b8c      	ldr	r3, [pc, #560]	; (80046f8 <UART_SetConfig+0x38c>)
 80044c8:	fba3 1302 	umull	r1, r3, r3, r2
 80044cc:	095b      	lsrs	r3, r3, #5
 80044ce:	2164      	movs	r1, #100	; 0x64
 80044d0:	fb01 f303 	mul.w	r3, r1, r3
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	3332      	adds	r3, #50	; 0x32
 80044da:	4a87      	ldr	r2, [pc, #540]	; (80046f8 <UART_SetConfig+0x38c>)
 80044dc:	fba2 2303 	umull	r2, r3, r2, r3
 80044e0:	095b      	lsrs	r3, r3, #5
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044e8:	441e      	add	r6, r3
 80044ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044ec:	4618      	mov	r0, r3
 80044ee:	f04f 0100 	mov.w	r1, #0
 80044f2:	4602      	mov	r2, r0
 80044f4:	460b      	mov	r3, r1
 80044f6:	1894      	adds	r4, r2, r2
 80044f8:	623c      	str	r4, [r7, #32]
 80044fa:	415b      	adcs	r3, r3
 80044fc:	627b      	str	r3, [r7, #36]	; 0x24
 80044fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004502:	1812      	adds	r2, r2, r0
 8004504:	eb41 0303 	adc.w	r3, r1, r3
 8004508:	f04f 0400 	mov.w	r4, #0
 800450c:	f04f 0500 	mov.w	r5, #0
 8004510:	00dd      	lsls	r5, r3, #3
 8004512:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004516:	00d4      	lsls	r4, r2, #3
 8004518:	4622      	mov	r2, r4
 800451a:	462b      	mov	r3, r5
 800451c:	1814      	adds	r4, r2, r0
 800451e:	653c      	str	r4, [r7, #80]	; 0x50
 8004520:	414b      	adcs	r3, r1
 8004522:	657b      	str	r3, [r7, #84]	; 0x54
 8004524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	461a      	mov	r2, r3
 800452a:	f04f 0300 	mov.w	r3, #0
 800452e:	1891      	adds	r1, r2, r2
 8004530:	61b9      	str	r1, [r7, #24]
 8004532:	415b      	adcs	r3, r3
 8004534:	61fb      	str	r3, [r7, #28]
 8004536:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800453a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800453e:	f7fc f9ad 	bl	800089c <__aeabi_uldivmod>
 8004542:	4602      	mov	r2, r0
 8004544:	460b      	mov	r3, r1
 8004546:	4b6c      	ldr	r3, [pc, #432]	; (80046f8 <UART_SetConfig+0x38c>)
 8004548:	fba3 1302 	umull	r1, r3, r3, r2
 800454c:	095b      	lsrs	r3, r3, #5
 800454e:	2164      	movs	r1, #100	; 0x64
 8004550:	fb01 f303 	mul.w	r3, r1, r3
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	3332      	adds	r3, #50	; 0x32
 800455a:	4a67      	ldr	r2, [pc, #412]	; (80046f8 <UART_SetConfig+0x38c>)
 800455c:	fba2 2303 	umull	r2, r3, r2, r3
 8004560:	095b      	lsrs	r3, r3, #5
 8004562:	f003 0207 	and.w	r2, r3, #7
 8004566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4432      	add	r2, r6
 800456c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800456e:	e0b9      	b.n	80046e4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004570:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004572:	461c      	mov	r4, r3
 8004574:	f04f 0500 	mov.w	r5, #0
 8004578:	4622      	mov	r2, r4
 800457a:	462b      	mov	r3, r5
 800457c:	1891      	adds	r1, r2, r2
 800457e:	6139      	str	r1, [r7, #16]
 8004580:	415b      	adcs	r3, r3
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004588:	1912      	adds	r2, r2, r4
 800458a:	eb45 0303 	adc.w	r3, r5, r3
 800458e:	f04f 0000 	mov.w	r0, #0
 8004592:	f04f 0100 	mov.w	r1, #0
 8004596:	00d9      	lsls	r1, r3, #3
 8004598:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800459c:	00d0      	lsls	r0, r2, #3
 800459e:	4602      	mov	r2, r0
 80045a0:	460b      	mov	r3, r1
 80045a2:	eb12 0804 	adds.w	r8, r2, r4
 80045a6:	eb43 0905 	adc.w	r9, r3, r5
 80045aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f04f 0100 	mov.w	r1, #0
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	f04f 0300 	mov.w	r3, #0
 80045bc:	008b      	lsls	r3, r1, #2
 80045be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80045c2:	0082      	lsls	r2, r0, #2
 80045c4:	4640      	mov	r0, r8
 80045c6:	4649      	mov	r1, r9
 80045c8:	f7fc f968 	bl	800089c <__aeabi_uldivmod>
 80045cc:	4602      	mov	r2, r0
 80045ce:	460b      	mov	r3, r1
 80045d0:	4b49      	ldr	r3, [pc, #292]	; (80046f8 <UART_SetConfig+0x38c>)
 80045d2:	fba3 2302 	umull	r2, r3, r3, r2
 80045d6:	095b      	lsrs	r3, r3, #5
 80045d8:	011e      	lsls	r6, r3, #4
 80045da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045dc:	4618      	mov	r0, r3
 80045de:	f04f 0100 	mov.w	r1, #0
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	1894      	adds	r4, r2, r2
 80045e8:	60bc      	str	r4, [r7, #8]
 80045ea:	415b      	adcs	r3, r3
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045f2:	1812      	adds	r2, r2, r0
 80045f4:	eb41 0303 	adc.w	r3, r1, r3
 80045f8:	f04f 0400 	mov.w	r4, #0
 80045fc:	f04f 0500 	mov.w	r5, #0
 8004600:	00dd      	lsls	r5, r3, #3
 8004602:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004606:	00d4      	lsls	r4, r2, #3
 8004608:	4622      	mov	r2, r4
 800460a:	462b      	mov	r3, r5
 800460c:	1814      	adds	r4, r2, r0
 800460e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004610:	414b      	adcs	r3, r1
 8004612:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	4618      	mov	r0, r3
 800461a:	f04f 0100 	mov.w	r1, #0
 800461e:	f04f 0200 	mov.w	r2, #0
 8004622:	f04f 0300 	mov.w	r3, #0
 8004626:	008b      	lsls	r3, r1, #2
 8004628:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800462c:	0082      	lsls	r2, r0, #2
 800462e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004632:	f7fc f933 	bl	800089c <__aeabi_uldivmod>
 8004636:	4602      	mov	r2, r0
 8004638:	460b      	mov	r3, r1
 800463a:	4b2f      	ldr	r3, [pc, #188]	; (80046f8 <UART_SetConfig+0x38c>)
 800463c:	fba3 1302 	umull	r1, r3, r3, r2
 8004640:	095b      	lsrs	r3, r3, #5
 8004642:	2164      	movs	r1, #100	; 0x64
 8004644:	fb01 f303 	mul.w	r3, r1, r3
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	3332      	adds	r3, #50	; 0x32
 800464e:	4a2a      	ldr	r2, [pc, #168]	; (80046f8 <UART_SetConfig+0x38c>)
 8004650:	fba2 2303 	umull	r2, r3, r2, r3
 8004654:	095b      	lsrs	r3, r3, #5
 8004656:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800465a:	441e      	add	r6, r3
 800465c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800465e:	4618      	mov	r0, r3
 8004660:	f04f 0100 	mov.w	r1, #0
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	1894      	adds	r4, r2, r2
 800466a:	603c      	str	r4, [r7, #0]
 800466c:	415b      	adcs	r3, r3
 800466e:	607b      	str	r3, [r7, #4]
 8004670:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004674:	1812      	adds	r2, r2, r0
 8004676:	eb41 0303 	adc.w	r3, r1, r3
 800467a:	f04f 0400 	mov.w	r4, #0
 800467e:	f04f 0500 	mov.w	r5, #0
 8004682:	00dd      	lsls	r5, r3, #3
 8004684:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004688:	00d4      	lsls	r4, r2, #3
 800468a:	4622      	mov	r2, r4
 800468c:	462b      	mov	r3, r5
 800468e:	eb12 0a00 	adds.w	sl, r2, r0
 8004692:	eb43 0b01 	adc.w	fp, r3, r1
 8004696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	4618      	mov	r0, r3
 800469c:	f04f 0100 	mov.w	r1, #0
 80046a0:	f04f 0200 	mov.w	r2, #0
 80046a4:	f04f 0300 	mov.w	r3, #0
 80046a8:	008b      	lsls	r3, r1, #2
 80046aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80046ae:	0082      	lsls	r2, r0, #2
 80046b0:	4650      	mov	r0, sl
 80046b2:	4659      	mov	r1, fp
 80046b4:	f7fc f8f2 	bl	800089c <__aeabi_uldivmod>
 80046b8:	4602      	mov	r2, r0
 80046ba:	460b      	mov	r3, r1
 80046bc:	4b0e      	ldr	r3, [pc, #56]	; (80046f8 <UART_SetConfig+0x38c>)
 80046be:	fba3 1302 	umull	r1, r3, r3, r2
 80046c2:	095b      	lsrs	r3, r3, #5
 80046c4:	2164      	movs	r1, #100	; 0x64
 80046c6:	fb01 f303 	mul.w	r3, r1, r3
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	3332      	adds	r3, #50	; 0x32
 80046d0:	4a09      	ldr	r2, [pc, #36]	; (80046f8 <UART_SetConfig+0x38c>)
 80046d2:	fba2 2303 	umull	r2, r3, r2, r3
 80046d6:	095b      	lsrs	r3, r3, #5
 80046d8:	f003 020f 	and.w	r2, r3, #15
 80046dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4432      	add	r2, r6
 80046e2:	609a      	str	r2, [r3, #8]
}
 80046e4:	bf00      	nop
 80046e6:	377c      	adds	r7, #124	; 0x7c
 80046e8:	46bd      	mov	sp, r7
 80046ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046ee:	bf00      	nop
 80046f0:	40011000 	.word	0x40011000
 80046f4:	40011400 	.word	0x40011400
 80046f8:	51eb851f 	.word	0x51eb851f

080046fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046fc:	b084      	sub	sp, #16
 80046fe:	b580      	push	{r7, lr}
 8004700:	b084      	sub	sp, #16
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
 8004706:	f107 001c 	add.w	r0, r7, #28
 800470a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800470e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004710:	2b01      	cmp	r3, #1
 8004712:	d122      	bne.n	800475a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004718:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800473c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800473e:	2b01      	cmp	r3, #1
 8004740:	d105      	bne.n	800474e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f9a0 	bl	8004a94 <USB_CoreReset>
 8004754:	4603      	mov	r3, r0
 8004756:	73fb      	strb	r3, [r7, #15]
 8004758:	e01a      	b.n	8004790 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f994 	bl	8004a94 <USB_CoreReset>
 800476c:	4603      	mov	r3, r0
 800476e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004772:	2b00      	cmp	r3, #0
 8004774:	d106      	bne.n	8004784 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	639a      	str	r2, [r3, #56]	; 0x38
 8004782:	e005      	b.n	8004790 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004788:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004792:	2b01      	cmp	r3, #1
 8004794:	d10b      	bne.n	80047ae <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f043 0206 	orr.w	r2, r3, #6
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f043 0220 	orr.w	r2, r3, #32
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80047ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047ba:	b004      	add	sp, #16
 80047bc:	4770      	bx	lr

080047be <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f043 0201 	orr.w	r2, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f023 0201 	bic.w	r2, r3, #1
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b084      	sub	sp, #16
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	460b      	mov	r3, r1
 800480c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800481e:	78fb      	ldrb	r3, [r7, #3]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d115      	bne.n	8004850 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004830:	2001      	movs	r0, #1
 8004832:	f7fc ffa7 	bl	8001784 <HAL_Delay>
      ms++;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	3301      	adds	r3, #1
 800483a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 f91a 	bl	8004a76 <USB_GetMode>
 8004842:	4603      	mov	r3, r0
 8004844:	2b01      	cmp	r3, #1
 8004846:	d01e      	beq.n	8004886 <USB_SetCurrentMode+0x84>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2b31      	cmp	r3, #49	; 0x31
 800484c:	d9f0      	bls.n	8004830 <USB_SetCurrentMode+0x2e>
 800484e:	e01a      	b.n	8004886 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004850:	78fb      	ldrb	r3, [r7, #3]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d115      	bne.n	8004882 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004862:	2001      	movs	r0, #1
 8004864:	f7fc ff8e 	bl	8001784 <HAL_Delay>
      ms++;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	3301      	adds	r3, #1
 800486c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f901 	bl	8004a76 <USB_GetMode>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d005      	beq.n	8004886 <USB_SetCurrentMode+0x84>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2b31      	cmp	r3, #49	; 0x31
 800487e:	d9f0      	bls.n	8004862 <USB_SetCurrentMode+0x60>
 8004880:	e001      	b.n	8004886 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e005      	b.n	8004892 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2b32      	cmp	r3, #50	; 0x32
 800488a:	d101      	bne.n	8004890 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e000      	b.n	8004892 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
	...

0800489c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	019b      	lsls	r3, r3, #6
 80048ae:	f043 0220 	orr.w	r2, r3, #32
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	3301      	adds	r3, #1
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	4a08      	ldr	r2, [pc, #32]	; (80048e0 <USB_FlushTxFifo+0x44>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d901      	bls.n	80048c6 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e006      	b.n	80048d4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	f003 0320 	and.w	r3, r3, #32
 80048ce:	2b20      	cmp	r3, #32
 80048d0:	d0f1      	beq.n	80048b6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	00030d40 	.word	0x00030d40

080048e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048ec:	2300      	movs	r3, #0
 80048ee:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2210      	movs	r2, #16
 80048f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	3301      	adds	r3, #1
 80048fa:	60fb      	str	r3, [r7, #12]
 80048fc:	4a08      	ldr	r2, [pc, #32]	; (8004920 <USB_FlushRxFifo+0x3c>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d901      	bls.n	8004906 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e006      	b.n	8004914 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f003 0310 	and.w	r3, r3, #16
 800490e:	2b10      	cmp	r3, #16
 8004910:	d0f1      	beq.n	80048f6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	00030d40 	.word	0x00030d40

08004924 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004924:	b480      	push	{r7}
 8004926:	b089      	sub	sp, #36	; 0x24
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	4611      	mov	r1, r2
 8004930:	461a      	mov	r2, r3
 8004932:	460b      	mov	r3, r1
 8004934:	71fb      	strb	r3, [r7, #7]
 8004936:	4613      	mov	r3, r2
 8004938:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004942:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004946:	2b00      	cmp	r3, #0
 8004948:	d123      	bne.n	8004992 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800494a:	88bb      	ldrh	r3, [r7, #4]
 800494c:	3303      	adds	r3, #3
 800494e:	089b      	lsrs	r3, r3, #2
 8004950:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004952:	2300      	movs	r3, #0
 8004954:	61bb      	str	r3, [r7, #24]
 8004956:	e018      	b.n	800498a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004958:	79fb      	ldrb	r3, [r7, #7]
 800495a:	031a      	lsls	r2, r3, #12
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	4413      	add	r3, r2
 8004960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004964:	461a      	mov	r2, r3
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	3301      	adds	r3, #1
 8004970:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	3301      	adds	r3, #1
 8004976:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	3301      	adds	r3, #1
 800497c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	3301      	adds	r3, #1
 8004982:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	3301      	adds	r3, #1
 8004988:	61bb      	str	r3, [r7, #24]
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	429a      	cmp	r2, r3
 8004990:	d3e2      	bcc.n	8004958 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3724      	adds	r7, #36	; 0x24
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b08b      	sub	sp, #44	; 0x2c
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	4613      	mov	r3, r2
 80049ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80049b6:	88fb      	ldrh	r3, [r7, #6]
 80049b8:	089b      	lsrs	r3, r3, #2
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80049be:	88fb      	ldrh	r3, [r7, #6]
 80049c0:	f003 0303 	and.w	r3, r3, #3
 80049c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80049c6:	2300      	movs	r3, #0
 80049c8:	623b      	str	r3, [r7, #32]
 80049ca:	e014      	b.n	80049f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	3301      	adds	r3, #1
 80049dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	3301      	adds	r3, #1
 80049e2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	3301      	adds	r3, #1
 80049e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	3301      	adds	r3, #1
 80049ee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	3301      	adds	r3, #1
 80049f4:	623b      	str	r3, [r7, #32]
 80049f6:	6a3a      	ldr	r2, [r7, #32]
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d3e6      	bcc.n	80049cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80049fe:	8bfb      	ldrh	r3, [r7, #30]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d01e      	beq.n	8004a42 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a0e:	461a      	mov	r2, r3
 8004a10:	f107 0310 	add.w	r3, r7, #16
 8004a14:	6812      	ldr	r2, [r2, #0]
 8004a16:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	fa22 f303 	lsr.w	r3, r2, r3
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	701a      	strb	r2, [r3, #0]
      i++;
 8004a2a:	6a3b      	ldr	r3, [r7, #32]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	3301      	adds	r3, #1
 8004a34:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004a36:	8bfb      	ldrh	r3, [r7, #30]
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004a3c:	8bfb      	ldrh	r3, [r7, #30]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1ea      	bne.n	8004a18 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	372c      	adds	r7, #44	; 0x2c
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	4013      	ands	r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004a68:	68fb      	ldr	r3, [r7, #12]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	f003 0301 	and.w	r3, r3, #1
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
	...

08004a94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	4a13      	ldr	r2, [pc, #76]	; (8004af4 <USB_CoreReset+0x60>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d901      	bls.n	8004ab0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e01a      	b.n	8004ae6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	daf3      	bge.n	8004aa0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	f043 0201 	orr.w	r2, r3, #1
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	3301      	adds	r3, #1
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	4a09      	ldr	r2, [pc, #36]	; (8004af4 <USB_CoreReset+0x60>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d901      	bls.n	8004ad8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e006      	b.n	8004ae6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d0f1      	beq.n	8004ac8 <USB_CoreReset+0x34>

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	00030d40 	.word	0x00030d40

08004af8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004af8:	b084      	sub	sp, #16
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b084      	sub	sp, #16
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	f107 001c 	add.w	r0, r7, #28
 8004b06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b14:	461a      	mov	r2, r3
 8004b16:	2300      	movs	r3, #0
 8004b18:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b36:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d018      	beq.n	8004b7c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d10a      	bne.n	8004b66 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b5e:	f043 0304 	orr.w	r3, r3, #4
 8004b62:	6013      	str	r3, [r2, #0]
 8004b64:	e014      	b.n	8004b90 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b74:	f023 0304 	bic.w	r3, r3, #4
 8004b78:	6013      	str	r3, [r2, #0]
 8004b7a:	e009      	b.n	8004b90 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b8a:	f023 0304 	bic.w	r3, r3, #4
 8004b8e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004b90:	2110      	movs	r1, #16
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7ff fe82 	bl	800489c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7ff fea3 	bl	80048e4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	e015      	b.n	8004bd0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bb6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	015a      	lsls	r2, r3, #5
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	60fb      	str	r3, [r7, #12]
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d3e5      	bcc.n	8004ba4 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004be4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00b      	beq.n	8004c0a <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bf8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a13      	ldr	r2, [pc, #76]	; (8004c4c <USB_HostInit+0x154>)
 8004bfe:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a13      	ldr	r2, [pc, #76]	; (8004c50 <USB_HostInit+0x158>)
 8004c04:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004c08:	e009      	b.n	8004c1e <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2280      	movs	r2, #128	; 0x80
 8004c0e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a10      	ldr	r2, [pc, #64]	; (8004c54 <USB_HostInit+0x15c>)
 8004c14:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a0f      	ldr	r2, [pc, #60]	; (8004c58 <USB_HostInit+0x160>)
 8004c1a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d105      	bne.n	8004c30 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	f043 0210 	orr.w	r2, r3, #16
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	699a      	ldr	r2, [r3, #24]
 8004c34:	4b09      	ldr	r3, [pc, #36]	; (8004c5c <USB_HostInit+0x164>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c48:	b004      	add	sp, #16
 8004c4a:	4770      	bx	lr
 8004c4c:	01000200 	.word	0x01000200
 8004c50:	00e00300 	.word	0x00e00300
 8004c54:	00600080 	.word	0x00600080
 8004c58:	004000e0 	.word	0x004000e0
 8004c5c:	a3200008 	.word	0xa3200008

08004c60 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	460b      	mov	r3, r1
 8004c6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c7e:	f023 0303 	bic.w	r3, r3, #3
 8004c82:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	78fb      	ldrb	r3, [r7, #3]
 8004c8e:	f003 0303 	and.w	r3, r3, #3
 8004c92:	68f9      	ldr	r1, [r7, #12]
 8004c94:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004c9c:	78fb      	ldrb	r3, [r7, #3]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d107      	bne.n	8004cb2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ca8:	461a      	mov	r2, r3
 8004caa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004cae:	6053      	str	r3, [r2, #4]
 8004cb0:	e009      	b.n	8004cc6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004cb2:	78fb      	ldrb	r3, [r7, #3]
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d106      	bne.n	8004cc6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	f241 7370 	movw	r3, #6000	; 0x1770
 8004cc4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3714      	adds	r7, #20
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004cf4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d02:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004d04:	2064      	movs	r0, #100	; 0x64
 8004d06:	f7fc fd3d 	bl	8001784 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004d12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d16:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004d18:	200a      	movs	r0, #10
 8004d1a:	f7fc fd33 	bl	8001784 <HAL_Delay>

  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	460b      	mov	r3, r1
 8004d32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004d4c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d109      	bne.n	8004d6c <USB_DriveVbus+0x44>
 8004d58:	78fb      	ldrb	r3, [r7, #3]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d106      	bne.n	8004d6c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004d66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d6a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d76:	d109      	bne.n	8004d8c <USB_DriveVbus+0x64>
 8004d78:	78fb      	ldrb	r3, [r7, #3]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d106      	bne.n	8004d8c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004d86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d8a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b085      	sub	sp, #20
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004da6:	2300      	movs	r3, #0
 8004da8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	0c5b      	lsrs	r3, r3, #17
 8004db8:	f003 0303 	and.w	r3, r3, #3
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3714      	adds	r7, #20
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	b29b      	uxth	r3, r3
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
	...

08004dec <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b088      	sub	sp, #32
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	4608      	mov	r0, r1
 8004df6:	4611      	mov	r1, r2
 8004df8:	461a      	mov	r2, r3
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	70fb      	strb	r3, [r7, #3]
 8004dfe:	460b      	mov	r3, r1
 8004e00:	70bb      	strb	r3, [r7, #2]
 8004e02:	4613      	mov	r3, r2
 8004e04:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004e0e:	78fb      	ldrb	r3, [r7, #3]
 8004e10:	015a      	lsls	r2, r3, #5
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	4413      	add	r3, r2
 8004e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e20:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004e22:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004e26:	2b03      	cmp	r3, #3
 8004e28:	d87e      	bhi.n	8004f28 <USB_HC_Init+0x13c>
 8004e2a:	a201      	add	r2, pc, #4	; (adr r2, 8004e30 <USB_HC_Init+0x44>)
 8004e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e30:	08004e41 	.word	0x08004e41
 8004e34:	08004eeb 	.word	0x08004eeb
 8004e38:	08004e41 	.word	0x08004e41
 8004e3c:	08004ead 	.word	0x08004ead
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e40:	78fb      	ldrb	r3, [r7, #3]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	f240 439d 	movw	r3, #1181	; 0x49d
 8004e52:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004e54:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	da10      	bge.n	8004e7e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004e5c:	78fb      	ldrb	r3, [r7, #3]
 8004e5e:	015a      	lsls	r2, r3, #5
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	78fa      	ldrb	r2, [r7, #3]
 8004e6c:	0151      	lsls	r1, r2, #5
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	440a      	add	r2, r1
 8004e72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e7a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004e7c:	e057      	b.n	8004f2e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d051      	beq.n	8004f2e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004e8a:	78fb      	ldrb	r3, [r7, #3]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	78fa      	ldrb	r2, [r7, #3]
 8004e9a:	0151      	lsls	r1, r2, #5
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	440a      	add	r2, r1
 8004ea0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ea4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004ea8:	60d3      	str	r3, [r2, #12]
      break;
 8004eaa:	e040      	b.n	8004f2e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004eac:	78fb      	ldrb	r3, [r7, #3]
 8004eae:	015a      	lsls	r2, r3, #5
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb8:	461a      	mov	r2, r3
 8004eba:	f240 639d 	movw	r3, #1693	; 0x69d
 8004ebe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004ec0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	da34      	bge.n	8004f32 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004ec8:	78fb      	ldrb	r3, [r7, #3]
 8004eca:	015a      	lsls	r2, r3, #5
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	4413      	add	r3, r2
 8004ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	78fa      	ldrb	r2, [r7, #3]
 8004ed8:	0151      	lsls	r1, r2, #5
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	440a      	add	r2, r1
 8004ede:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ee6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004ee8:	e023      	b.n	8004f32 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004eea:	78fb      	ldrb	r3, [r7, #3]
 8004eec:	015a      	lsls	r2, r3, #5
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	f240 2325 	movw	r3, #549	; 0x225
 8004efc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004efe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	da17      	bge.n	8004f36 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004f06:	78fb      	ldrb	r3, [r7, #3]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	78fa      	ldrb	r2, [r7, #3]
 8004f16:	0151      	lsls	r1, r2, #5
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	440a      	add	r2, r1
 8004f1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f20:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004f24:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004f26:	e006      	b.n	8004f36 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	77fb      	strb	r3, [r7, #31]
      break;
 8004f2c:	e004      	b.n	8004f38 <USB_HC_Init+0x14c>
      break;
 8004f2e:	bf00      	nop
 8004f30:	e002      	b.n	8004f38 <USB_HC_Init+0x14c>
      break;
 8004f32:	bf00      	nop
 8004f34:	e000      	b.n	8004f38 <USB_HC_Init+0x14c>
      break;
 8004f36:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f3e:	699a      	ldr	r2, [r3, #24]
 8004f40:	78fb      	ldrb	r3, [r7, #3]
 8004f42:	f003 030f 	and.w	r3, r3, #15
 8004f46:	2101      	movs	r1, #1
 8004f48:	fa01 f303 	lsl.w	r3, r1, r3
 8004f4c:	6939      	ldr	r1, [r7, #16]
 8004f4e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004f52:	4313      	orrs	r3, r2
 8004f54:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004f62:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	da03      	bge.n	8004f72 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f6e:	61bb      	str	r3, [r7, #24]
 8004f70:	e001      	b.n	8004f76 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004f72:	2300      	movs	r3, #0
 8004f74:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7ff ff0f 	bl	8004d9a <USB_GetHostSpeed>
 8004f7c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004f7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d106      	bne.n	8004f94 <USB_HC_Init+0x1a8>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d003      	beq.n	8004f94 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004f8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f90:	617b      	str	r3, [r7, #20]
 8004f92:	e001      	b.n	8004f98 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004f94:	2300      	movs	r3, #0
 8004f96:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f98:	787b      	ldrb	r3, [r7, #1]
 8004f9a:	059b      	lsls	r3, r3, #22
 8004f9c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004fa0:	78bb      	ldrb	r3, [r7, #2]
 8004fa2:	02db      	lsls	r3, r3, #11
 8004fa4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004fa8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004faa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004fae:	049b      	lsls	r3, r3, #18
 8004fb0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004fb4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004fb6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004fb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004fbc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004fc2:	78fb      	ldrb	r3, [r7, #3]
 8004fc4:	0159      	lsls	r1, r3, #5
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	440b      	add	r3, r1
 8004fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fce:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004fd4:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004fd6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004fda:	2b03      	cmp	r3, #3
 8004fdc:	d10f      	bne.n	8004ffe <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004fde:	78fb      	ldrb	r3, [r7, #3]
 8004fe0:	015a      	lsls	r2, r3, #5
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	78fa      	ldrb	r2, [r7, #3]
 8004fee:	0151      	lsls	r1, r2, #5
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	440a      	add	r2, r1
 8004ff4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ff8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ffc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004ffe:	7ffb      	ldrb	r3, [r7, #31]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3720      	adds	r7, #32
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b08c      	sub	sp, #48	; 0x30
 800500c:	af02      	add	r7, sp, #8
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	4613      	mov	r3, r2
 8005014:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	785b      	ldrb	r3, [r3, #1]
 800501e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005020:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005024:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800502a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502e:	2b00      	cmp	r3, #0
 8005030:	d02d      	beq.n	800508e <USB_HC_StartXfer+0x86>
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	791b      	ldrb	r3, [r3, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d129      	bne.n	800508e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800503a:	79fb      	ldrb	r3, [r7, #7]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d117      	bne.n	8005070 <USB_HC_StartXfer+0x68>
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	79db      	ldrb	r3, [r3, #7]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d003      	beq.n	8005050 <USB_HC_StartXfer+0x48>
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	79db      	ldrb	r3, [r3, #7]
 800504c:	2b02      	cmp	r3, #2
 800504e:	d10f      	bne.n	8005070 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	6a3b      	ldr	r3, [r7, #32]
 8005056:	4413      	add	r3, r2
 8005058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	69fa      	ldr	r2, [r7, #28]
 8005060:	0151      	lsls	r1, r2, #5
 8005062:	6a3a      	ldr	r2, [r7, #32]
 8005064:	440a      	add	r2, r1
 8005066:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800506a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005070:	79fb      	ldrb	r3, [r7, #7]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10b      	bne.n	800508e <USB_HC_StartXfer+0x86>
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	795b      	ldrb	r3, [r3, #5]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d107      	bne.n	800508e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	785b      	ldrb	r3, [r3, #1]
 8005082:	4619      	mov	r1, r3
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f000 fa2f 	bl	80054e8 <USB_DoPing>
      return HAL_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	e0f8      	b.n	8005280 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d018      	beq.n	80050c8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	8912      	ldrh	r2, [r2, #8]
 800509e:	4413      	add	r3, r2
 80050a0:	3b01      	subs	r3, #1
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	8912      	ldrh	r2, [r2, #8]
 80050a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80050aa:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80050ac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80050ae:	8b7b      	ldrh	r3, [r7, #26]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d90b      	bls.n	80050cc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80050b4:	8b7b      	ldrh	r3, [r7, #26]
 80050b6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80050b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	8912      	ldrh	r2, [r2, #8]
 80050be:	fb02 f203 	mul.w	r2, r2, r3
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	611a      	str	r2, [r3, #16]
 80050c6:	e001      	b.n	80050cc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80050c8:	2301      	movs	r3, #1
 80050ca:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	78db      	ldrb	r3, [r3, #3]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d007      	beq.n	80050e4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80050d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	8912      	ldrh	r2, [r2, #8]
 80050da:	fb02 f203 	mul.w	r2, r2, r3
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	611a      	str	r2, [r3, #16]
 80050e2:	e003      	b.n	80050ec <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	695a      	ldr	r2, [r3, #20]
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80050f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80050f6:	04d9      	lsls	r1, r3, #19
 80050f8:	4b63      	ldr	r3, [pc, #396]	; (8005288 <USB_HC_StartXfer+0x280>)
 80050fa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80050fc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	7a9b      	ldrb	r3, [r3, #10]
 8005102:	075b      	lsls	r3, r3, #29
 8005104:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005108:	69f9      	ldr	r1, [r7, #28]
 800510a:	0148      	lsls	r0, r1, #5
 800510c:	6a39      	ldr	r1, [r7, #32]
 800510e:	4401      	add	r1, r0
 8005110:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005114:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005116:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005118:	79fb      	ldrb	r3, [r7, #7]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d009      	beq.n	8005132 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	68d9      	ldr	r1, [r3, #12]
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	6a3b      	ldr	r3, [r7, #32]
 8005128:	4413      	add	r3, r2
 800512a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800512e:	460a      	mov	r2, r1
 8005130:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b00      	cmp	r3, #0
 8005140:	bf0c      	ite	eq
 8005142:	2301      	moveq	r3, #1
 8005144:	2300      	movne	r3, #0
 8005146:	b2db      	uxtb	r3, r3
 8005148:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	015a      	lsls	r2, r3, #5
 800514e:	6a3b      	ldr	r3, [r7, #32]
 8005150:	4413      	add	r3, r2
 8005152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	69fa      	ldr	r2, [r7, #28]
 800515a:	0151      	lsls	r1, r2, #5
 800515c:	6a3a      	ldr	r2, [r7, #32]
 800515e:	440a      	add	r2, r1
 8005160:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005164:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005168:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	015a      	lsls	r2, r3, #5
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	4413      	add	r3, r2
 8005172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	7e7b      	ldrb	r3, [r7, #25]
 800517a:	075b      	lsls	r3, r3, #29
 800517c:	69f9      	ldr	r1, [r7, #28]
 800517e:	0148      	lsls	r0, r1, #5
 8005180:	6a39      	ldr	r1, [r7, #32]
 8005182:	4401      	add	r1, r0
 8005184:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005188:	4313      	orrs	r3, r2
 800518a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	6a3b      	ldr	r3, [r7, #32]
 8005192:	4413      	add	r3, r2
 8005194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051a2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	78db      	ldrb	r3, [r3, #3]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d004      	beq.n	80051b6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051b2:	613b      	str	r3, [r7, #16]
 80051b4:	e003      	b.n	80051be <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051bc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051c4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d2:	461a      	mov	r2, r3
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80051d8:	79fb      	ldrb	r3, [r7, #7]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80051de:	2300      	movs	r3, #0
 80051e0:	e04e      	b.n	8005280 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	78db      	ldrb	r3, [r3, #3]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d149      	bne.n	800527e <USB_HC_StartXfer+0x276>
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d045      	beq.n	800527e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	79db      	ldrb	r3, [r3, #7]
 80051f6:	2b03      	cmp	r3, #3
 80051f8:	d830      	bhi.n	800525c <USB_HC_StartXfer+0x254>
 80051fa:	a201      	add	r2, pc, #4	; (adr r2, 8005200 <USB_HC_StartXfer+0x1f8>)
 80051fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005200:	08005211 	.word	0x08005211
 8005204:	08005235 	.word	0x08005235
 8005208:	08005211 	.word	0x08005211
 800520c:	08005235 	.word	0x08005235
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	3303      	adds	r3, #3
 8005216:	089b      	lsrs	r3, r3, #2
 8005218:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800521a:	8afa      	ldrh	r2, [r7, #22]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005220:	b29b      	uxth	r3, r3
 8005222:	429a      	cmp	r2, r3
 8005224:	d91c      	bls.n	8005260 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	f043 0220 	orr.w	r2, r3, #32
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	619a      	str	r2, [r3, #24]
        }
        break;
 8005232:	e015      	b.n	8005260 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	3303      	adds	r3, #3
 800523a:	089b      	lsrs	r3, r3, #2
 800523c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800523e:	8afa      	ldrh	r2, [r7, #22]
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	b29b      	uxth	r3, r3
 800524a:	429a      	cmp	r2, r3
 800524c:	d90a      	bls.n	8005264 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	619a      	str	r2, [r3, #24]
        }
        break;
 800525a:	e003      	b.n	8005264 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800525c:	bf00      	nop
 800525e:	e002      	b.n	8005266 <USB_HC_StartXfer+0x25e>
        break;
 8005260:	bf00      	nop
 8005262:	e000      	b.n	8005266 <USB_HC_StartXfer+0x25e>
        break;
 8005264:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	68d9      	ldr	r1, [r3, #12]
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	785a      	ldrb	r2, [r3, #1]
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	b29b      	uxth	r3, r3
 8005274:	2000      	movs	r0, #0
 8005276:	9000      	str	r0, [sp, #0]
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f7ff fb53 	bl	8004924 <USB_WritePacket>
  }

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3728      	adds	r7, #40	; 0x28
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	1ff80000 	.word	0x1ff80000

0800528c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	b29b      	uxth	r3, r3
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b089      	sub	sp, #36	; 0x24
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
 80052b6:	460b      	mov	r3, r1
 80052b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80052be:	78fb      	ldrb	r3, [r7, #3]
 80052c0:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80052c2:	2300      	movs	r3, #0
 80052c4:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	0c9b      	lsrs	r3, r3, #18
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	015a      	lsls	r2, r3, #5
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	0fdb      	lsrs	r3, r3, #31
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f003 0320 	and.w	r3, r3, #32
 80052fa:	2b20      	cmp	r3, #32
 80052fc:	d104      	bne.n	8005308 <USB_HC_Halt+0x5a>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d101      	bne.n	8005308 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005304:	2300      	movs	r3, #0
 8005306:	e0e8      	b.n	80054da <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d002      	beq.n	8005314 <USB_HC_Halt+0x66>
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	2b02      	cmp	r3, #2
 8005312:	d173      	bne.n	80053fc <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	4413      	add	r3, r2
 800531c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	0151      	lsls	r1, r2, #5
 8005326:	69ba      	ldr	r2, [r7, #24]
 8005328:	440a      	add	r2, r1
 800532a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800532e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005332:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f003 0320 	and.w	r3, r3, #32
 800533c:	2b00      	cmp	r3, #0
 800533e:	f040 80cb 	bne.w	80054d8 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005346:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d143      	bne.n	80053d6 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	4413      	add	r3, r2
 8005356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	0151      	lsls	r1, r2, #5
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	440a      	add	r2, r1
 8005364:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005368:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800536c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	015a      	lsls	r2, r3, #5
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	4413      	add	r3, r2
 8005376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	0151      	lsls	r1, r2, #5
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	440a      	add	r2, r1
 8005384:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005388:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800538c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	4413      	add	r3, r2
 8005396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	0151      	lsls	r1, r2, #5
 80053a0:	69ba      	ldr	r2, [r7, #24]
 80053a2:	440a      	add	r2, r1
 80053a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053ac:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	3301      	adds	r3, #1
 80053b2:	61fb      	str	r3, [r7, #28]
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053ba:	d81d      	bhi.n	80053f8 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053d2:	d0ec      	beq.n	80053ae <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80053d4:	e080      	b.n	80054d8 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	0151      	lsls	r1, r2, #5
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	440a      	add	r2, r1
 80053ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053f4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80053f6:	e06f      	b.n	80054d8 <USB_HC_Halt+0x22a>
            break;
 80053f8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80053fa:	e06d      	b.n	80054d8 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	015a      	lsls	r2, r3, #5
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	4413      	add	r3, r2
 8005404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	0151      	lsls	r1, r2, #5
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	440a      	add	r2, r1
 8005412:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005416:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800541a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d143      	bne.n	80054b4 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	4413      	add	r3, r2
 8005434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	0151      	lsls	r1, r2, #5
 800543e:	69ba      	ldr	r2, [r7, #24]
 8005440:	440a      	add	r2, r1
 8005442:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005446:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800544a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	4413      	add	r3, r2
 8005454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	0151      	lsls	r1, r2, #5
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	440a      	add	r2, r1
 8005462:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005466:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800546a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	4413      	add	r3, r2
 8005474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	0151      	lsls	r1, r2, #5
 800547e:	69ba      	ldr	r2, [r7, #24]
 8005480:	440a      	add	r2, r1
 8005482:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005486:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800548a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	3301      	adds	r3, #1
 8005490:	61fb      	str	r3, [r7, #28]
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005498:	d81d      	bhi.n	80054d6 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054b0:	d0ec      	beq.n	800548c <USB_HC_Halt+0x1de>
 80054b2:	e011      	b.n	80054d8 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	0151      	lsls	r1, r2, #5
 80054c6:	69ba      	ldr	r2, [r7, #24]
 80054c8:	440a      	add	r2, r1
 80054ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054d2:	6013      	str	r3, [r2, #0]
 80054d4:	e000      	b.n	80054d8 <USB_HC_Halt+0x22a>
          break;
 80054d6:	bf00      	nop
    }
  }

  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3724      	adds	r7, #36	; 0x24
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
	...

080054e8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	460b      	mov	r3, r1
 80054f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80054f8:	78fb      	ldrb	r3, [r7, #3]
 80054fa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80054fc:	2301      	movs	r3, #1
 80054fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	04da      	lsls	r2, r3, #19
 8005504:	4b15      	ldr	r3, [pc, #84]	; (800555c <USB_DoPing+0x74>)
 8005506:	4013      	ands	r3, r2
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	0151      	lsls	r1, r2, #5
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	440a      	add	r2, r1
 8005510:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005514:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005518:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	4413      	add	r3, r2
 8005522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005530:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005538:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	4413      	add	r3, r2
 8005542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005546:	461a      	mov	r2, r3
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	371c      	adds	r7, #28
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	1ff80000 	.word	0x1ff80000

08005560 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800556c:	2300      	movs	r3, #0
 800556e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7ff f935 	bl	80047e0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005576:	2110      	movs	r1, #16
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f7ff f98f 	bl	800489c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7ff f9b0 	bl	80048e4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005584:	2300      	movs	r3, #0
 8005586:	613b      	str	r3, [r7, #16]
 8005588:	e01f      	b.n	80055ca <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4413      	add	r3, r2
 8005592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055a0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055a8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055b0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	015a      	lsls	r2, r3, #5
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	4413      	add	r3, r2
 80055ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055be:	461a      	mov	r2, r3
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	3301      	adds	r3, #1
 80055c8:	613b      	str	r3, [r7, #16]
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	2b0f      	cmp	r3, #15
 80055ce:	d9dc      	bls.n	800558a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80055d0:	2300      	movs	r3, #0
 80055d2:	613b      	str	r3, [r7, #16]
 80055d4:	e034      	b.n	8005640 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	015a      	lsls	r2, r3, #5
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	4413      	add	r3, r2
 80055de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055ec:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055f4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055fc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	4413      	add	r3, r2
 8005606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800560a:	461a      	mov	r2, r3
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	3301      	adds	r3, #1
 8005614:	617b      	str	r3, [r7, #20]
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800561c:	d80c      	bhi.n	8005638 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	015a      	lsls	r2, r3, #5
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	4413      	add	r3, r2
 8005626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005630:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005634:	d0ec      	beq.n	8005610 <USB_StopHost+0xb0>
 8005636:	e000      	b.n	800563a <USB_StopHost+0xda>
        break;
 8005638:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	3301      	adds	r3, #1
 800563e:	613b      	str	r3, [r7, #16]
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	2b0f      	cmp	r3, #15
 8005644:	d9c7      	bls.n	80055d6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800564c:	461a      	mov	r2, r3
 800564e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005652:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800565a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f7ff f8ae 	bl	80047be <USB_EnableGlobalInt>

  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3718      	adds	r7, #24
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8005670:	4904      	ldr	r1, [pc, #16]	; (8005684 <MX_FATFS_Init+0x18>)
 8005672:	4805      	ldr	r0, [pc, #20]	; (8005688 <MX_FATFS_Init+0x1c>)
 8005674:	f005 fc06 	bl	800ae84 <FATFS_LinkDriver>
 8005678:	4603      	mov	r3, r0
 800567a:	461a      	mov	r2, r3
 800567c:	4b03      	ldr	r3, [pc, #12]	; (800568c <MX_FATFS_Init+0x20>)
 800567e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005680:	bf00      	nop
 8005682:	bd80      	pop	{r7, pc}
 8005684:	2000016c 	.word	0x2000016c
 8005688:	0800c4a8 	.word	0x0800c4a8
 800568c:	200005d0 	.word	0x200005d0

08005690 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005690:	b480      	push	{r7}
 8005692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005694:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005696:	4618      	mov	r0, r3
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	4603      	mov	r3, r0
 80056a8:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	4603      	mov	r3, r0
 80056c0:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80056c6:	79fb      	ldrb	r3, [r7, #7]
 80056c8:	4619      	mov	r1, r3
 80056ca:	4808      	ldr	r0, [pc, #32]	; (80056ec <USBH_status+0x34>)
 80056cc:	f000 fe1a 	bl	8006304 <USBH_MSC_UnitIsReady>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d002      	beq.n	80056dc <USBH_status+0x24>
  {
    res = RES_OK;
 80056d6:	2300      	movs	r3, #0
 80056d8:	73fb      	strb	r3, [r7, #15]
 80056da:	e001      	b.n	80056e0 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80056e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	200005d4 	.word	0x200005d4

080056f0 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b094      	sub	sp, #80	; 0x50
 80056f4:	af02      	add	r7, sp, #8
 80056f6:	60b9      	str	r1, [r7, #8]
 80056f8:	607a      	str	r2, [r7, #4]
 80056fa:	603b      	str	r3, [r7, #0]
 80056fc:	4603      	mov	r3, r0
 80056fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8005706:	7bf9      	ldrb	r1, [r7, #15]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	9300      	str	r3, [sp, #0]
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	4813      	ldr	r0, [pc, #76]	; (8005760 <USBH_read+0x70>)
 8005712:	f000 fe41 	bl	8006398 <USBH_MSC_Read>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d103      	bne.n	8005724 <USBH_read+0x34>
  {
    res = RES_OK;
 800571c:	2300      	movs	r3, #0
 800571e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005722:	e017      	b.n	8005754 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005724:	f107 0210 	add.w	r2, r7, #16
 8005728:	7bfb      	ldrb	r3, [r7, #15]
 800572a:	4619      	mov	r1, r3
 800572c:	480c      	ldr	r0, [pc, #48]	; (8005760 <USBH_read+0x70>)
 800572e:	f000 fe0f 	bl	8006350 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8005732:	7f7b      	ldrb	r3, [r7, #29]
 8005734:	2b3a      	cmp	r3, #58	; 0x3a
 8005736:	d005      	beq.n	8005744 <USBH_read+0x54>
 8005738:	2b3a      	cmp	r3, #58	; 0x3a
 800573a:	dc07      	bgt.n	800574c <USBH_read+0x5c>
 800573c:	2b04      	cmp	r3, #4
 800573e:	d001      	beq.n	8005744 <USBH_read+0x54>
 8005740:	2b28      	cmp	r3, #40	; 0x28
 8005742:	d103      	bne.n	800574c <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8005744:	2303      	movs	r3, #3
 8005746:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800574a:	e003      	b.n	8005754 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005752:	bf00      	nop
    }
  }

  return res;
 8005754:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005758:	4618      	mov	r0, r3
 800575a:	3748      	adds	r7, #72	; 0x48
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	200005d4 	.word	0x200005d4

08005764 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b094      	sub	sp, #80	; 0x50
 8005768:	af02      	add	r7, sp, #8
 800576a:	60b9      	str	r1, [r7, #8]
 800576c:	607a      	str	r2, [r7, #4]
 800576e:	603b      	str	r3, [r7, #0]
 8005770:	4603      	mov	r3, r0
 8005772:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800577a:	7bf9      	ldrb	r1, [r7, #15]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	4817      	ldr	r0, [pc, #92]	; (80057e4 <USBH_write+0x80>)
 8005786:	f000 fe70 	bl	800646a <USBH_MSC_Write>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d103      	bne.n	8005798 <USBH_write+0x34>
  {
    res = RES_OK;
 8005790:	2300      	movs	r3, #0
 8005792:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005796:	e01f      	b.n	80057d8 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005798:	f107 0210 	add.w	r2, r7, #16
 800579c:	7bfb      	ldrb	r3, [r7, #15]
 800579e:	4619      	mov	r1, r3
 80057a0:	4810      	ldr	r0, [pc, #64]	; (80057e4 <USBH_write+0x80>)
 80057a2:	f000 fdd5 	bl	8006350 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80057a6:	7f7b      	ldrb	r3, [r7, #29]
 80057a8:	2b3a      	cmp	r3, #58	; 0x3a
 80057aa:	d00d      	beq.n	80057c8 <USBH_write+0x64>
 80057ac:	2b3a      	cmp	r3, #58	; 0x3a
 80057ae:	dc0f      	bgt.n	80057d0 <USBH_write+0x6c>
 80057b0:	2b28      	cmp	r3, #40	; 0x28
 80057b2:	d009      	beq.n	80057c8 <USBH_write+0x64>
 80057b4:	2b28      	cmp	r3, #40	; 0x28
 80057b6:	dc0b      	bgt.n	80057d0 <USBH_write+0x6c>
 80057b8:	2b04      	cmp	r3, #4
 80057ba:	d005      	beq.n	80057c8 <USBH_write+0x64>
 80057bc:	2b27      	cmp	r3, #39	; 0x27
 80057be:	d107      	bne.n	80057d0 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80057c0:	2302      	movs	r3, #2
 80057c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80057c6:	e007      	b.n	80057d8 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 80057c8:	2303      	movs	r3, #3
 80057ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80057ce:	e003      	b.n	80057d8 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80057d6:	bf00      	nop
    }
  }

  return res;
 80057d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3748      	adds	r7, #72	; 0x48
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	200005d4 	.word	0x200005d4

080057e8 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b090      	sub	sp, #64	; 0x40
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	4603      	mov	r3, r0
 80057f0:	603a      	str	r2, [r7, #0]
 80057f2:	71fb      	strb	r3, [r7, #7]
 80057f4:	460b      	mov	r3, r1
 80057f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 80057fe:	79bb      	ldrb	r3, [r7, #6]
 8005800:	2b03      	cmp	r3, #3
 8005802:	d852      	bhi.n	80058aa <USBH_ioctl+0xc2>
 8005804:	a201      	add	r2, pc, #4	; (adr r2, 800580c <USBH_ioctl+0x24>)
 8005806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580a:	bf00      	nop
 800580c:	0800581d 	.word	0x0800581d
 8005810:	08005825 	.word	0x08005825
 8005814:	0800584f 	.word	0x0800584f
 8005818:	0800587b 	.word	0x0800587b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800581c:	2300      	movs	r3, #0
 800581e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005822:	e045      	b.n	80058b0 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005824:	f107 0208 	add.w	r2, r7, #8
 8005828:	79fb      	ldrb	r3, [r7, #7]
 800582a:	4619      	mov	r1, r3
 800582c:	4823      	ldr	r0, [pc, #140]	; (80058bc <USBH_ioctl+0xd4>)
 800582e:	f000 fd8f 	bl	8006350 <USBH_MSC_GetLUNInfo>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d106      	bne.n	8005846 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800583e:	2300      	movs	r3, #0
 8005840:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005844:	e034      	b.n	80058b0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800584c:	e030      	b.n	80058b0 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800584e:	f107 0208 	add.w	r2, r7, #8
 8005852:	79fb      	ldrb	r3, [r7, #7]
 8005854:	4619      	mov	r1, r3
 8005856:	4819      	ldr	r0, [pc, #100]	; (80058bc <USBH_ioctl+0xd4>)
 8005858:	f000 fd7a 	bl	8006350 <USBH_MSC_GetLUNInfo>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d107      	bne.n	8005872 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8005862:	8a3b      	ldrh	r3, [r7, #16]
 8005864:	461a      	mov	r2, r3
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800586a:	2300      	movs	r3, #0
 800586c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005870:	e01e      	b.n	80058b0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005878:	e01a      	b.n	80058b0 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800587a:	f107 0208 	add.w	r2, r7, #8
 800587e:	79fb      	ldrb	r3, [r7, #7]
 8005880:	4619      	mov	r1, r3
 8005882:	480e      	ldr	r0, [pc, #56]	; (80058bc <USBH_ioctl+0xd4>)
 8005884:	f000 fd64 	bl	8006350 <USBH_MSC_GetLUNInfo>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d109      	bne.n	80058a2 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800588e:	8a3b      	ldrh	r3, [r7, #16]
 8005890:	0a5b      	lsrs	r3, r3, #9
 8005892:	b29b      	uxth	r3, r3
 8005894:	461a      	mov	r2, r3
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800589a:	2300      	movs	r3, #0
 800589c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80058a0:	e006      	b.n	80058b0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80058a8:	e002      	b.n	80058b0 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 80058aa:	2304      	movs	r3, #4
 80058ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 80058b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3740      	adds	r7, #64	; 0x40
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	200005d4 	.word	0x200005d4

080058c0 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80058c0:	b590      	push	{r4, r7, lr}
 80058c2:	b089      	sub	sp, #36	; 0x24
 80058c4:	af04      	add	r7, sp, #16
 80058c6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058ce:	7919      	ldrb	r1, [r3, #4]
 80058d0:	2350      	movs	r3, #80	; 0x50
 80058d2:	2206      	movs	r2, #6
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f001 fc53 	bl	8007180 <USBH_FindInterface>
 80058da:	4603      	mov	r3, r0
 80058dc:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 80058de:	7bfb      	ldrb	r3, [r7, #15]
 80058e0:	2bff      	cmp	r3, #255	; 0xff
 80058e2:	d002      	beq.n	80058ea <USBH_MSC_InterfaceInit+0x2a>
 80058e4:	7bfb      	ldrb	r3, [r7, #15]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d901      	bls.n	80058ee <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80058ea:	2302      	movs	r3, #2
 80058ec:	e0ef      	b.n	8005ace <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 80058ee:	7bfb      	ldrb	r3, [r7, #15]
 80058f0:	4619      	mov	r1, r3
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f001 fc28 	bl	8007148 <USBH_SelectInterface>
 80058f8:	4603      	mov	r3, r0
 80058fa:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80058fc:	7bbb      	ldrb	r3, [r7, #14]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8005902:	2302      	movs	r3, #2
 8005904:	e0e3      	b.n	8005ace <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800590c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005910:	f005 fe4e 	bl	800b5b0 <malloc>
 8005914:	4603      	mov	r3, r0
 8005916:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800591e:	69db      	ldr	r3, [r3, #28]
 8005920:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d101      	bne.n	800592c <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8005928:	2302      	movs	r3, #2
 800592a:	e0d0      	b.n	8005ace <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800592c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005930:	2100      	movs	r1, #0
 8005932:	68b8      	ldr	r0, [r7, #8]
 8005934:	f005 fe5a 	bl	800b5ec <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005938:	7bfb      	ldrb	r3, [r7, #15]
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	211a      	movs	r1, #26
 800593e:	fb01 f303 	mul.w	r3, r1, r3
 8005942:	4413      	add	r3, r2
 8005944:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	b25b      	sxtb	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	da16      	bge.n	800597e <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8005950:	7bfb      	ldrb	r3, [r7, #15]
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	211a      	movs	r1, #26
 8005956:	fb01 f303 	mul.w	r3, r1, r3
 800595a:	4413      	add	r3, r2
 800595c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005960:	781a      	ldrb	r2, [r3, #0]
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005966:	7bfb      	ldrb	r3, [r7, #15]
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	211a      	movs	r1, #26
 800596c:	fb01 f303 	mul.w	r3, r1, r3
 8005970:	4413      	add	r3, r2
 8005972:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005976:	881a      	ldrh	r2, [r3, #0]
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	815a      	strh	r2, [r3, #10]
 800597c:	e015      	b.n	80059aa <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800597e:	7bfb      	ldrb	r3, [r7, #15]
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	211a      	movs	r1, #26
 8005984:	fb01 f303 	mul.w	r3, r1, r3
 8005988:	4413      	add	r3, r2
 800598a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800598e:	781a      	ldrb	r2, [r3, #0]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005994:	7bfb      	ldrb	r3, [r7, #15]
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	211a      	movs	r1, #26
 800599a:	fb01 f303 	mul.w	r3, r1, r3
 800599e:	4413      	add	r3, r2
 80059a0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80059a4:	881a      	ldrh	r2, [r3, #0]
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80059aa:	7bfb      	ldrb	r3, [r7, #15]
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	211a      	movs	r1, #26
 80059b0:	fb01 f303 	mul.w	r3, r1, r3
 80059b4:	4413      	add	r3, r2
 80059b6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	b25b      	sxtb	r3, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	da16      	bge.n	80059f0 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80059c2:	7bfb      	ldrb	r3, [r7, #15]
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	211a      	movs	r1, #26
 80059c8:	fb01 f303 	mul.w	r3, r1, r3
 80059cc:	4413      	add	r3, r2
 80059ce:	f203 3356 	addw	r3, r3, #854	; 0x356
 80059d2:	781a      	ldrb	r2, [r3, #0]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80059d8:	7bfb      	ldrb	r3, [r7, #15]
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	211a      	movs	r1, #26
 80059de:	fb01 f303 	mul.w	r3, r1, r3
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80059e8:	881a      	ldrh	r2, [r3, #0]
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	815a      	strh	r2, [r3, #10]
 80059ee:	e015      	b.n	8005a1c <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80059f0:	7bfb      	ldrb	r3, [r7, #15]
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	211a      	movs	r1, #26
 80059f6:	fb01 f303 	mul.w	r3, r1, r3
 80059fa:	4413      	add	r3, r2
 80059fc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005a00:	781a      	ldrb	r2, [r3, #0]
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005a06:	7bfb      	ldrb	r3, [r7, #15]
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	211a      	movs	r1, #26
 8005a0c:	fb01 f303 	mul.w	r3, r1, r3
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005a16:	881a      	ldrh	r2, [r3, #0]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	2200      	movs	r2, #0
 8005a26:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	799b      	ldrb	r3, [r3, #6]
 8005a32:	4619      	mov	r1, r3
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f002 fdc4 	bl	80085c2 <USBH_AllocPipe>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	79db      	ldrb	r3, [r3, #7]
 8005a46:	4619      	mov	r1, r3
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f002 fdba 	bl	80085c2 <USBH_AllocPipe>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	461a      	mov	r2, r3
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fdac 	bl	80065b4 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	7959      	ldrb	r1, [r3, #5]
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	7998      	ldrb	r0, [r3, #6]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	8912      	ldrh	r2, [r2, #8]
 8005a74:	9202      	str	r2, [sp, #8]
 8005a76:	2202      	movs	r2, #2
 8005a78:	9201      	str	r2, [sp, #4]
 8005a7a:	9300      	str	r3, [sp, #0]
 8005a7c:	4623      	mov	r3, r4
 8005a7e:	4602      	mov	r2, r0
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f002 fd6f 	bl	8008564 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	7919      	ldrb	r1, [r3, #4]
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	79d8      	ldrb	r0, [r3, #7]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005a9a:	68ba      	ldr	r2, [r7, #8]
 8005a9c:	8952      	ldrh	r2, [r2, #10]
 8005a9e:	9202      	str	r2, [sp, #8]
 8005aa0:	2202      	movs	r2, #2
 8005aa2:	9201      	str	r2, [sp, #4]
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	4623      	mov	r3, r4
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f002 fd5a 	bl	8008564 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	791b      	ldrb	r3, [r3, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f005 fcb8 	bl	800b42e <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	795b      	ldrb	r3, [r3, #5]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f005 fcb1 	bl	800b42e <USBH_LL_SetToggle>

  return USBH_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3714      	adds	r7, #20
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd90      	pop	{r4, r7, pc}

08005ad6 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b084      	sub	sp, #16
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	795b      	ldrb	r3, [r3, #5]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00e      	beq.n	8005b0e <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	795b      	ldrb	r3, [r3, #5]
 8005af4:	4619      	mov	r1, r3
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f002 fd53 	bl	80085a2 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	795b      	ldrb	r3, [r3, #5]
 8005b00:	4619      	mov	r1, r3
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f002 fd7e 	bl	8008604 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	791b      	ldrb	r3, [r3, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00e      	beq.n	8005b34 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	791b      	ldrb	r3, [r3, #4]
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f002 fd40 	bl	80085a2 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	791b      	ldrb	r3, [r3, #4]
 8005b26:	4619      	mov	r1, r3
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f002 fd6b 	bl	8008604 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b3a:	69db      	ldr	r3, [r3, #28]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00b      	beq.n	8005b58 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b46:	69db      	ldr	r3, [r3, #28]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f005 fd39 	bl	800b5c0 <free>
    phost->pActiveClass->pData = 0U;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b54:	2200      	movs	r2, #0
 8005b56:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b084      	sub	sp, #16
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005b74:	2301      	movs	r3, #1
 8005b76:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	7b9b      	ldrb	r3, [r3, #14]
 8005b7c:	2b03      	cmp	r3, #3
 8005b7e:	d041      	beq.n	8005c04 <USBH_MSC_ClassRequest+0xa2>
 8005b80:	2b03      	cmp	r3, #3
 8005b82:	dc4b      	bgt.n	8005c1c <USBH_MSC_ClassRequest+0xba>
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d001      	beq.n	8005b8c <USBH_MSC_ClassRequest+0x2a>
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d147      	bne.n	8005c1c <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	4619      	mov	r1, r3
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 fcf0 	bl	8006576 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8005b96:	4603      	mov	r3, r0
 8005b98:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8005b9a:	7bfb      	ldrb	r3, [r7, #15]
 8005b9c:	2b03      	cmp	r3, #3
 8005b9e:	d104      	bne.n	8005baa <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8005baa:	7bfb      	ldrb	r3, [r7, #15]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d137      	bne.n	8005c20 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d804      	bhi.n	8005bc2 <USBH_MSC_ClassRequest+0x60>
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	b2da      	uxtb	r2, r3
 8005bc0:	e000      	b.n	8005bc4 <USBH_MSC_ClassRequest+0x62>
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8005bc8:	2300      	movs	r3, #0
 8005bca:	73bb      	strb	r3, [r7, #14]
 8005bcc:	e014      	b.n	8005bf8 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8005bce:	7bbb      	ldrb	r3, [r7, #14]
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	2134      	movs	r1, #52	; 0x34
 8005bd4:	fb01 f303 	mul.w	r3, r1, r3
 8005bd8:	4413      	add	r3, r2
 8005bda:	3392      	adds	r3, #146	; 0x92
 8005bdc:	2202      	movs	r2, #2
 8005bde:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8005be0:	7bbb      	ldrb	r3, [r7, #14]
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	2134      	movs	r1, #52	; 0x34
 8005be6:	fb01 f303 	mul.w	r3, r1, r3
 8005bea:	4413      	add	r3, r2
 8005bec:	33c1      	adds	r3, #193	; 0xc1
 8005bee:	2200      	movs	r2, #0
 8005bf0:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8005bf2:	7bbb      	ldrb	r3, [r7, #14]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	73bb      	strb	r3, [r7, #14]
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	7bba      	ldrb	r2, [r7, #14]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d3e5      	bcc.n	8005bce <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8005c02:	e00d      	b.n	8005c20 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8005c04:	2100      	movs	r1, #0
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f002 f87b 	bl	8007d02 <USBH_ClrFeature>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d108      	bne.n	8005c24 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	7bda      	ldrb	r2, [r3, #15]
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	739a      	strb	r2, [r3, #14]
      }
      break;
 8005c1a:	e003      	b.n	8005c24 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8005c1c:	bf00      	nop
 8005c1e:	e002      	b.n	8005c26 <USBH_MSC_ClassRequest+0xc4>
      break;
 8005c20:	bf00      	nop
 8005c22:	e000      	b.n	8005c26 <USBH_MSC_ClassRequest+0xc4>
      break;
 8005c24:	bf00      	nop
  }

  return status;
 8005c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c3e:	69db      	ldr	r3, [r3, #28]
 8005c40:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8005c42:	2301      	movs	r3, #1
 8005c44:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8005c46:	2301      	movs	r3, #1
 8005c48:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	7b1b      	ldrb	r3, [r3, #12]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d003      	beq.n	8005c5e <USBH_MSC_Process+0x2e>
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	f000 8271 	beq.w	800613e <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8005c5c:	e272      	b.n	8006144 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	f080 824f 	bcs.w	800610e <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c76:	4619      	mov	r1, r3
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	2334      	movs	r3, #52	; 0x34
 8005c7c:	fb03 f301 	mul.w	r3, r3, r1
 8005c80:	4413      	add	r3, r2
 8005c82:	3391      	adds	r3, #145	; 0x91
 8005c84:	2201      	movs	r2, #1
 8005c86:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c8e:	4619      	mov	r1, r3
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	2334      	movs	r3, #52	; 0x34
 8005c94:	fb03 f301 	mul.w	r3, r3, r1
 8005c98:	4413      	add	r3, r2
 8005c9a:	3390      	adds	r3, #144	; 0x90
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	2b08      	cmp	r3, #8
 8005ca0:	f200 8243 	bhi.w	800612a <USBH_MSC_Process+0x4fa>
 8005ca4:	a201      	add	r2, pc, #4	; (adr r2, 8005cac <USBH_MSC_Process+0x7c>)
 8005ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005caa:	bf00      	nop
 8005cac:	08005cd1 	.word	0x08005cd1
 8005cb0:	0800612b 	.word	0x0800612b
 8005cb4:	08005d99 	.word	0x08005d99
 8005cb8:	08005f1d 	.word	0x08005f1d
 8005cbc:	08005cf7 	.word	0x08005cf7
 8005cc0:	08005fe9 	.word	0x08005fe9
 8005cc4:	0800612b 	.word	0x0800612b
 8005cc8:	0800612b 	.word	0x0800612b
 8005ccc:	080060fd 	.word	0x080060fd
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	2334      	movs	r3, #52	; 0x34
 8005cdc:	fb03 f301 	mul.w	r3, r3, r1
 8005ce0:	4413      	add	r3, r2
 8005ce2:	3390      	adds	r3, #144	; 0x90
 8005ce4:	2204      	movs	r2, #4
 8005ce6:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8005cf4:	e222      	b.n	800613c <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005cfc:	b2d9      	uxtb	r1, r3
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d04:	461a      	mov	r2, r3
 8005d06:	2334      	movs	r3, #52	; 0x34
 8005d08:	fb03 f302 	mul.w	r3, r3, r2
 8005d0c:	3398      	adds	r3, #152	; 0x98
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	4413      	add	r3, r2
 8005d12:	3307      	adds	r3, #7
 8005d14:	461a      	mov	r2, r3
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 ff6a 	bl	8006bf0 <USBH_MSC_SCSI_Inquiry>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d10b      	bne.n	8005d3e <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	2334      	movs	r3, #52	; 0x34
 8005d32:	fb03 f301 	mul.w	r3, r3, r1
 8005d36:	4413      	add	r3, r2
 8005d38:	3390      	adds	r3, #144	; 0x90
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8005d3e:	7bfb      	ldrb	r3, [r7, #15]
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d10c      	bne.n	8005d5e <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	2334      	movs	r3, #52	; 0x34
 8005d50:	fb03 f301 	mul.w	r3, r3, r1
 8005d54:	4413      	add	r3, r2
 8005d56:	3390      	adds	r3, #144	; 0x90
 8005d58:	2205      	movs	r2, #5
 8005d5a:	701a      	strb	r2, [r3, #0]
            break;
 8005d5c:	e1e7      	b.n	800612e <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005d5e:	7bfb      	ldrb	r3, [r7, #15]
 8005d60:	2b04      	cmp	r3, #4
 8005d62:	f040 81e4 	bne.w	800612e <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	2334      	movs	r3, #52	; 0x34
 8005d72:	fb03 f301 	mul.w	r3, r3, r1
 8005d76:	4413      	add	r3, r2
 8005d78:	3390      	adds	r3, #144	; 0x90
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d84:	4619      	mov	r1, r3
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	2334      	movs	r3, #52	; 0x34
 8005d8a:	fb03 f301 	mul.w	r3, r3, r1
 8005d8e:	4413      	add	r3, r2
 8005d90:	3391      	adds	r3, #145	; 0x91
 8005d92:	2202      	movs	r2, #2
 8005d94:	701a      	strb	r2, [r3, #0]
            break;
 8005d96:	e1ca      	b.n	800612e <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	4619      	mov	r1, r3
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 fe66 	bl	8006a74 <USBH_MSC_SCSI_TestUnitReady>
 8005da8:	4603      	mov	r3, r0
 8005daa:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8005dac:	7bbb      	ldrb	r3, [r7, #14]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d149      	bne.n	8005e46 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005db8:	4619      	mov	r1, r3
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	2334      	movs	r3, #52	; 0x34
 8005dbe:	fb03 f301 	mul.w	r3, r3, r1
 8005dc2:	4413      	add	r3, r2
 8005dc4:	3392      	adds	r3, #146	; 0x92
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00c      	beq.n	8005de6 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	2334      	movs	r3, #52	; 0x34
 8005dd8:	fb03 f301 	mul.w	r3, r3, r1
 8005ddc:	4413      	add	r3, r2
 8005dde:	33c1      	adds	r3, #193	; 0xc1
 8005de0:	2201      	movs	r2, #1
 8005de2:	701a      	strb	r2, [r3, #0]
 8005de4:	e00b      	b.n	8005dfe <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005dec:	4619      	mov	r1, r3
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	2334      	movs	r3, #52	; 0x34
 8005df2:	fb03 f301 	mul.w	r3, r3, r1
 8005df6:	4413      	add	r3, r2
 8005df8:	33c1      	adds	r3, #193	; 0xc1
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e04:	4619      	mov	r1, r3
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	2334      	movs	r3, #52	; 0x34
 8005e0a:	fb03 f301 	mul.w	r3, r3, r1
 8005e0e:	4413      	add	r3, r2
 8005e10:	3390      	adds	r3, #144	; 0x90
 8005e12:	2203      	movs	r2, #3
 8005e14:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	2334      	movs	r3, #52	; 0x34
 8005e22:	fb03 f301 	mul.w	r3, r3, r1
 8005e26:	4413      	add	r3, r2
 8005e28:	3391      	adds	r3, #145	; 0x91
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e34:	4619      	mov	r1, r3
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	2334      	movs	r3, #52	; 0x34
 8005e3a:	fb03 f301 	mul.w	r3, r3, r1
 8005e3e:	4413      	add	r3, r2
 8005e40:	3392      	adds	r3, #146	; 0x92
 8005e42:	2200      	movs	r2, #0
 8005e44:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8005e46:	7bbb      	ldrb	r3, [r7, #14]
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d14a      	bne.n	8005ee2 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e52:	4619      	mov	r1, r3
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	2334      	movs	r3, #52	; 0x34
 8005e58:	fb03 f301 	mul.w	r3, r3, r1
 8005e5c:	4413      	add	r3, r2
 8005e5e:	3392      	adds	r3, #146	; 0x92
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d00c      	beq.n	8005e80 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	2334      	movs	r3, #52	; 0x34
 8005e72:	fb03 f301 	mul.w	r3, r3, r1
 8005e76:	4413      	add	r3, r2
 8005e78:	33c1      	adds	r3, #193	; 0xc1
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	701a      	strb	r2, [r3, #0]
 8005e7e:	e00b      	b.n	8005e98 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e86:	4619      	mov	r1, r3
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	2334      	movs	r3, #52	; 0x34
 8005e8c:	fb03 f301 	mul.w	r3, r3, r1
 8005e90:	4413      	add	r3, r2
 8005e92:	33c1      	adds	r3, #193	; 0xc1
 8005e94:	2200      	movs	r2, #0
 8005e96:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	2334      	movs	r3, #52	; 0x34
 8005ea4:	fb03 f301 	mul.w	r3, r3, r1
 8005ea8:	4413      	add	r3, r2
 8005eaa:	3390      	adds	r3, #144	; 0x90
 8005eac:	2205      	movs	r2, #5
 8005eae:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	2334      	movs	r3, #52	; 0x34
 8005ebc:	fb03 f301 	mul.w	r3, r3, r1
 8005ec0:	4413      	add	r3, r2
 8005ec2:	3391      	adds	r3, #145	; 0x91
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ece:	4619      	mov	r1, r3
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	2334      	movs	r3, #52	; 0x34
 8005ed4:	fb03 f301 	mul.w	r3, r3, r1
 8005ed8:	4413      	add	r3, r2
 8005eda:	3392      	adds	r3, #146	; 0x92
 8005edc:	2202      	movs	r2, #2
 8005ede:	701a      	strb	r2, [r3, #0]
            break;
 8005ee0:	e127      	b.n	8006132 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8005ee2:	7bbb      	ldrb	r3, [r7, #14]
 8005ee4:	2b04      	cmp	r3, #4
 8005ee6:	f040 8124 	bne.w	8006132 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	2334      	movs	r3, #52	; 0x34
 8005ef6:	fb03 f301 	mul.w	r3, r3, r1
 8005efa:	4413      	add	r3, r2
 8005efc:	3390      	adds	r3, #144	; 0x90
 8005efe:	2201      	movs	r2, #1
 8005f00:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f08:	4619      	mov	r1, r3
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	2334      	movs	r3, #52	; 0x34
 8005f0e:	fb03 f301 	mul.w	r3, r3, r1
 8005f12:	4413      	add	r3, r2
 8005f14:	3391      	adds	r3, #145	; 0x91
 8005f16:	2202      	movs	r2, #2
 8005f18:	701a      	strb	r2, [r3, #0]
            break;
 8005f1a:	e10a      	b.n	8006132 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f22:	b2d9      	uxtb	r1, r3
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	2334      	movs	r3, #52	; 0x34
 8005f2e:	fb03 f302 	mul.w	r3, r3, r2
 8005f32:	3390      	adds	r3, #144	; 0x90
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	4413      	add	r3, r2
 8005f38:	3304      	adds	r3, #4
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 fddc 	bl	8006afa <USBH_MSC_SCSI_ReadCapacity>
 8005f42:	4603      	mov	r3, r0
 8005f44:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d120      	bne.n	8005f8e <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f52:	4619      	mov	r1, r3
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	2334      	movs	r3, #52	; 0x34
 8005f58:	fb03 f301 	mul.w	r3, r3, r1
 8005f5c:	4413      	add	r3, r2
 8005f5e:	3390      	adds	r3, #144	; 0x90
 8005f60:	2201      	movs	r2, #1
 8005f62:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	2334      	movs	r3, #52	; 0x34
 8005f70:	fb03 f301 	mul.w	r3, r3, r1
 8005f74:	4413      	add	r3, r2
 8005f76:	3391      	adds	r3, #145	; 0x91
 8005f78:	2200      	movs	r2, #0
 8005f7a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f82:	3301      	adds	r3, #1
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8005f8c:	e0d3      	b.n	8006136 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8005f8e:	7bfb      	ldrb	r3, [r7, #15]
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d10c      	bne.n	8005fae <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	2334      	movs	r3, #52	; 0x34
 8005fa0:	fb03 f301 	mul.w	r3, r3, r1
 8005fa4:	4413      	add	r3, r2
 8005fa6:	3390      	adds	r3, #144	; 0x90
 8005fa8:	2205      	movs	r2, #5
 8005faa:	701a      	strb	r2, [r3, #0]
            break;
 8005fac:	e0c3      	b.n	8006136 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005fae:	7bfb      	ldrb	r3, [r7, #15]
 8005fb0:	2b04      	cmp	r3, #4
 8005fb2:	f040 80c0 	bne.w	8006136 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	2334      	movs	r3, #52	; 0x34
 8005fc2:	fb03 f301 	mul.w	r3, r3, r1
 8005fc6:	4413      	add	r3, r2
 8005fc8:	3390      	adds	r3, #144	; 0x90
 8005fca:	2201      	movs	r2, #1
 8005fcc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	2334      	movs	r3, #52	; 0x34
 8005fda:	fb03 f301 	mul.w	r3, r3, r1
 8005fde:	4413      	add	r3, r2
 8005fe0:	3391      	adds	r3, #145	; 0x91
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	701a      	strb	r2, [r3, #0]
            break;
 8005fe6:	e0a6      	b.n	8006136 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005fee:	b2d9      	uxtb	r1, r3
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	2334      	movs	r3, #52	; 0x34
 8005ffa:	fb03 f302 	mul.w	r3, r3, r2
 8005ffe:	3398      	adds	r3, #152	; 0x98
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	4413      	add	r3, r2
 8006004:	3304      	adds	r3, #4
 8006006:	461a      	mov	r2, r3
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 fe96 	bl	8006d3a <USBH_MSC_SCSI_RequestSense>
 800600e:	4603      	mov	r3, r0
 8006010:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8006012:	7bfb      	ldrb	r3, [r7, #15]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d145      	bne.n	80060a4 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800601e:	4619      	mov	r1, r3
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	2334      	movs	r3, #52	; 0x34
 8006024:	fb03 f301 	mul.w	r3, r3, r1
 8006028:	4413      	add	r3, r2
 800602a:	339c      	adds	r3, #156	; 0x9c
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	2b06      	cmp	r3, #6
 8006030:	d00c      	beq.n	800604c <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006038:	4619      	mov	r1, r3
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	2334      	movs	r3, #52	; 0x34
 800603e:	fb03 f301 	mul.w	r3, r3, r1
 8006042:	4413      	add	r3, r2
 8006044:	339c      	adds	r3, #156	; 0x9c
 8006046:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8006048:	2b02      	cmp	r3, #2
 800604a:	d117      	bne.n	800607c <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	f242 720f 	movw	r2, #9999	; 0x270f
 800605e:	4293      	cmp	r3, r2
 8006060:	d80c      	bhi.n	800607c <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006068:	4619      	mov	r1, r3
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	2334      	movs	r3, #52	; 0x34
 800606e:	fb03 f301 	mul.w	r3, r3, r1
 8006072:	4413      	add	r3, r2
 8006074:	3390      	adds	r3, #144	; 0x90
 8006076:	2202      	movs	r2, #2
 8006078:	701a      	strb	r2, [r3, #0]
                  break;
 800607a:	e05f      	b.n	800613c <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006082:	4619      	mov	r1, r3
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	2334      	movs	r3, #52	; 0x34
 8006088:	fb03 f301 	mul.w	r3, r3, r1
 800608c:	4413      	add	r3, r2
 800608e:	3390      	adds	r3, #144	; 0x90
 8006090:	2201      	movs	r2, #1
 8006092:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800609a:	3301      	adds	r3, #1
 800609c:	b29a      	uxth	r2, r3
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 80060a4:	7bfb      	ldrb	r3, [r7, #15]
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d10c      	bne.n	80060c4 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060b0:	4619      	mov	r1, r3
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	2334      	movs	r3, #52	; 0x34
 80060b6:	fb03 f301 	mul.w	r3, r3, r1
 80060ba:	4413      	add	r3, r2
 80060bc:	3390      	adds	r3, #144	; 0x90
 80060be:	2208      	movs	r2, #8
 80060c0:	701a      	strb	r2, [r3, #0]
            break;
 80060c2:	e03a      	b.n	800613a <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80060c4:	7bfb      	ldrb	r3, [r7, #15]
 80060c6:	2b04      	cmp	r3, #4
 80060c8:	d137      	bne.n	800613a <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060d0:	4619      	mov	r1, r3
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	2334      	movs	r3, #52	; 0x34
 80060d6:	fb03 f301 	mul.w	r3, r3, r1
 80060da:	4413      	add	r3, r2
 80060dc:	3390      	adds	r3, #144	; 0x90
 80060de:	2201      	movs	r2, #1
 80060e0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060e8:	4619      	mov	r1, r3
 80060ea:	693a      	ldr	r2, [r7, #16]
 80060ec:	2334      	movs	r3, #52	; 0x34
 80060ee:	fb03 f301 	mul.w	r3, r3, r1
 80060f2:	4413      	add	r3, r2
 80060f4:	3391      	adds	r3, #145	; 0x91
 80060f6:	2202      	movs	r2, #2
 80060f8:	701a      	strb	r2, [r3, #0]
            break;
 80060fa:	e01e      	b.n	800613a <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006102:	3301      	adds	r3, #1
 8006104:	b29a      	uxth	r2, r3
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800610c:	e016      	b.n	800613c <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	2200      	movs	r2, #0
 8006112:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	2201      	movs	r2, #1
 800611a:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006122:	2102      	movs	r1, #2
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	4798      	blx	r3
      break;
 8006128:	e00c      	b.n	8006144 <USBH_MSC_Process+0x514>
            break;
 800612a:	bf00      	nop
 800612c:	e00a      	b.n	8006144 <USBH_MSC_Process+0x514>
            break;
 800612e:	bf00      	nop
 8006130:	e008      	b.n	8006144 <USBH_MSC_Process+0x514>
            break;
 8006132:	bf00      	nop
 8006134:	e006      	b.n	8006144 <USBH_MSC_Process+0x514>
            break;
 8006136:	bf00      	nop
 8006138:	e004      	b.n	8006144 <USBH_MSC_Process+0x514>
            break;
 800613a:	bf00      	nop
      break;
 800613c:	e002      	b.n	8006144 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800613e:	2300      	movs	r3, #0
 8006140:	75fb      	strb	r3, [r7, #23]
      break;
 8006142:	bf00      	nop
  }
  return error;
 8006144:	7dfb      	ldrb	r3, [r7, #23]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3718      	adds	r7, #24
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop

08006150 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b088      	sub	sp, #32
 800616a:	af02      	add	r7, sp, #8
 800616c:	6078      	str	r0, [r7, #4]
 800616e:	460b      	mov	r3, r1
 8006170:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006178:	69db      	ldr	r3, [r3, #28]
 800617a:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800617c:	2301      	movs	r3, #1
 800617e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8006180:	2301      	movs	r3, #1
 8006182:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8006184:	78fb      	ldrb	r3, [r7, #3]
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	2134      	movs	r1, #52	; 0x34
 800618a:	fb01 f303 	mul.w	r3, r1, r3
 800618e:	4413      	add	r3, r2
 8006190:	3390      	adds	r3, #144	; 0x90
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	2b07      	cmp	r3, #7
 8006196:	d03c      	beq.n	8006212 <USBH_MSC_RdWrProcess+0xac>
 8006198:	2b07      	cmp	r3, #7
 800619a:	f300 80a7 	bgt.w	80062ec <USBH_MSC_RdWrProcess+0x186>
 800619e:	2b05      	cmp	r3, #5
 80061a0:	d06c      	beq.n	800627c <USBH_MSC_RdWrProcess+0x116>
 80061a2:	2b06      	cmp	r3, #6
 80061a4:	f040 80a2 	bne.w	80062ec <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80061a8:	78f9      	ldrb	r1, [r7, #3]
 80061aa:	2300      	movs	r3, #0
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	2300      	movs	r3, #0
 80061b0:	2200      	movs	r2, #0
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 fea5 	bl	8006f02 <USBH_MSC_SCSI_Read>
 80061b8:	4603      	mov	r3, r0
 80061ba:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80061bc:	7bfb      	ldrb	r3, [r7, #15]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10b      	bne.n	80061da <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80061c2:	78fb      	ldrb	r3, [r7, #3]
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	2134      	movs	r1, #52	; 0x34
 80061c8:	fb01 f303 	mul.w	r3, r1, r3
 80061cc:	4413      	add	r3, r2
 80061ce:	3390      	adds	r3, #144	; 0x90
 80061d0:	2201      	movs	r2, #1
 80061d2:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80061d4:	2300      	movs	r3, #0
 80061d6:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80061d8:	e08a      	b.n	80062f0 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 80061da:	7bfb      	ldrb	r3, [r7, #15]
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d109      	bne.n	80061f4 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80061e0:	78fb      	ldrb	r3, [r7, #3]
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	2134      	movs	r1, #52	; 0x34
 80061e6:	fb01 f303 	mul.w	r3, r1, r3
 80061ea:	4413      	add	r3, r2
 80061ec:	3390      	adds	r3, #144	; 0x90
 80061ee:	2205      	movs	r2, #5
 80061f0:	701a      	strb	r2, [r3, #0]
      break;
 80061f2:	e07d      	b.n	80062f0 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80061f4:	7bfb      	ldrb	r3, [r7, #15]
 80061f6:	2b04      	cmp	r3, #4
 80061f8:	d17a      	bne.n	80062f0 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80061fa:	78fb      	ldrb	r3, [r7, #3]
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	2134      	movs	r1, #52	; 0x34
 8006200:	fb01 f303 	mul.w	r3, r1, r3
 8006204:	4413      	add	r3, r2
 8006206:	3390      	adds	r3, #144	; 0x90
 8006208:	2208      	movs	r2, #8
 800620a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800620c:	2302      	movs	r3, #2
 800620e:	75fb      	strb	r3, [r7, #23]
      break;
 8006210:	e06e      	b.n	80062f0 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8006212:	78f9      	ldrb	r1, [r7, #3]
 8006214:	2300      	movs	r3, #0
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	2300      	movs	r3, #0
 800621a:	2200      	movs	r2, #0
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 fe05 	bl	8006e2c <USBH_MSC_SCSI_Write>
 8006222:	4603      	mov	r3, r0
 8006224:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8006226:	7bfb      	ldrb	r3, [r7, #15]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10b      	bne.n	8006244 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800622c:	78fb      	ldrb	r3, [r7, #3]
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	2134      	movs	r1, #52	; 0x34
 8006232:	fb01 f303 	mul.w	r3, r1, r3
 8006236:	4413      	add	r3, r2
 8006238:	3390      	adds	r3, #144	; 0x90
 800623a:	2201      	movs	r2, #1
 800623c:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800623e:	2300      	movs	r3, #0
 8006240:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006242:	e057      	b.n	80062f4 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8006244:	7bfb      	ldrb	r3, [r7, #15]
 8006246:	2b02      	cmp	r3, #2
 8006248:	d109      	bne.n	800625e <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800624a:	78fb      	ldrb	r3, [r7, #3]
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	2134      	movs	r1, #52	; 0x34
 8006250:	fb01 f303 	mul.w	r3, r1, r3
 8006254:	4413      	add	r3, r2
 8006256:	3390      	adds	r3, #144	; 0x90
 8006258:	2205      	movs	r2, #5
 800625a:	701a      	strb	r2, [r3, #0]
      break;
 800625c:	e04a      	b.n	80062f4 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800625e:	7bfb      	ldrb	r3, [r7, #15]
 8006260:	2b04      	cmp	r3, #4
 8006262:	d147      	bne.n	80062f4 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006264:	78fb      	ldrb	r3, [r7, #3]
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	2134      	movs	r1, #52	; 0x34
 800626a:	fb01 f303 	mul.w	r3, r1, r3
 800626e:	4413      	add	r3, r2
 8006270:	3390      	adds	r3, #144	; 0x90
 8006272:	2208      	movs	r2, #8
 8006274:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8006276:	2302      	movs	r3, #2
 8006278:	75fb      	strb	r3, [r7, #23]
      break;
 800627a:	e03b      	b.n	80062f4 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800627c:	78fb      	ldrb	r3, [r7, #3]
 800627e:	2234      	movs	r2, #52	; 0x34
 8006280:	fb02 f303 	mul.w	r3, r2, r3
 8006284:	3398      	adds	r3, #152	; 0x98
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	4413      	add	r3, r2
 800628a:	1d1a      	adds	r2, r3, #4
 800628c:	78fb      	ldrb	r3, [r7, #3]
 800628e:	4619      	mov	r1, r3
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 fd52 	bl	8006d3a <USBH_MSC_SCSI_RequestSense>
 8006296:	4603      	mov	r3, r0
 8006298:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800629a:	7bfb      	ldrb	r3, [r7, #15]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d113      	bne.n	80062c8 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80062a0:	78fb      	ldrb	r3, [r7, #3]
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	2134      	movs	r1, #52	; 0x34
 80062a6:	fb01 f303 	mul.w	r3, r1, r3
 80062aa:	4413      	add	r3, r2
 80062ac:	3390      	adds	r3, #144	; 0x90
 80062ae:	2201      	movs	r2, #1
 80062b0:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 80062b2:	78fb      	ldrb	r3, [r7, #3]
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	2134      	movs	r1, #52	; 0x34
 80062b8:	fb01 f303 	mul.w	r3, r1, r3
 80062bc:	4413      	add	r3, r2
 80062be:	3391      	adds	r3, #145	; 0x91
 80062c0:	2202      	movs	r2, #2
 80062c2:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 80062c4:	2302      	movs	r3, #2
 80062c6:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 80062c8:	7bfb      	ldrb	r3, [r7, #15]
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d014      	beq.n	80062f8 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80062ce:	7bfb      	ldrb	r3, [r7, #15]
 80062d0:	2b04      	cmp	r3, #4
 80062d2:	d111      	bne.n	80062f8 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80062d4:	78fb      	ldrb	r3, [r7, #3]
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	2134      	movs	r1, #52	; 0x34
 80062da:	fb01 f303 	mul.w	r3, r1, r3
 80062de:	4413      	add	r3, r2
 80062e0:	3390      	adds	r3, #144	; 0x90
 80062e2:	2208      	movs	r2, #8
 80062e4:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80062e6:	2302      	movs	r3, #2
 80062e8:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80062ea:	e005      	b.n	80062f8 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 80062ec:	bf00      	nop
 80062ee:	e004      	b.n	80062fa <USBH_MSC_RdWrProcess+0x194>
      break;
 80062f0:	bf00      	nop
 80062f2:	e002      	b.n	80062fa <USBH_MSC_RdWrProcess+0x194>
      break;
 80062f4:	bf00      	nop
 80062f6:	e000      	b.n	80062fa <USBH_MSC_RdWrProcess+0x194>
      break;
 80062f8:	bf00      	nop

  }
  return error;
 80062fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3718      	adds	r7, #24
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	460b      	mov	r3, r1
 800630e:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006316:	69db      	ldr	r3, [r3, #28]
 8006318:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	b2db      	uxtb	r3, r3
 8006320:	2b0b      	cmp	r3, #11
 8006322:	d10c      	bne.n	800633e <USBH_MSC_UnitIsReady+0x3a>
 8006324:	78fb      	ldrb	r3, [r7, #3]
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	2134      	movs	r1, #52	; 0x34
 800632a:	fb01 f303 	mul.w	r3, r1, r3
 800632e:	4413      	add	r3, r2
 8006330:	3391      	adds	r3, #145	; 0x91
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d102      	bne.n	800633e <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8006338:	2301      	movs	r3, #1
 800633a:	73fb      	strb	r3, [r7, #15]
 800633c:	e001      	b.n	8006342 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800633e:	2300      	movs	r3, #0
 8006340:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8006342:	7bfb      	ldrb	r3, [r7, #15]
}
 8006344:	4618      	mov	r0, r3
 8006346:	3714      	adds	r7, #20
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	460b      	mov	r3, r1
 800635a:	607a      	str	r2, [r7, #4]
 800635c:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006364:	69db      	ldr	r3, [r3, #28]
 8006366:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b0b      	cmp	r3, #11
 8006370:	d10d      	bne.n	800638e <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8006372:	7afb      	ldrb	r3, [r7, #11]
 8006374:	2234      	movs	r2, #52	; 0x34
 8006376:	fb02 f303 	mul.w	r3, r2, r3
 800637a:	3390      	adds	r3, #144	; 0x90
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	4413      	add	r3, r2
 8006380:	2234      	movs	r2, #52	; 0x34
 8006382:	4619      	mov	r1, r3
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f005 f923 	bl	800b5d0 <memcpy>
    return USBH_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	e000      	b.n	8006390 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800638e:	2302      	movs	r3, #2
  }
}
 8006390:	4618      	mov	r0, r3
 8006392:	3718      	adds	r7, #24
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b088      	sub	sp, #32
 800639c:	af02      	add	r7, sp, #8
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	607a      	str	r2, [r7, #4]
 80063a2:	603b      	str	r3, [r7, #0]
 80063a4:	460b      	mov	r3, r1
 80063a6:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063ae:	69db      	ldr	r3, [r3, #28]
 80063b0:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00e      	beq.n	80063dc <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80063c4:	2b0b      	cmp	r3, #11
 80063c6:	d109      	bne.n	80063dc <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80063c8:	7afb      	ldrb	r3, [r7, #11]
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	2134      	movs	r1, #52	; 0x34
 80063ce:	fb01 f303 	mul.w	r3, r1, r3
 80063d2:	4413      	add	r3, r2
 80063d4:	3390      	adds	r3, #144	; 0x90
 80063d6:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d001      	beq.n	80063e0 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 80063dc:	2302      	movs	r3, #2
 80063de:	e040      	b.n	8006462 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	2206      	movs	r2, #6
 80063e4:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 80063e6:	7afb      	ldrb	r3, [r7, #11]
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	2134      	movs	r1, #52	; 0x34
 80063ec:	fb01 f303 	mul.w	r3, r1, r3
 80063f0:	4413      	add	r3, r2
 80063f2:	3390      	adds	r3, #144	; 0x90
 80063f4:	2206      	movs	r2, #6
 80063f6:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80063f8:	7afb      	ldrb	r3, [r7, #11]
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8006402:	7af9      	ldrb	r1, [r7, #11]
 8006404:	6a3b      	ldr	r3, [r7, #32]
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f000 fd78 	bl	8006f02 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006418:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800641a:	e016      	b.n	800644a <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	1ad2      	subs	r2, r2, r3
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	f242 7110 	movw	r1, #10000	; 0x2710
 800642c:	fb01 f303 	mul.w	r3, r1, r3
 8006430:	429a      	cmp	r2, r3
 8006432:	d805      	bhi.n	8006440 <USBH_MSC_Read+0xa8>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800643a:	b2db      	uxtb	r3, r3
 800643c:	2b00      	cmp	r3, #0
 800643e:	d104      	bne.n	800644a <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	2201      	movs	r2, #1
 8006444:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8006446:	2302      	movs	r3, #2
 8006448:	e00b      	b.n	8006462 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800644a:	7afb      	ldrb	r3, [r7, #11]
 800644c:	4619      	mov	r1, r3
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f7ff fe89 	bl	8006166 <USBH_MSC_RdWrProcess>
 8006454:	4603      	mov	r3, r0
 8006456:	2b01      	cmp	r3, #1
 8006458:	d0e0      	beq.n	800641c <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	2201      	movs	r2, #1
 800645e:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3718      	adds	r7, #24
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b088      	sub	sp, #32
 800646e:	af02      	add	r7, sp, #8
 8006470:	60f8      	str	r0, [r7, #12]
 8006472:	607a      	str	r2, [r7, #4]
 8006474:	603b      	str	r3, [r7, #0]
 8006476:	460b      	mov	r3, r1
 8006478:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800648a:	b2db      	uxtb	r3, r3
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00e      	beq.n	80064ae <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8006496:	2b0b      	cmp	r3, #11
 8006498:	d109      	bne.n	80064ae <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800649a:	7afb      	ldrb	r3, [r7, #11]
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	2134      	movs	r1, #52	; 0x34
 80064a0:	fb01 f303 	mul.w	r3, r1, r3
 80064a4:	4413      	add	r3, r2
 80064a6:	3390      	adds	r3, #144	; 0x90
 80064a8:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d001      	beq.n	80064b2 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 80064ae:	2302      	movs	r3, #2
 80064b0:	e040      	b.n	8006534 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	2207      	movs	r2, #7
 80064b6:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80064b8:	7afb      	ldrb	r3, [r7, #11]
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	2134      	movs	r1, #52	; 0x34
 80064be:	fb01 f303 	mul.w	r3, r1, r3
 80064c2:	4413      	add	r3, r2
 80064c4:	3390      	adds	r3, #144	; 0x90
 80064c6:	2207      	movs	r2, #7
 80064c8:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80064ca:	7afb      	ldrb	r3, [r7, #11]
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80064d4:	7af9      	ldrb	r1, [r7, #11]
 80064d6:	6a3b      	ldr	r3, [r7, #32]
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f000 fca4 	bl	8006e2c <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80064ea:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80064ec:	e016      	b.n	800651c <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	1ad2      	subs	r2, r2, r3
 80064f8:	6a3b      	ldr	r3, [r7, #32]
 80064fa:	f242 7110 	movw	r1, #10000	; 0x2710
 80064fe:	fb01 f303 	mul.w	r3, r1, r3
 8006502:	429a      	cmp	r2, r3
 8006504:	d805      	bhi.n	8006512 <USBH_MSC_Write+0xa8>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d104      	bne.n	800651c <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	2201      	movs	r2, #1
 8006516:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8006518:	2302      	movs	r3, #2
 800651a:	e00b      	b.n	8006534 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800651c:	7afb      	ldrb	r3, [r7, #11]
 800651e:	4619      	mov	r1, r3
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f7ff fe20 	bl	8006166 <USBH_MSC_RdWrProcess>
 8006526:	4603      	mov	r3, r0
 8006528:	2b01      	cmp	r3, #1
 800652a:	d0e0      	beq.n	80064ee <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	2201      	movs	r2, #1
 8006530:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3718      	adds	r7, #24
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2221      	movs	r2, #33	; 0x21
 8006548:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	22ff      	movs	r2, #255	; 0xff
 800654e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8006562:	2200      	movs	r2, #0
 8006564:	2100      	movs	r1, #0
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f001 fdab 	bl	80080c2 <USBH_CtlReq>
 800656c:	4603      	mov	r3, r0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b082      	sub	sp, #8
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
 800657e:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	22a1      	movs	r2, #161	; 0xa1
 8006584:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	22fe      	movs	r2, #254	; 0xfe
 800658a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800659e:	2201      	movs	r2, #1
 80065a0:	6839      	ldr	r1, [r7, #0]
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f001 fd8d 	bl	80080c2 <USBH_CtlReq>
 80065a8:	4603      	mov	r3, r0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
	...

080065b4 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065c2:	69db      	ldr	r3, [r3, #28]
 80065c4:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	4a09      	ldr	r2, [pc, #36]	; (80065f0 <USBH_MSC_BOT_Init+0x3c>)
 80065ca:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	4a09      	ldr	r2, [pc, #36]	; (80065f4 <USBH_MSC_BOT_Init+0x40>)
 80065d0:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr
 80065f0:	43425355 	.word	0x43425355
 80065f4:	20304050 	.word	0x20304050

080065f8 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b088      	sub	sp, #32
 80065fc:	af02      	add	r7, sp, #8
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	460b      	mov	r3, r1
 8006602:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8006604:	2301      	movs	r3, #1
 8006606:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8006608:	2301      	movs	r3, #1
 800660a:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800660c:	2301      	movs	r3, #1
 800660e:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006610:	2300      	movs	r3, #0
 8006612:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800661a:	69db      	ldr	r3, [r3, #28]
 800661c:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800661e:	2300      	movs	r3, #0
 8006620:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006628:	3b01      	subs	r3, #1
 800662a:	2b0a      	cmp	r3, #10
 800662c:	f200 819e 	bhi.w	800696c <USBH_MSC_BOT_Process+0x374>
 8006630:	a201      	add	r2, pc, #4	; (adr r2, 8006638 <USBH_MSC_BOT_Process+0x40>)
 8006632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006636:	bf00      	nop
 8006638:	08006665 	.word	0x08006665
 800663c:	0800668d 	.word	0x0800668d
 8006640:	080066f7 	.word	0x080066f7
 8006644:	08006715 	.word	0x08006715
 8006648:	08006799 	.word	0x08006799
 800664c:	080067bb 	.word	0x080067bb
 8006650:	08006853 	.word	0x08006853
 8006654:	0800686f 	.word	0x0800686f
 8006658:	080068c1 	.word	0x080068c1
 800665c:	080068f1 	.word	0x080068f1
 8006660:	08006953 	.word	0x08006953
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	78fa      	ldrb	r2, [r7, #3]
 8006668:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	2202      	movs	r2, #2
 8006670:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	795b      	ldrb	r3, [r3, #5]
 800667e:	2201      	movs	r2, #1
 8006680:	9200      	str	r2, [sp, #0]
 8006682:	221f      	movs	r2, #31
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f001 ff2a 	bl	80084de <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800668a:	e17e      	b.n	800698a <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	795b      	ldrb	r3, [r3, #5]
 8006690:	4619      	mov	r1, r3
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f004 feaa 	bl	800b3ec <USBH_LL_GetURBState>
 8006698:	4603      	mov	r3, r0
 800669a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800669c:	7d3b      	ldrb	r3, [r7, #20]
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d118      	bne.n	80066d4 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00f      	beq.n	80066ca <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80066b0:	b25b      	sxtb	r3, r3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	da04      	bge.n	80066c0 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	2203      	movs	r2, #3
 80066ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80066be:	e157      	b.n	8006970 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	2205      	movs	r2, #5
 80066c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80066c8:	e152      	b.n	8006970 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	2207      	movs	r2, #7
 80066ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80066d2:	e14d      	b.n	8006970 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 80066d4:	7d3b      	ldrb	r3, [r7, #20]
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d104      	bne.n	80066e4 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80066e2:	e145      	b.n	8006970 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 80066e4:	7d3b      	ldrb	r3, [r7, #20]
 80066e6:	2b05      	cmp	r3, #5
 80066e8:	f040 8142 	bne.w	8006970 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	220a      	movs	r2, #10
 80066f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80066f4:	e13c      	b.n	8006970 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	895a      	ldrh	r2, [r3, #10]
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	791b      	ldrb	r3, [r3, #4]
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f001 ff0f 	bl	8008528 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	2204      	movs	r2, #4
 800670e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8006712:	e13a      	b.n	800698a <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	791b      	ldrb	r3, [r3, #4]
 8006718:	4619      	mov	r1, r3
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f004 fe66 	bl	800b3ec <USBH_LL_GetURBState>
 8006720:	4603      	mov	r3, r0
 8006722:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006724:	7d3b      	ldrb	r3, [r7, #20]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d12d      	bne.n	8006786 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	8952      	ldrh	r2, [r2, #10]
 8006732:	4293      	cmp	r3, r2
 8006734:	d910      	bls.n	8006758 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	8952      	ldrh	r2, [r2, #10]
 8006740:	441a      	add	r2, r3
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	8952      	ldrh	r2, [r2, #10]
 8006750:	1a9a      	subs	r2, r3, r2
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	65da      	str	r2, [r3, #92]	; 0x5c
 8006756:	e002      	b.n	800675e <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	2200      	movs	r2, #0
 800675c:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00a      	beq.n	800677c <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	895a      	ldrh	r2, [r3, #10]
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	791b      	ldrb	r3, [r3, #4]
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f001 fed7 	bl	8008528 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800677a:	e0fb      	b.n	8006974 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	2207      	movs	r2, #7
 8006780:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006784:	e0f6      	b.n	8006974 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8006786:	7d3b      	ldrb	r3, [r7, #20]
 8006788:	2b05      	cmp	r3, #5
 800678a:	f040 80f3 	bne.w	8006974 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	2209      	movs	r2, #9
 8006792:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006796:	e0ed      	b.n	8006974 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	891a      	ldrh	r2, [r3, #8]
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	795b      	ldrb	r3, [r3, #5]
 80067a6:	2001      	movs	r0, #1
 80067a8:	9000      	str	r0, [sp, #0]
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f001 fe97 	bl	80084de <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	2206      	movs	r2, #6
 80067b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80067b8:	e0e7      	b.n	800698a <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	795b      	ldrb	r3, [r3, #5]
 80067be:	4619      	mov	r1, r3
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f004 fe13 	bl	800b3ec <USBH_LL_GetURBState>
 80067c6:	4603      	mov	r3, r0
 80067c8:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80067ca:	7d3b      	ldrb	r3, [r7, #20]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d12f      	bne.n	8006830 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	8912      	ldrh	r2, [r2, #8]
 80067d8:	4293      	cmp	r3, r2
 80067da:	d910      	bls.n	80067fe <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067e2:	693a      	ldr	r2, [r7, #16]
 80067e4:	8912      	ldrh	r2, [r2, #8]
 80067e6:	441a      	add	r2, r3
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	8912      	ldrh	r2, [r2, #8]
 80067f6:	1a9a      	subs	r2, r3, r2
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80067fc:	e002      	b.n	8006804 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	2200      	movs	r2, #0
 8006802:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00c      	beq.n	8006826 <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	891a      	ldrh	r2, [r3, #8]
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	795b      	ldrb	r3, [r3, #5]
 800681a:	2001      	movs	r0, #1
 800681c:	9000      	str	r0, [sp, #0]
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f001 fe5d 	bl	80084de <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8006824:	e0a8      	b.n	8006978 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	2207      	movs	r2, #7
 800682a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800682e:	e0a3      	b.n	8006978 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006830:	7d3b      	ldrb	r3, [r7, #20]
 8006832:	2b02      	cmp	r3, #2
 8006834:	d104      	bne.n	8006840 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	2205      	movs	r2, #5
 800683a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800683e:	e09b      	b.n	8006978 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8006840:	7d3b      	ldrb	r3, [r7, #20]
 8006842:	2b05      	cmp	r3, #5
 8006844:	f040 8098 	bne.w	8006978 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	220a      	movs	r2, #10
 800684c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006850:	e092      	b.n	8006978 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	791b      	ldrb	r3, [r3, #4]
 800685c:	220d      	movs	r2, #13
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f001 fe62 	bl	8008528 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	2208      	movs	r2, #8
 8006868:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800686c:	e08d      	b.n	800698a <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	791b      	ldrb	r3, [r3, #4]
 8006872:	4619      	mov	r1, r3
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f004 fdb9 	bl	800b3ec <USBH_LL_GetURBState>
 800687a:	4603      	mov	r3, r0
 800687c:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800687e:	7d3b      	ldrb	r3, [r7, #20]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d115      	bne.n	80068b0 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f8a9 	bl	80069ec <USBH_MSC_DecodeCSW>
 800689a:	4603      	mov	r3, r0
 800689c:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800689e:	7d7b      	ldrb	r3, [r7, #21]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d102      	bne.n	80068aa <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 80068a4:	2300      	movs	r3, #0
 80068a6:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 80068a8:	e068      	b.n	800697c <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 80068aa:	2302      	movs	r3, #2
 80068ac:	75fb      	strb	r3, [r7, #23]
      break;
 80068ae:	e065      	b.n	800697c <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 80068b0:	7d3b      	ldrb	r3, [r7, #20]
 80068b2:	2b05      	cmp	r3, #5
 80068b4:	d162      	bne.n	800697c <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	2209      	movs	r2, #9
 80068ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80068be:	e05d      	b.n	800697c <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 80068c0:	78fb      	ldrb	r3, [r7, #3]
 80068c2:	2200      	movs	r2, #0
 80068c4:	4619      	mov	r1, r3
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f864 	bl	8006994 <USBH_MSC_BOT_Abort>
 80068cc:	4603      	mov	r3, r0
 80068ce:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80068d0:	7dbb      	ldrb	r3, [r7, #22]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d104      	bne.n	80068e0 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	2207      	movs	r2, #7
 80068da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 80068de:	e04f      	b.n	8006980 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 80068e0:	7dbb      	ldrb	r3, [r7, #22]
 80068e2:	2b04      	cmp	r3, #4
 80068e4:	d14c      	bne.n	8006980 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	220b      	movs	r2, #11
 80068ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80068ee:	e047      	b.n	8006980 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 80068f0:	78fb      	ldrb	r3, [r7, #3]
 80068f2:	2201      	movs	r2, #1
 80068f4:	4619      	mov	r1, r3
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f84c 	bl	8006994 <USBH_MSC_BOT_Abort>
 80068fc:	4603      	mov	r3, r0
 80068fe:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8006900:	7dbb      	ldrb	r3, [r7, #22]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d11d      	bne.n	8006942 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	795b      	ldrb	r3, [r3, #5]
 800690a:	4619      	mov	r1, r3
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f004 fdbe 	bl	800b48e <USBH_LL_GetToggle>
 8006912:	4603      	mov	r3, r0
 8006914:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	7959      	ldrb	r1, [r3, #5]
 800691a:	7bfb      	ldrb	r3, [r7, #15]
 800691c:	f1c3 0301 	rsb	r3, r3, #1
 8006920:	b2db      	uxtb	r3, r3
 8006922:	461a      	mov	r2, r3
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f004 fd82 	bl	800b42e <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	791b      	ldrb	r3, [r3, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	4619      	mov	r1, r3
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f004 fd7b 	bl	800b42e <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	2209      	movs	r2, #9
 800693c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8006940:	e020      	b.n	8006984 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8006942:	7dbb      	ldrb	r3, [r7, #22]
 8006944:	2b04      	cmp	r3, #4
 8006946:	d11d      	bne.n	8006984 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	220b      	movs	r2, #11
 800694c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006950:	e018      	b.n	8006984 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f7ff fdf2 	bl	800653c <USBH_MSC_BOT_REQ_Reset>
 8006958:	4603      	mov	r3, r0
 800695a:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800695c:	7dfb      	ldrb	r3, [r7, #23]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d112      	bne.n	8006988 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800696a:	e00d      	b.n	8006988 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800696c:	bf00      	nop
 800696e:	e00c      	b.n	800698a <USBH_MSC_BOT_Process+0x392>
      break;
 8006970:	bf00      	nop
 8006972:	e00a      	b.n	800698a <USBH_MSC_BOT_Process+0x392>
      break;
 8006974:	bf00      	nop
 8006976:	e008      	b.n	800698a <USBH_MSC_BOT_Process+0x392>
      break;
 8006978:	bf00      	nop
 800697a:	e006      	b.n	800698a <USBH_MSC_BOT_Process+0x392>
      break;
 800697c:	bf00      	nop
 800697e:	e004      	b.n	800698a <USBH_MSC_BOT_Process+0x392>
      break;
 8006980:	bf00      	nop
 8006982:	e002      	b.n	800698a <USBH_MSC_BOT_Process+0x392>
      break;
 8006984:	bf00      	nop
 8006986:	e000      	b.n	800698a <USBH_MSC_BOT_Process+0x392>
      break;
 8006988:	bf00      	nop
  }
  return status;
 800698a:	7dfb      	ldrb	r3, [r7, #23]
}
 800698c:	4618      	mov	r0, r3
 800698e:	3718      	adds	r7, #24
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	460b      	mov	r3, r1
 800699e:	70fb      	strb	r3, [r7, #3]
 80069a0:	4613      	mov	r3, r2
 80069a2:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 80069a4:	2302      	movs	r3, #2
 80069a6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069ae:	69db      	ldr	r3, [r3, #28]
 80069b0:	60bb      	str	r3, [r7, #8]

  switch (dir)
 80069b2:	78bb      	ldrb	r3, [r7, #2]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d002      	beq.n	80069be <USBH_MSC_BOT_Abort+0x2a>
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d009      	beq.n	80069d0 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 80069bc:	e011      	b.n	80069e2 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	79db      	ldrb	r3, [r3, #7]
 80069c2:	4619      	mov	r1, r3
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f001 f99c 	bl	8007d02 <USBH_ClrFeature>
 80069ca:	4603      	mov	r3, r0
 80069cc:	73fb      	strb	r3, [r7, #15]
      break;
 80069ce:	e008      	b.n	80069e2 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	799b      	ldrb	r3, [r3, #6]
 80069d4:	4619      	mov	r1, r3
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f001 f993 	bl	8007d02 <USBH_ClrFeature>
 80069dc:	4603      	mov	r3, r0
 80069de:	73fb      	strb	r3, [r7, #15]
      break;
 80069e0:	bf00      	nop
  }
  return status;
 80069e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069fa:	69db      	ldr	r3, [r3, #28]
 80069fc:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 80069fe:	2301      	movs	r3, #1
 8006a00:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	791b      	ldrb	r3, [r3, #4]
 8006a06:	4619      	mov	r1, r3
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f004 fc5d 	bl	800b2c8 <USBH_LL_GetLastXferSize>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b0d      	cmp	r3, #13
 8006a12:	d002      	beq.n	8006a1a <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8006a14:	2302      	movs	r3, #2
 8006a16:	73fb      	strb	r3, [r7, #15]
 8006a18:	e024      	b.n	8006a64 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a1e:	4a14      	ldr	r2, [pc, #80]	; (8006a70 <USBH_MSC_DecodeCSW+0x84>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d11d      	bne.n	8006a60 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d119      	bne.n	8006a64 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d102      	bne.n	8006a40 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	73fb      	strb	r3, [r7, #15]
 8006a3e:	e011      	b.n	8006a64 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d102      	bne.n	8006a50 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	73fb      	strb	r3, [r7, #15]
 8006a4e:	e009      	b.n	8006a64 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d104      	bne.n	8006a64 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	73fb      	strb	r3, [r7, #15]
 8006a5e:	e001      	b.n	8006a64 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8006a60:	2302      	movs	r3, #2
 8006a62:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3710      	adds	r7, #16
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	53425355 	.word	0x53425355

08006a74 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006a80:	2302      	movs	r3, #2
 8006a82:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a8a:	69db      	ldr	r3, [r3, #28]
 8006a8c:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d002      	beq.n	8006a9e <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d021      	beq.n	8006ae0 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8006a9c:	e028      	b.n	8006af0 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	220a      	movs	r2, #10
 8006ab0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	3363      	adds	r3, #99	; 0x63
 8006ab8:	2210      	movs	r2, #16
 8006aba:	2100      	movs	r1, #0
 8006abc:	4618      	mov	r0, r3
 8006abe:	f004 fd95 	bl	800b5ec <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	2202      	movs	r2, #2
 8006ad6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8006ada:	2301      	movs	r3, #1
 8006adc:	73fb      	strb	r3, [r7, #15]
      break;
 8006ade:	e007      	b.n	8006af0 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006ae0:	78fb      	ldrb	r3, [r7, #3]
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f7ff fd87 	bl	80065f8 <USBH_MSC_BOT_Process>
 8006aea:	4603      	mov	r3, r0
 8006aec:	73fb      	strb	r3, [r7, #15]
      break;
 8006aee:	bf00      	nop
  }

  return error;
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b086      	sub	sp, #24
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	60f8      	str	r0, [r7, #12]
 8006b02:	460b      	mov	r3, r1
 8006b04:	607a      	str	r2, [r7, #4]
 8006b06:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b12:	69db      	ldr	r3, [r3, #28]
 8006b14:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d002      	beq.n	8006b26 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d027      	beq.n	8006b74 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8006b24:	e05f      	b.n	8006be6 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	2208      	movs	r2, #8
 8006b2a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	2280      	movs	r2, #128	; 0x80
 8006b30:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	220a      	movs	r2, #10
 8006b38:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	3363      	adds	r3, #99	; 0x63
 8006b40:	2210      	movs	r2, #16
 8006b42:	2100      	movs	r1, #0
 8006b44:	4618      	mov	r0, r3
 8006b46:	f004 fd51 	bl	800b5ec <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	2225      	movs	r2, #37	; 0x25
 8006b4e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	2201      	movs	r2, #1
 8006b56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	f103 0210 	add.w	r2, r3, #16
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	75fb      	strb	r3, [r7, #23]
      break;
 8006b72:	e038      	b.n	8006be6 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006b74:	7afb      	ldrb	r3, [r7, #11]
 8006b76:	4619      	mov	r1, r3
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f7ff fd3d 	bl	80065f8 <USBH_MSC_BOT_Process>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8006b82:	7dfb      	ldrb	r3, [r7, #23]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d12d      	bne.n	8006be4 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b8e:	3303      	adds	r3, #3
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	461a      	mov	r2, r3
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b9a:	3302      	adds	r3, #2
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	021b      	lsls	r3, r3, #8
 8006ba0:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ba8:	3301      	adds	r3, #1
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006bae:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	061b      	lsls	r3, r3, #24
 8006bba:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bc6:	3307      	adds	r3, #7
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bd2:	3306      	adds	r3, #6
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	021b      	lsls	r3, r3, #8
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	809a      	strh	r2, [r3, #4]
      break;
 8006be4:	bf00      	nop
  }

  return error;
 8006be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3718      	adds	r7, #24
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	607a      	str	r2, [r7, #4]
 8006bfc:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8006bfe:	2302      	movs	r3, #2
 8006c00:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c08:	69db      	ldr	r3, [r3, #28]
 8006c0a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d002      	beq.n	8006c1c <USBH_MSC_SCSI_Inquiry+0x2c>
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d03d      	beq.n	8006c96 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8006c1a:	e089      	b.n	8006d30 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	2224      	movs	r2, #36	; 0x24
 8006c20:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	2280      	movs	r2, #128	; 0x80
 8006c26:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	220a      	movs	r2, #10
 8006c2e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	3363      	adds	r3, #99	; 0x63
 8006c36:	220a      	movs	r2, #10
 8006c38:	2100      	movs	r1, #0
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f004 fcd6 	bl	800b5ec <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	2212      	movs	r2, #18
 8006c44:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8006c48:	7afb      	ldrb	r3, [r7, #11]
 8006c4a:	015b      	lsls	r3, r3, #5
 8006c4c:	b2da      	uxtb	r2, r3
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	2224      	movs	r2, #36	; 0x24
 8006c68:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	f103 0210 	add.w	r2, r3, #16
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006c90:	2301      	movs	r3, #1
 8006c92:	75fb      	strb	r3, [r7, #23]
      break;
 8006c94:	e04c      	b.n	8006d30 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006c96:	7afb      	ldrb	r3, [r7, #11]
 8006c98:	4619      	mov	r1, r3
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f7ff fcac 	bl	80065f8 <USBH_MSC_BOT_Process>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8006ca4:	7dfb      	ldrb	r3, [r7, #23]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d141      	bne.n	8006d2e <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8006caa:	2222      	movs	r2, #34	; 0x22
 8006cac:	2100      	movs	r1, #0
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f004 fc9c 	bl	800b5ec <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	f003 031f 	and.w	r3, r3, #31
 8006cc0:	b2da      	uxtb	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	095b      	lsrs	r3, r3, #5
 8006cd0:	b2da      	uxtb	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cdc:	3301      	adds	r3, #1
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	b25b      	sxtb	r3, r3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	da03      	bge.n	8006cee <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	709a      	strb	r2, [r3, #2]
 8006cec:	e002      	b.n	8006cf4 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	1cd8      	adds	r0, r3, #3
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cfe:	3308      	adds	r3, #8
 8006d00:	2208      	movs	r2, #8
 8006d02:	4619      	mov	r1, r3
 8006d04:	f004 fc64 	bl	800b5d0 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f103 000c 	add.w	r0, r3, #12
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d14:	3310      	adds	r3, #16
 8006d16:	2210      	movs	r2, #16
 8006d18:	4619      	mov	r1, r3
 8006d1a:	f004 fc59 	bl	800b5d0 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	331d      	adds	r3, #29
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8006d28:	3220      	adds	r2, #32
 8006d2a:	6812      	ldr	r2, [r2, #0]
 8006d2c:	601a      	str	r2, [r3, #0]
      break;
 8006d2e:	bf00      	nop
  }

  return error;
 8006d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3718      	adds	r7, #24
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b086      	sub	sp, #24
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	60f8      	str	r0, [r7, #12]
 8006d42:	460b      	mov	r3, r1
 8006d44:	607a      	str	r2, [r7, #4]
 8006d46:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006d48:	2302      	movs	r3, #2
 8006d4a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d52:	69db      	ldr	r3, [r3, #28]
 8006d54:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d002      	beq.n	8006d66 <USBH_MSC_SCSI_RequestSense+0x2c>
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d03d      	beq.n	8006de0 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8006d64:	e05d      	b.n	8006e22 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	220e      	movs	r2, #14
 8006d6a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	2280      	movs	r2, #128	; 0x80
 8006d70:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	220a      	movs	r2, #10
 8006d78:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	3363      	adds	r3, #99	; 0x63
 8006d80:	2210      	movs	r2, #16
 8006d82:	2100      	movs	r1, #0
 8006d84:	4618      	mov	r0, r3
 8006d86:	f004 fc31 	bl	800b5ec <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	2203      	movs	r2, #3
 8006d8e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8006d92:	7afb      	ldrb	r3, [r7, #11]
 8006d94:	015b      	lsls	r3, r3, #5
 8006d96:	b2da      	uxtb	r2, r3
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	220e      	movs	r2, #14
 8006db2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	2202      	movs	r2, #2
 8006dca:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	f103 0210 	add.w	r2, r3, #16
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	75fb      	strb	r3, [r7, #23]
      break;
 8006dde:	e020      	b.n	8006e22 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006de0:	7afb      	ldrb	r3, [r7, #11]
 8006de2:	4619      	mov	r1, r3
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f7ff fc07 	bl	80065f8 <USBH_MSC_BOT_Process>
 8006dea:	4603      	mov	r3, r0
 8006dec:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8006dee:	7dfb      	ldrb	r3, [r7, #23]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d115      	bne.n	8006e20 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dfa:	3302      	adds	r3, #2
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	f003 030f 	and.w	r3, r3, #15
 8006e02:	b2da      	uxtb	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e0e:	7b1a      	ldrb	r2, [r3, #12]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e1a:	7b5a      	ldrb	r2, [r3, #13]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	709a      	strb	r2, [r3, #2]
      break;
 8006e20:	bf00      	nop
  }

  return error;
 8006e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3718      	adds	r7, #24
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b086      	sub	sp, #24
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	607a      	str	r2, [r7, #4]
 8006e36:	603b      	str	r3, [r7, #0]
 8006e38:	460b      	mov	r3, r1
 8006e3a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e46:	69db      	ldr	r3, [r3, #28]
 8006e48:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d002      	beq.n	8006e5a <USBH_MSC_SCSI_Write+0x2e>
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d047      	beq.n	8006ee8 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8006e58:	e04e      	b.n	8006ef8 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8006e60:	461a      	mov	r2, r3
 8006e62:	6a3b      	ldr	r3, [r7, #32]
 8006e64:	fb03 f202 	mul.w	r2, r3, r2
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	220a      	movs	r2, #10
 8006e78:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	3363      	adds	r3, #99	; 0x63
 8006e80:	2210      	movs	r2, #16
 8006e82:	2100      	movs	r1, #0
 8006e84:	4618      	mov	r0, r3
 8006e86:	f004 fbb1 	bl	800b5ec <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	222a      	movs	r2, #42	; 0x2a
 8006e8e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8006e92:	79fa      	ldrb	r2, [r7, #7]
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8006e9a:	79ba      	ldrb	r2, [r7, #6]
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8006ea2:	797a      	ldrb	r2, [r7, #5]
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8006eaa:	1d3b      	adds	r3, r7, #4
 8006eac:	781a      	ldrb	r2, [r3, #0]
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8006eb4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8006ebe:	f107 0320 	add.w	r3, r7, #32
 8006ec2:	781a      	ldrb	r2, [r3, #0]
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	2202      	movs	r2, #2
 8006ed6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	683a      	ldr	r2, [r7, #0]
 8006ede:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ee6:	e007      	b.n	8006ef8 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006ee8:	7afb      	ldrb	r3, [r7, #11]
 8006eea:	4619      	mov	r1, r3
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f7ff fb83 	bl	80065f8 <USBH_MSC_BOT_Process>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ef6:	bf00      	nop
  }

  return error;
 8006ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3718      	adds	r7, #24
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b086      	sub	sp, #24
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	60f8      	str	r0, [r7, #12]
 8006f0a:	607a      	str	r2, [r7, #4]
 8006f0c:	603b      	str	r3, [r7, #0]
 8006f0e:	460b      	mov	r3, r1
 8006f10:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006f12:	2302      	movs	r3, #2
 8006f14:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d002      	beq.n	8006f30 <USBH_MSC_SCSI_Read+0x2e>
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d047      	beq.n	8006fbe <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8006f2e:	e04e      	b.n	8006fce <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8006f36:	461a      	mov	r2, r3
 8006f38:	6a3b      	ldr	r3, [r7, #32]
 8006f3a:	fb03 f202 	mul.w	r2, r3, r2
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	2280      	movs	r2, #128	; 0x80
 8006f46:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	220a      	movs	r2, #10
 8006f4e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	3363      	adds	r3, #99	; 0x63
 8006f56:	2210      	movs	r2, #16
 8006f58:	2100      	movs	r1, #0
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f004 fb46 	bl	800b5ec <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	2228      	movs	r2, #40	; 0x28
 8006f64:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8006f68:	79fa      	ldrb	r2, [r7, #7]
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8006f70:	79ba      	ldrb	r2, [r7, #6]
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8006f78:	797a      	ldrb	r2, [r7, #5]
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8006f80:	1d3b      	adds	r3, r7, #4
 8006f82:	781a      	ldrb	r2, [r3, #0]
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8006f8a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8006f94:	f107 0320 	add.w	r3, r7, #32
 8006f98:	781a      	ldrb	r2, [r3, #0]
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	2202      	movs	r2, #2
 8006fac:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	683a      	ldr	r2, [r7, #0]
 8006fb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	75fb      	strb	r3, [r7, #23]
      break;
 8006fbc:	e007      	b.n	8006fce <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006fbe:	7afb      	ldrb	r3, [r7, #11]
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f7ff fb18 	bl	80065f8 <USBH_MSC_BOT_Process>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	75fb      	strb	r3, [r7, #23]
      break;
 8006fcc:	bf00      	nop
  }

  return error;
 8006fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3718      	adds	r7, #24
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d101      	bne.n	8006ff0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006fec:	2302      	movs	r3, #2
 8006fee:	e029      	b.n	8007044 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	79fa      	ldrb	r2, [r7, #7]
 8006ff4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f000 f81f 	bl	800704c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d003      	beq.n	800703c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f004 f88f 	bl	800b160 <USBH_LL_Init>

  return USBH_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800704c:	b480      	push	{r7}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007054:	2300      	movs	r3, #0
 8007056:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007058:	2300      	movs	r3, #0
 800705a:	60fb      	str	r3, [r7, #12]
 800705c:	e009      	b.n	8007072 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	33e0      	adds	r3, #224	; 0xe0
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	2200      	movs	r2, #0
 800706a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	3301      	adds	r3, #1
 8007070:	60fb      	str	r3, [r7, #12]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2b0e      	cmp	r3, #14
 8007076:	d9f2      	bls.n	800705e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007078:	2300      	movs	r3, #0
 800707a:	60fb      	str	r3, [r7, #12]
 800707c:	e009      	b.n	8007092 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4413      	add	r3, r2
 8007084:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007088:	2200      	movs	r2, #0
 800708a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	3301      	adds	r3, #1
 8007090:	60fb      	str	r3, [r7, #12]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007098:	d3f1      	bcc.n	800707e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2240      	movs	r2, #64	; 0x40
 80070be:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3714      	adds	r7, #20
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80070fe:	2300      	movs	r3, #0
 8007100:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d016      	beq.n	8007136 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10e      	bne.n	8007130 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007118:	1c59      	adds	r1, r3, #1
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	33de      	adds	r3, #222	; 0xde
 8007124:	6839      	ldr	r1, [r7, #0]
 8007126:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800712a:	2300      	movs	r3, #0
 800712c:	73fb      	strb	r3, [r7, #15]
 800712e:	e004      	b.n	800713a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007130:	2302      	movs	r3, #2
 8007132:	73fb      	strb	r3, [r7, #15]
 8007134:	e001      	b.n	800713a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007136:	2302      	movs	r3, #2
 8007138:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800713a:	7bfb      	ldrb	r3, [r7, #15]
}
 800713c:	4618      	mov	r0, r3
 800713e:	3714      	adds	r7, #20
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	460b      	mov	r3, r1
 8007152:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007154:	2300      	movs	r3, #0
 8007156:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800715e:	78fa      	ldrb	r2, [r7, #3]
 8007160:	429a      	cmp	r2, r3
 8007162:	d204      	bcs.n	800716e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	78fa      	ldrb	r2, [r7, #3]
 8007168:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800716c:	e001      	b.n	8007172 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800716e:	2302      	movs	r3, #2
 8007170:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007172:	7bfb      	ldrb	r3, [r7, #15]
}
 8007174:	4618      	mov	r0, r3
 8007176:	3714      	adds	r7, #20
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007180:	b480      	push	{r7}
 8007182:	b087      	sub	sp, #28
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	4608      	mov	r0, r1
 800718a:	4611      	mov	r1, r2
 800718c:	461a      	mov	r2, r3
 800718e:	4603      	mov	r3, r0
 8007190:	70fb      	strb	r3, [r7, #3]
 8007192:	460b      	mov	r3, r1
 8007194:	70bb      	strb	r3, [r7, #2]
 8007196:	4613      	mov	r3, r2
 8007198:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800719a:	2300      	movs	r3, #0
 800719c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800719e:	2300      	movs	r3, #0
 80071a0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80071a8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80071aa:	e025      	b.n	80071f8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80071ac:	7dfb      	ldrb	r3, [r7, #23]
 80071ae:	221a      	movs	r2, #26
 80071b0:	fb02 f303 	mul.w	r3, r2, r3
 80071b4:	3308      	adds	r3, #8
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	4413      	add	r3, r2
 80071ba:	3302      	adds	r3, #2
 80071bc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	795b      	ldrb	r3, [r3, #5]
 80071c2:	78fa      	ldrb	r2, [r7, #3]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d002      	beq.n	80071ce <USBH_FindInterface+0x4e>
 80071c8:	78fb      	ldrb	r3, [r7, #3]
 80071ca:	2bff      	cmp	r3, #255	; 0xff
 80071cc:	d111      	bne.n	80071f2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80071d2:	78ba      	ldrb	r2, [r7, #2]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d002      	beq.n	80071de <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80071d8:	78bb      	ldrb	r3, [r7, #2]
 80071da:	2bff      	cmp	r3, #255	; 0xff
 80071dc:	d109      	bne.n	80071f2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80071e2:	787a      	ldrb	r2, [r7, #1]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d002      	beq.n	80071ee <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80071e8:	787b      	ldrb	r3, [r7, #1]
 80071ea:	2bff      	cmp	r3, #255	; 0xff
 80071ec:	d101      	bne.n	80071f2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80071ee:	7dfb      	ldrb	r3, [r7, #23]
 80071f0:	e006      	b.n	8007200 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80071f2:	7dfb      	ldrb	r3, [r7, #23]
 80071f4:	3301      	adds	r3, #1
 80071f6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80071f8:	7dfb      	ldrb	r3, [r7, #23]
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d9d6      	bls.n	80071ac <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80071fe:	23ff      	movs	r3, #255	; 0xff
}
 8007200:	4618      	mov	r0, r3
 8007202:	371c      	adds	r7, #28
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f003 ffdf 	bl	800b1d8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800721a:	2101      	movs	r1, #1
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f004 f8f8 	bl	800b412 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b088      	sub	sp, #32
 8007230:	af04      	add	r7, sp, #16
 8007232:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007234:	2302      	movs	r3, #2
 8007236:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007238:	2300      	movs	r3, #0
 800723a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007242:	b2db      	uxtb	r3, r3
 8007244:	2b01      	cmp	r3, #1
 8007246:	d102      	bne.n	800724e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2203      	movs	r2, #3
 800724c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	b2db      	uxtb	r3, r3
 8007254:	2b0b      	cmp	r3, #11
 8007256:	f200 81b3 	bhi.w	80075c0 <USBH_Process+0x394>
 800725a:	a201      	add	r2, pc, #4	; (adr r2, 8007260 <USBH_Process+0x34>)
 800725c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007260:	08007291 	.word	0x08007291
 8007264:	080072c3 	.word	0x080072c3
 8007268:	0800732b 	.word	0x0800732b
 800726c:	0800755b 	.word	0x0800755b
 8007270:	080075c1 	.word	0x080075c1
 8007274:	080073cf 	.word	0x080073cf
 8007278:	08007501 	.word	0x08007501
 800727c:	08007405 	.word	0x08007405
 8007280:	08007425 	.word	0x08007425
 8007284:	08007445 	.word	0x08007445
 8007288:	08007473 	.word	0x08007473
 800728c:	08007543 	.word	0x08007543
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007296:	b2db      	uxtb	r3, r3
 8007298:	2b00      	cmp	r3, #0
 800729a:	f000 8193 	beq.w	80075c4 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2201      	movs	r2, #1
 80072a2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80072a4:	20c8      	movs	r0, #200	; 0xc8
 80072a6:	f004 f922 	bl	800b4ee <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f003 fff1 	bl	800b292 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80072c0:	e180      	b.n	80075c4 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d107      	bne.n	80072dc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2202      	movs	r2, #2
 80072d8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80072da:	e182      	b.n	80075e2 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80072e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072e6:	d914      	bls.n	8007312 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80072ee:	3301      	adds	r3, #1
 80072f0:	b2da      	uxtb	r2, r3
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80072fe:	2b03      	cmp	r3, #3
 8007300:	d903      	bls.n	800730a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	220d      	movs	r2, #13
 8007306:	701a      	strb	r2, [r3, #0]
      break;
 8007308:	e16b      	b.n	80075e2 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	701a      	strb	r2, [r3, #0]
      break;
 8007310:	e167      	b.n	80075e2 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007318:	f103 020a 	add.w	r2, r3, #10
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007322:	200a      	movs	r0, #10
 8007324:	f004 f8e3 	bl	800b4ee <USBH_Delay>
      break;
 8007328:	e15b      	b.n	80075e2 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007330:	2b00      	cmp	r3, #0
 8007332:	d005      	beq.n	8007340 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800733a:	2104      	movs	r1, #4
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007340:	2064      	movs	r0, #100	; 0x64
 8007342:	f004 f8d4 	bl	800b4ee <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f003 ff7c 	bl	800b244 <USBH_LL_GetSpeed>
 800734c:	4603      	mov	r3, r0
 800734e:	461a      	mov	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2205      	movs	r2, #5
 800735a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800735c:	2100      	movs	r1, #0
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f001 f92f 	bl	80085c2 <USBH_AllocPipe>
 8007364:	4603      	mov	r3, r0
 8007366:	461a      	mov	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800736c:	2180      	movs	r1, #128	; 0x80
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f001 f927 	bl	80085c2 <USBH_AllocPipe>
 8007374:	4603      	mov	r3, r0
 8007376:	461a      	mov	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	7919      	ldrb	r1, [r3, #4]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007390:	b292      	uxth	r2, r2
 8007392:	9202      	str	r2, [sp, #8]
 8007394:	2200      	movs	r2, #0
 8007396:	9201      	str	r2, [sp, #4]
 8007398:	9300      	str	r3, [sp, #0]
 800739a:	4603      	mov	r3, r0
 800739c:	2280      	movs	r2, #128	; 0x80
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f001 f8e0 	bl	8008564 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	7959      	ldrb	r1, [r3, #5]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80073b8:	b292      	uxth	r2, r2
 80073ba:	9202      	str	r2, [sp, #8]
 80073bc:	2200      	movs	r2, #0
 80073be:	9201      	str	r2, [sp, #4]
 80073c0:	9300      	str	r3, [sp, #0]
 80073c2:	4603      	mov	r3, r0
 80073c4:	2200      	movs	r2, #0
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f001 f8cc 	bl	8008564 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80073cc:	e109      	b.n	80075e2 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f90c 	bl	80075ec <USBH_HandleEnum>
 80073d4:	4603      	mov	r3, r0
 80073d6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80073d8:	7bbb      	ldrb	r3, [r7, #14]
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f040 80f3 	bne.w	80075c8 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d103      	bne.n	80073fc <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2208      	movs	r2, #8
 80073f8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80073fa:	e0e5      	b.n	80075c8 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2207      	movs	r2, #7
 8007400:	701a      	strb	r2, [r3, #0]
      break;
 8007402:	e0e1      	b.n	80075c8 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800740a:	2b00      	cmp	r3, #0
 800740c:	f000 80de 	beq.w	80075cc <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007416:	2101      	movs	r1, #1
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2208      	movs	r2, #8
 8007420:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007422:	e0d3      	b.n	80075cc <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800742a:	b29b      	uxth	r3, r3
 800742c:	4619      	mov	r1, r3
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 fc20 	bl	8007c74 <USBH_SetCfg>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	f040 80ca 	bne.w	80075d0 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2209      	movs	r2, #9
 8007440:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007442:	e0c5      	b.n	80075d0 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800744a:	f003 0320 	and.w	r3, r3, #32
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00b      	beq.n	800746a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007452:	2101      	movs	r1, #1
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fc30 	bl	8007cba <USBH_SetFeature>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	f040 80b9 	bne.w	80075d4 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	220a      	movs	r2, #10
 8007466:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007468:	e0b4      	b.n	80075d4 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	220a      	movs	r2, #10
 800746e:	701a      	strb	r2, [r3, #0]
      break;
 8007470:	e0b0      	b.n	80075d4 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007478:	2b00      	cmp	r3, #0
 800747a:	f000 80ad 	beq.w	80075d8 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007486:	2300      	movs	r3, #0
 8007488:	73fb      	strb	r3, [r7, #15]
 800748a:	e016      	b.n	80074ba <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800748c:	7bfa      	ldrb	r2, [r7, #15]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	32de      	adds	r2, #222	; 0xde
 8007492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007496:	791a      	ldrb	r2, [r3, #4]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800749e:	429a      	cmp	r2, r3
 80074a0:	d108      	bne.n	80074b4 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80074a2:	7bfa      	ldrb	r2, [r7, #15]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	32de      	adds	r2, #222	; 0xde
 80074a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80074b2:	e005      	b.n	80074c0 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
 80074b6:	3301      	adds	r3, #1
 80074b8:	73fb      	strb	r3, [r7, #15]
 80074ba:	7bfb      	ldrb	r3, [r7, #15]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d0e5      	beq.n	800748c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d016      	beq.n	80074f8 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	4798      	blx	r3
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d109      	bne.n	80074f0 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2206      	movs	r2, #6
 80074e0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074e8:	2103      	movs	r1, #3
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80074ee:	e073      	b.n	80075d8 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	220d      	movs	r2, #13
 80074f4:	701a      	strb	r2, [r3, #0]
      break;
 80074f6:	e06f      	b.n	80075d8 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	220d      	movs	r2, #13
 80074fc:	701a      	strb	r2, [r3, #0]
      break;
 80074fe:	e06b      	b.n	80075d8 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007506:	2b00      	cmp	r3, #0
 8007508:	d017      	beq.n	800753a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	4798      	blx	r3
 8007516:	4603      	mov	r3, r0
 8007518:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800751a:	7bbb      	ldrb	r3, [r7, #14]
 800751c:	b2db      	uxtb	r3, r3
 800751e:	2b00      	cmp	r3, #0
 8007520:	d103      	bne.n	800752a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	220b      	movs	r2, #11
 8007526:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007528:	e058      	b.n	80075dc <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800752a:	7bbb      	ldrb	r3, [r7, #14]
 800752c:	b2db      	uxtb	r3, r3
 800752e:	2b02      	cmp	r3, #2
 8007530:	d154      	bne.n	80075dc <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	220d      	movs	r2, #13
 8007536:	701a      	strb	r2, [r3, #0]
      break;
 8007538:	e050      	b.n	80075dc <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	220d      	movs	r2, #13
 800753e:	701a      	strb	r2, [r3, #0]
      break;
 8007540:	e04c      	b.n	80075dc <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007548:	2b00      	cmp	r3, #0
 800754a:	d049      	beq.n	80075e0 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007552:	695b      	ldr	r3, [r3, #20]
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	4798      	blx	r3
      }
      break;
 8007558:	e042      	b.n	80075e0 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f7ff fd72 	bl	800704c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800756e:	2b00      	cmp	r3, #0
 8007570:	d009      	beq.n	8007586 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800758c:	2b00      	cmp	r3, #0
 800758e:	d005      	beq.n	800759c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007596:	2105      	movs	r1, #5
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d107      	bne.n	80075b8 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f7ff fe2b 	bl	800720c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80075b6:	e014      	b.n	80075e2 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f003 fe0d 	bl	800b1d8 <USBH_LL_Start>
      break;
 80075be:	e010      	b.n	80075e2 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80075c0:	bf00      	nop
 80075c2:	e00e      	b.n	80075e2 <USBH_Process+0x3b6>
      break;
 80075c4:	bf00      	nop
 80075c6:	e00c      	b.n	80075e2 <USBH_Process+0x3b6>
      break;
 80075c8:	bf00      	nop
 80075ca:	e00a      	b.n	80075e2 <USBH_Process+0x3b6>
    break;
 80075cc:	bf00      	nop
 80075ce:	e008      	b.n	80075e2 <USBH_Process+0x3b6>
      break;
 80075d0:	bf00      	nop
 80075d2:	e006      	b.n	80075e2 <USBH_Process+0x3b6>
      break;
 80075d4:	bf00      	nop
 80075d6:	e004      	b.n	80075e2 <USBH_Process+0x3b6>
      break;
 80075d8:	bf00      	nop
 80075da:	e002      	b.n	80075e2 <USBH_Process+0x3b6>
      break;
 80075dc:	bf00      	nop
 80075de:	e000      	b.n	80075e2 <USBH_Process+0x3b6>
      break;
 80075e0:	bf00      	nop
  }
  return USBH_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b088      	sub	sp, #32
 80075f0:	af04      	add	r7, sp, #16
 80075f2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80075f4:	2301      	movs	r3, #1
 80075f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80075f8:	2301      	movs	r3, #1
 80075fa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	785b      	ldrb	r3, [r3, #1]
 8007600:	2b07      	cmp	r3, #7
 8007602:	f200 81c1 	bhi.w	8007988 <USBH_HandleEnum+0x39c>
 8007606:	a201      	add	r2, pc, #4	; (adr r2, 800760c <USBH_HandleEnum+0x20>)
 8007608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800760c:	0800762d 	.word	0x0800762d
 8007610:	080076eb 	.word	0x080076eb
 8007614:	08007755 	.word	0x08007755
 8007618:	080077e3 	.word	0x080077e3
 800761c:	0800784d 	.word	0x0800784d
 8007620:	080078bd 	.word	0x080078bd
 8007624:	08007903 	.word	0x08007903
 8007628:	08007949 	.word	0x08007949
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800762c:	2108      	movs	r1, #8
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fa50 	bl	8007ad4 <USBH_Get_DevDesc>
 8007634:	4603      	mov	r3, r0
 8007636:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007638:	7bbb      	ldrb	r3, [r7, #14]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d130      	bne.n	80076a0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	7919      	ldrb	r1, [r3, #4]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007662:	b292      	uxth	r2, r2
 8007664:	9202      	str	r2, [sp, #8]
 8007666:	2200      	movs	r2, #0
 8007668:	9201      	str	r2, [sp, #4]
 800766a:	9300      	str	r3, [sp, #0]
 800766c:	4603      	mov	r3, r0
 800766e:	2280      	movs	r2, #128	; 0x80
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 ff77 	bl	8008564 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	7959      	ldrb	r1, [r3, #5]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800768a:	b292      	uxth	r2, r2
 800768c:	9202      	str	r2, [sp, #8]
 800768e:	2200      	movs	r2, #0
 8007690:	9201      	str	r2, [sp, #4]
 8007692:	9300      	str	r3, [sp, #0]
 8007694:	4603      	mov	r3, r0
 8007696:	2200      	movs	r2, #0
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 ff63 	bl	8008564 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800769e:	e175      	b.n	800798c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076a0:	7bbb      	ldrb	r3, [r7, #14]
 80076a2:	2b03      	cmp	r3, #3
 80076a4:	f040 8172 	bne.w	800798c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076ae:	3301      	adds	r3, #1
 80076b0:	b2da      	uxtb	r2, r3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076be:	2b03      	cmp	r3, #3
 80076c0:	d903      	bls.n	80076ca <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	220d      	movs	r2, #13
 80076c6:	701a      	strb	r2, [r3, #0]
      break;
 80076c8:	e160      	b.n	800798c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	795b      	ldrb	r3, [r3, #5]
 80076ce:	4619      	mov	r1, r3
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 ff97 	bl	8008604 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	791b      	ldrb	r3, [r3, #4]
 80076da:	4619      	mov	r1, r3
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 ff91 	bl	8008604 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	701a      	strb	r2, [r3, #0]
      break;
 80076e8:	e150      	b.n	800798c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80076ea:	2112      	movs	r1, #18
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 f9f1 	bl	8007ad4 <USBH_Get_DevDesc>
 80076f2:	4603      	mov	r3, r0
 80076f4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076f6:	7bbb      	ldrb	r3, [r7, #14]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d103      	bne.n	8007704 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2202      	movs	r2, #2
 8007700:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007702:	e145      	b.n	8007990 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007704:	7bbb      	ldrb	r3, [r7, #14]
 8007706:	2b03      	cmp	r3, #3
 8007708:	f040 8142 	bne.w	8007990 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007712:	3301      	adds	r3, #1
 8007714:	b2da      	uxtb	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007722:	2b03      	cmp	r3, #3
 8007724:	d903      	bls.n	800772e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	220d      	movs	r2, #13
 800772a:	701a      	strb	r2, [r3, #0]
      break;
 800772c:	e130      	b.n	8007990 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	795b      	ldrb	r3, [r3, #5]
 8007732:	4619      	mov	r1, r3
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 ff65 	bl	8008604 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	791b      	ldrb	r3, [r3, #4]
 800773e:	4619      	mov	r1, r3
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 ff5f 	bl	8008604 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	701a      	strb	r2, [r3, #0]
      break;
 8007752:	e11d      	b.n	8007990 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007754:	2101      	movs	r1, #1
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fa68 	bl	8007c2c <USBH_SetAddress>
 800775c:	4603      	mov	r3, r0
 800775e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007760:	7bbb      	ldrb	r3, [r7, #14]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d132      	bne.n	80077cc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007766:	2002      	movs	r0, #2
 8007768:	f003 fec1 	bl	800b4ee <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2203      	movs	r2, #3
 8007778:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	7919      	ldrb	r1, [r3, #4]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800778e:	b292      	uxth	r2, r2
 8007790:	9202      	str	r2, [sp, #8]
 8007792:	2200      	movs	r2, #0
 8007794:	9201      	str	r2, [sp, #4]
 8007796:	9300      	str	r3, [sp, #0]
 8007798:	4603      	mov	r3, r0
 800779a:	2280      	movs	r2, #128	; 0x80
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 fee1 	bl	8008564 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	7959      	ldrb	r1, [r3, #5]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80077b6:	b292      	uxth	r2, r2
 80077b8:	9202      	str	r2, [sp, #8]
 80077ba:	2200      	movs	r2, #0
 80077bc:	9201      	str	r2, [sp, #4]
 80077be:	9300      	str	r3, [sp, #0]
 80077c0:	4603      	mov	r3, r0
 80077c2:	2200      	movs	r2, #0
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 fecd 	bl	8008564 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80077ca:	e0e3      	b.n	8007994 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077cc:	7bbb      	ldrb	r3, [r7, #14]
 80077ce:	2b03      	cmp	r3, #3
 80077d0:	f040 80e0 	bne.w	8007994 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	220d      	movs	r2, #13
 80077d8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	705a      	strb	r2, [r3, #1]
      break;
 80077e0:	e0d8      	b.n	8007994 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80077e2:	2109      	movs	r1, #9
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 f99d 	bl	8007b24 <USBH_Get_CfgDesc>
 80077ea:	4603      	mov	r3, r0
 80077ec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077ee:	7bbb      	ldrb	r3, [r7, #14]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d103      	bne.n	80077fc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2204      	movs	r2, #4
 80077f8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80077fa:	e0cd      	b.n	8007998 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077fc:	7bbb      	ldrb	r3, [r7, #14]
 80077fe:	2b03      	cmp	r3, #3
 8007800:	f040 80ca 	bne.w	8007998 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800780a:	3301      	adds	r3, #1
 800780c:	b2da      	uxtb	r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800781a:	2b03      	cmp	r3, #3
 800781c:	d903      	bls.n	8007826 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	220d      	movs	r2, #13
 8007822:	701a      	strb	r2, [r3, #0]
      break;
 8007824:	e0b8      	b.n	8007998 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	795b      	ldrb	r3, [r3, #5]
 800782a:	4619      	mov	r1, r3
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 fee9 	bl	8008604 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	791b      	ldrb	r3, [r3, #4]
 8007836:	4619      	mov	r1, r3
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fee3 	bl	8008604 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	701a      	strb	r2, [r3, #0]
      break;
 800784a:	e0a5      	b.n	8007998 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007852:	4619      	mov	r1, r3
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 f965 	bl	8007b24 <USBH_Get_CfgDesc>
 800785a:	4603      	mov	r3, r0
 800785c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800785e:	7bbb      	ldrb	r3, [r7, #14]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d103      	bne.n	800786c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2205      	movs	r2, #5
 8007868:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800786a:	e097      	b.n	800799c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800786c:	7bbb      	ldrb	r3, [r7, #14]
 800786e:	2b03      	cmp	r3, #3
 8007870:	f040 8094 	bne.w	800799c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800787a:	3301      	adds	r3, #1
 800787c:	b2da      	uxtb	r2, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800788a:	2b03      	cmp	r3, #3
 800788c:	d903      	bls.n	8007896 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	220d      	movs	r2, #13
 8007892:	701a      	strb	r2, [r3, #0]
      break;
 8007894:	e082      	b.n	800799c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	795b      	ldrb	r3, [r3, #5]
 800789a:	4619      	mov	r1, r3
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 feb1 	bl	8008604 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	791b      	ldrb	r3, [r3, #4]
 80078a6:	4619      	mov	r1, r3
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 feab 	bl	8008604 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	701a      	strb	r2, [r3, #0]
      break;
 80078ba:	e06f      	b.n	800799c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d019      	beq.n	80078fa <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80078d2:	23ff      	movs	r3, #255	; 0xff
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 f949 	bl	8007b6c <USBH_Get_StringDesc>
 80078da:	4603      	mov	r3, r0
 80078dc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80078de:	7bbb      	ldrb	r3, [r7, #14]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d103      	bne.n	80078ec <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2206      	movs	r2, #6
 80078e8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80078ea:	e059      	b.n	80079a0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078ec:	7bbb      	ldrb	r3, [r7, #14]
 80078ee:	2b03      	cmp	r3, #3
 80078f0:	d156      	bne.n	80079a0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2206      	movs	r2, #6
 80078f6:	705a      	strb	r2, [r3, #1]
      break;
 80078f8:	e052      	b.n	80079a0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2206      	movs	r2, #6
 80078fe:	705a      	strb	r2, [r3, #1]
      break;
 8007900:	e04e      	b.n	80079a0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007908:	2b00      	cmp	r3, #0
 800790a:	d019      	beq.n	8007940 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007918:	23ff      	movs	r3, #255	; 0xff
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 f926 	bl	8007b6c <USBH_Get_StringDesc>
 8007920:	4603      	mov	r3, r0
 8007922:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007924:	7bbb      	ldrb	r3, [r7, #14]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d103      	bne.n	8007932 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2207      	movs	r2, #7
 800792e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007930:	e038      	b.n	80079a4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007932:	7bbb      	ldrb	r3, [r7, #14]
 8007934:	2b03      	cmp	r3, #3
 8007936:	d135      	bne.n	80079a4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2207      	movs	r2, #7
 800793c:	705a      	strb	r2, [r3, #1]
      break;
 800793e:	e031      	b.n	80079a4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2207      	movs	r2, #7
 8007944:	705a      	strb	r2, [r3, #1]
      break;
 8007946:	e02d      	b.n	80079a4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800794e:	2b00      	cmp	r3, #0
 8007950:	d017      	beq.n	8007982 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800795e:	23ff      	movs	r3, #255	; 0xff
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f903 	bl	8007b6c <USBH_Get_StringDesc>
 8007966:	4603      	mov	r3, r0
 8007968:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800796a:	7bbb      	ldrb	r3, [r7, #14]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d102      	bne.n	8007976 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007970:	2300      	movs	r3, #0
 8007972:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007974:	e018      	b.n	80079a8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007976:	7bbb      	ldrb	r3, [r7, #14]
 8007978:	2b03      	cmp	r3, #3
 800797a:	d115      	bne.n	80079a8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800797c:	2300      	movs	r3, #0
 800797e:	73fb      	strb	r3, [r7, #15]
      break;
 8007980:	e012      	b.n	80079a8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007982:	2300      	movs	r3, #0
 8007984:	73fb      	strb	r3, [r7, #15]
      break;
 8007986:	e00f      	b.n	80079a8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007988:	bf00      	nop
 800798a:	e00e      	b.n	80079aa <USBH_HandleEnum+0x3be>
      break;
 800798c:	bf00      	nop
 800798e:	e00c      	b.n	80079aa <USBH_HandleEnum+0x3be>
      break;
 8007990:	bf00      	nop
 8007992:	e00a      	b.n	80079aa <USBH_HandleEnum+0x3be>
      break;
 8007994:	bf00      	nop
 8007996:	e008      	b.n	80079aa <USBH_HandleEnum+0x3be>
      break;
 8007998:	bf00      	nop
 800799a:	e006      	b.n	80079aa <USBH_HandleEnum+0x3be>
      break;
 800799c:	bf00      	nop
 800799e:	e004      	b.n	80079aa <USBH_HandleEnum+0x3be>
      break;
 80079a0:	bf00      	nop
 80079a2:	e002      	b.n	80079aa <USBH_HandleEnum+0x3be>
      break;
 80079a4:	bf00      	nop
 80079a6:	e000      	b.n	80079aa <USBH_HandleEnum+0x3be>
      break;
 80079a8:	bf00      	nop
  }
  return Status;
 80079aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	683a      	ldr	r2, [r7, #0]
 80079c2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80079c6:	bf00      	nop
 80079c8:	370c      	adds	r7, #12
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr

080079d2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b082      	sub	sp, #8
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079e0:	1c5a      	adds	r2, r3, #1
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 f804 	bl	80079f6 <USBH_HandleSof>
}
 80079ee:	bf00      	nop
 80079f0:	3708      	adds	r7, #8
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b082      	sub	sp, #8
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	2b0b      	cmp	r3, #11
 8007a06:	d10a      	bne.n	8007a1e <USBH_HandleSof+0x28>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d005      	beq.n	8007a1e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a18:	699b      	ldr	r3, [r3, #24]
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	4798      	blx	r3
  }
}
 8007a1e:	bf00      	nop
 8007a20:	3708      	adds	r7, #8
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007a26:	b480      	push	{r7}
 8007a28:	b083      	sub	sp, #12
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007a36:	bf00      	nop
}
 8007a38:	370c      	adds	r7, #12
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr

08007a42 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007a42:	b480      	push	{r7}
 8007a44:	b083      	sub	sp, #12
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007a52:	bf00      	nop
}
 8007a54:	370c      	adds	r7, #12
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr

08007a5e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b083      	sub	sp, #12
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f003 fbae 	bl	800b20e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	791b      	ldrb	r3, [r3, #4]
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fda3 	bl	8008604 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	795b      	ldrb	r3, [r3, #5]
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 fd9d 	bl	8008604 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3708      	adds	r7, #8
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b086      	sub	sp, #24
 8007ad8:	af02      	add	r7, sp, #8
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	460b      	mov	r3, r1
 8007ade:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007ae6:	78fb      	ldrb	r3, [r7, #3]
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	9300      	str	r3, [sp, #0]
 8007aec:	4613      	mov	r3, r2
 8007aee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007af2:	2100      	movs	r1, #0
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 f864 	bl	8007bc2 <USBH_GetDescriptor>
 8007afa:	4603      	mov	r3, r0
 8007afc:	73fb      	strb	r3, [r7, #15]
 8007afe:	7bfb      	ldrb	r3, [r7, #15]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d10a      	bne.n	8007b1a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007b10:	78fa      	ldrb	r2, [r7, #3]
 8007b12:	b292      	uxth	r2, r2
 8007b14:	4619      	mov	r1, r3
 8007b16:	f000 f918 	bl	8007d4a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b086      	sub	sp, #24
 8007b28:	af02      	add	r7, sp, #8
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	331c      	adds	r3, #28
 8007b34:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007b36:	887b      	ldrh	r3, [r7, #2]
 8007b38:	9300      	str	r3, [sp, #0]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b40:	2100      	movs	r1, #0
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f83d 	bl	8007bc2 <USBH_GetDescriptor>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	72fb      	strb	r3, [r7, #11]
 8007b4c:	7afb      	ldrb	r3, [r7, #11]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d107      	bne.n	8007b62 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007b58:	887a      	ldrh	r2, [r7, #2]
 8007b5a:	68f9      	ldr	r1, [r7, #12]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f000 f964 	bl	8007e2a <USBH_ParseCfgDesc>
  }

  return status;
 8007b62:	7afb      	ldrb	r3, [r7, #11]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3710      	adds	r7, #16
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b088      	sub	sp, #32
 8007b70:	af02      	add	r7, sp, #8
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	607a      	str	r2, [r7, #4]
 8007b76:	461a      	mov	r2, r3
 8007b78:	460b      	mov	r3, r1
 8007b7a:	72fb      	strb	r3, [r7, #11]
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007b80:	7afb      	ldrb	r3, [r7, #11]
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007b88:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007b90:	893b      	ldrh	r3, [r7, #8]
 8007b92:	9300      	str	r3, [sp, #0]
 8007b94:	460b      	mov	r3, r1
 8007b96:	2100      	movs	r1, #0
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f000 f812 	bl	8007bc2 <USBH_GetDescriptor>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	75fb      	strb	r3, [r7, #23]
 8007ba2:	7dfb      	ldrb	r3, [r7, #23]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d107      	bne.n	8007bb8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007bae:	893a      	ldrh	r2, [r7, #8]
 8007bb0:	6879      	ldr	r1, [r7, #4]
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f000 fa37 	bl	8008026 <USBH_ParseStringDesc>
  }

  return status;
 8007bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3718      	adds	r7, #24
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b084      	sub	sp, #16
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	60f8      	str	r0, [r7, #12]
 8007bca:	607b      	str	r3, [r7, #4]
 8007bcc:	460b      	mov	r3, r1
 8007bce:	72fb      	strb	r3, [r7, #11]
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	789b      	ldrb	r3, [r3, #2]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d11c      	bne.n	8007c16 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007bdc:	7afb      	ldrb	r3, [r7, #11]
 8007bde:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007be2:	b2da      	uxtb	r2, r3
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2206      	movs	r2, #6
 8007bec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	893a      	ldrh	r2, [r7, #8]
 8007bf2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007bf4:	893b      	ldrh	r3, [r7, #8]
 8007bf6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007bfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bfe:	d104      	bne.n	8007c0a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f240 4209 	movw	r2, #1033	; 0x409
 8007c06:	829a      	strh	r2, [r3, #20]
 8007c08:	e002      	b.n	8007c10 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	8b3a      	ldrh	r2, [r7, #24]
 8007c14:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007c16:	8b3b      	ldrh	r3, [r7, #24]
 8007c18:	461a      	mov	r2, r3
 8007c1a:	6879      	ldr	r1, [r7, #4]
 8007c1c:	68f8      	ldr	r0, [r7, #12]
 8007c1e:	f000 fa50 	bl	80080c2 <USBH_CtlReq>
 8007c22:	4603      	mov	r3, r0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3710      	adds	r7, #16
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	460b      	mov	r3, r1
 8007c36:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	789b      	ldrb	r3, [r3, #2]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d10f      	bne.n	8007c60 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2205      	movs	r2, #5
 8007c4a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007c4c:	78fb      	ldrb	r3, [r7, #3]
 8007c4e:	b29a      	uxth	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007c60:	2200      	movs	r2, #0
 8007c62:	2100      	movs	r1, #0
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 fa2c 	bl	80080c2 <USBH_CtlReq>
 8007c6a:	4603      	mov	r3, r0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3708      	adds	r7, #8
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	789b      	ldrb	r3, [r3, #2]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d10e      	bne.n	8007ca6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2209      	movs	r2, #9
 8007c92:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	887a      	ldrh	r2, [r7, #2]
 8007c98:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	2100      	movs	r1, #0
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fa09 	bl	80080c2 <USBH_CtlReq>
 8007cb0:	4603      	mov	r3, r0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3708      	adds	r7, #8
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b082      	sub	sp, #8
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	789b      	ldrb	r3, [r3, #2]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d10f      	bne.n	8007cee <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2203      	movs	r2, #3
 8007cd8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007cda:	78fb      	ldrb	r3, [r7, #3]
 8007cdc:	b29a      	uxth	r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007cee:	2200      	movs	r2, #0
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f9e5 	bl	80080c2 <USBH_CtlReq>
 8007cf8:	4603      	mov	r3, r0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3708      	adds	r7, #8
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b082      	sub	sp, #8
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	789b      	ldrb	r3, [r3, #2]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d10f      	bne.n	8007d36 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2202      	movs	r2, #2
 8007d1a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007d28:	78fb      	ldrb	r3, [r7, #3]
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007d36:	2200      	movs	r2, #0
 8007d38:	2100      	movs	r1, #0
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 f9c1 	bl	80080c2 <USBH_CtlReq>
 8007d40:	4603      	mov	r3, r0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3708      	adds	r7, #8
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007d4a:	b480      	push	{r7}
 8007d4c:	b085      	sub	sp, #20
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	60f8      	str	r0, [r7, #12]
 8007d52:	60b9      	str	r1, [r7, #8]
 8007d54:	4613      	mov	r3, r2
 8007d56:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	781a      	ldrb	r2, [r3, #0]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	785a      	ldrb	r2, [r3, #1]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	3302      	adds	r3, #2
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	3303      	adds	r3, #3
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	021b      	lsls	r3, r3, #8
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	b29a      	uxth	r2, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	791a      	ldrb	r2, [r3, #4]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	795a      	ldrb	r2, [r3, #5]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	799a      	ldrb	r2, [r3, #6]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	79da      	ldrb	r2, [r3, #7]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007da4:	88fb      	ldrh	r3, [r7, #6]
 8007da6:	2b08      	cmp	r3, #8
 8007da8:	d939      	bls.n	8007e1e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	3308      	adds	r3, #8
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	3309      	adds	r3, #9
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	021b      	lsls	r3, r3, #8
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	330a      	adds	r3, #10
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	330b      	adds	r3, #11
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	021b      	lsls	r3, r3, #8
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	330c      	adds	r3, #12
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	330d      	adds	r3, #13
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	021b      	lsls	r3, r3, #8
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	4313      	orrs	r3, r2
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	7b9a      	ldrb	r2, [r3, #14]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	7bda      	ldrb	r2, [r3, #15]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	7c1a      	ldrb	r2, [r3, #16]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	7c5a      	ldrb	r2, [r3, #17]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	745a      	strb	r2, [r3, #17]
  }
}
 8007e1e:	bf00      	nop
 8007e20:	3714      	adds	r7, #20
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr

08007e2a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b08a      	sub	sp, #40	; 0x28
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	60f8      	str	r0, [r7, #12]
 8007e32:	60b9      	str	r1, [r7, #8]
 8007e34:	4613      	mov	r3, r2
 8007e36:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007e42:	2300      	movs	r3, #0
 8007e44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	781a      	ldrb	r2, [r3, #0]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	785a      	ldrb	r2, [r3, #1]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	3302      	adds	r3, #2
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	3303      	adds	r3, #3
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	021b      	lsls	r3, r3, #8
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	4313      	orrs	r3, r2
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	791a      	ldrb	r2, [r3, #4]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	795a      	ldrb	r2, [r3, #5]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	799a      	ldrb	r2, [r3, #6]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	79da      	ldrb	r2, [r3, #7]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	7a1a      	ldrb	r2, [r3, #8]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007ea0:	88fb      	ldrh	r3, [r7, #6]
 8007ea2:	2b09      	cmp	r3, #9
 8007ea4:	d95f      	bls.n	8007f66 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007ea6:	2309      	movs	r3, #9
 8007ea8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007eae:	e051      	b.n	8007f54 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007eb0:	f107 0316 	add.w	r3, r7, #22
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007eb8:	f000 f8e8 	bl	800808c <USBH_GetNextDesc>
 8007ebc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec0:	785b      	ldrb	r3, [r3, #1]
 8007ec2:	2b04      	cmp	r3, #4
 8007ec4:	d146      	bne.n	8007f54 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007ec6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007eca:	221a      	movs	r2, #26
 8007ecc:	fb02 f303 	mul.w	r3, r2, r3
 8007ed0:	3308      	adds	r3, #8
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	3302      	adds	r3, #2
 8007ed8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007eda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007edc:	69f8      	ldr	r0, [r7, #28]
 8007ede:	f000 f846 	bl	8007f6e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007eec:	e022      	b.n	8007f34 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007eee:	f107 0316 	add.w	r3, r7, #22
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ef6:	f000 f8c9 	bl	800808c <USBH_GetNextDesc>
 8007efa:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efe:	785b      	ldrb	r3, [r3, #1]
 8007f00:	2b05      	cmp	r3, #5
 8007f02:	d117      	bne.n	8007f34 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007f04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f08:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007f0c:	3201      	adds	r2, #1
 8007f0e:	00d2      	lsls	r2, r2, #3
 8007f10:	211a      	movs	r1, #26
 8007f12:	fb01 f303 	mul.w	r3, r1, r3
 8007f16:	4413      	add	r3, r2
 8007f18:	3308      	adds	r3, #8
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	3304      	adds	r3, #4
 8007f20:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007f22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f24:	69b8      	ldr	r0, [r7, #24]
 8007f26:	f000 f851 	bl	8007fcc <USBH_ParseEPDesc>
            ep_ix++;
 8007f2a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007f2e:	3301      	adds	r3, #1
 8007f30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	791b      	ldrb	r3, [r3, #4]
 8007f38:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d204      	bcs.n	8007f4a <USBH_ParseCfgDesc+0x120>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	885a      	ldrh	r2, [r3, #2]
 8007f44:	8afb      	ldrh	r3, [r7, #22]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d8d1      	bhi.n	8007eee <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007f4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f4e:	3301      	adds	r3, #1
 8007f50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007f54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d804      	bhi.n	8007f66 <USBH_ParseCfgDesc+0x13c>
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	885a      	ldrh	r2, [r3, #2]
 8007f60:	8afb      	ldrh	r3, [r7, #22]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d8a4      	bhi.n	8007eb0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007f66:	bf00      	nop
 8007f68:	3728      	adds	r7, #40	; 0x28
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007f6e:	b480      	push	{r7}
 8007f70:	b083      	sub	sp, #12
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
 8007f76:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	781a      	ldrb	r2, [r3, #0]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	785a      	ldrb	r2, [r3, #1]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	789a      	ldrb	r2, [r3, #2]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	78da      	ldrb	r2, [r3, #3]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	791a      	ldrb	r2, [r3, #4]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	795a      	ldrb	r2, [r3, #5]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	799a      	ldrb	r2, [r3, #6]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	79da      	ldrb	r2, [r3, #7]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	7a1a      	ldrb	r2, [r3, #8]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	721a      	strb	r2, [r3, #8]
}
 8007fc0:	bf00      	nop
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	781a      	ldrb	r2, [r3, #0]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	785a      	ldrb	r2, [r3, #1]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	789a      	ldrb	r2, [r3, #2]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	78da      	ldrb	r2, [r3, #3]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	3304      	adds	r3, #4
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	b29a      	uxth	r2, r3
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	3305      	adds	r3, #5
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	b29b      	uxth	r3, r3
 8008006:	021b      	lsls	r3, r3, #8
 8008008:	b29b      	uxth	r3, r3
 800800a:	4313      	orrs	r3, r2
 800800c:	b29a      	uxth	r2, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	799a      	ldrb	r2, [r3, #6]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	719a      	strb	r2, [r3, #6]
}
 800801a:	bf00      	nop
 800801c:	370c      	adds	r7, #12
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr

08008026 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008026:	b480      	push	{r7}
 8008028:	b087      	sub	sp, #28
 800802a:	af00      	add	r7, sp, #0
 800802c:	60f8      	str	r0, [r7, #12]
 800802e:	60b9      	str	r1, [r7, #8]
 8008030:	4613      	mov	r3, r2
 8008032:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	3301      	adds	r3, #1
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	2b03      	cmp	r3, #3
 800803c:	d120      	bne.n	8008080 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	1e9a      	subs	r2, r3, #2
 8008044:	88fb      	ldrh	r3, [r7, #6]
 8008046:	4293      	cmp	r3, r2
 8008048:	bf28      	it	cs
 800804a:	4613      	movcs	r3, r2
 800804c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	3302      	adds	r3, #2
 8008052:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008054:	2300      	movs	r3, #0
 8008056:	82fb      	strh	r3, [r7, #22]
 8008058:	e00b      	b.n	8008072 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800805a:	8afb      	ldrh	r3, [r7, #22]
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	4413      	add	r3, r2
 8008060:	781a      	ldrb	r2, [r3, #0]
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	3301      	adds	r3, #1
 800806a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800806c:	8afb      	ldrh	r3, [r7, #22]
 800806e:	3302      	adds	r3, #2
 8008070:	82fb      	strh	r3, [r7, #22]
 8008072:	8afa      	ldrh	r2, [r7, #22]
 8008074:	8abb      	ldrh	r3, [r7, #20]
 8008076:	429a      	cmp	r2, r3
 8008078:	d3ef      	bcc.n	800805a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	2200      	movs	r2, #0
 800807e:	701a      	strb	r2, [r3, #0]
  }
}
 8008080:	bf00      	nop
 8008082:	371c      	adds	r7, #28
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	881a      	ldrh	r2, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	b29b      	uxth	r3, r3
 80080a0:	4413      	add	r3, r2
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4413      	add	r3, r2
 80080b2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80080b4:	68fb      	ldr	r3, [r7, #12]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3714      	adds	r7, #20
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr

080080c2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b086      	sub	sp, #24
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	60f8      	str	r0, [r7, #12]
 80080ca:	60b9      	str	r1, [r7, #8]
 80080cc:	4613      	mov	r3, r2
 80080ce:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80080d0:	2301      	movs	r3, #1
 80080d2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	789b      	ldrb	r3, [r3, #2]
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d002      	beq.n	80080e2 <USBH_CtlReq+0x20>
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d00f      	beq.n	8008100 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80080e0:	e027      	b.n	8008132 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	68ba      	ldr	r2, [r7, #8]
 80080e6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	88fa      	ldrh	r2, [r7, #6]
 80080ec:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2201      	movs	r2, #1
 80080f2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2202      	movs	r2, #2
 80080f8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80080fa:	2301      	movs	r3, #1
 80080fc:	75fb      	strb	r3, [r7, #23]
      break;
 80080fe:	e018      	b.n	8008132 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f000 f81b 	bl	800813c <USBH_HandleControl>
 8008106:	4603      	mov	r3, r0
 8008108:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800810a:	7dfb      	ldrb	r3, [r7, #23]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d002      	beq.n	8008116 <USBH_CtlReq+0x54>
 8008110:	7dfb      	ldrb	r3, [r7, #23]
 8008112:	2b03      	cmp	r3, #3
 8008114:	d106      	bne.n	8008124 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2201      	movs	r2, #1
 800811a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2200      	movs	r2, #0
 8008120:	761a      	strb	r2, [r3, #24]
      break;
 8008122:	e005      	b.n	8008130 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008124:	7dfb      	ldrb	r3, [r7, #23]
 8008126:	2b02      	cmp	r3, #2
 8008128:	d102      	bne.n	8008130 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2201      	movs	r2, #1
 800812e:	709a      	strb	r2, [r3, #2]
      break;
 8008130:	bf00      	nop
  }
  return status;
 8008132:	7dfb      	ldrb	r3, [r7, #23]
}
 8008134:	4618      	mov	r0, r3
 8008136:	3718      	adds	r7, #24
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b086      	sub	sp, #24
 8008140:	af02      	add	r7, sp, #8
 8008142:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008144:	2301      	movs	r3, #1
 8008146:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008148:	2300      	movs	r3, #0
 800814a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	7e1b      	ldrb	r3, [r3, #24]
 8008150:	3b01      	subs	r3, #1
 8008152:	2b0a      	cmp	r3, #10
 8008154:	f200 8156 	bhi.w	8008404 <USBH_HandleControl+0x2c8>
 8008158:	a201      	add	r2, pc, #4	; (adr r2, 8008160 <USBH_HandleControl+0x24>)
 800815a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815e:	bf00      	nop
 8008160:	0800818d 	.word	0x0800818d
 8008164:	080081a7 	.word	0x080081a7
 8008168:	08008211 	.word	0x08008211
 800816c:	08008237 	.word	0x08008237
 8008170:	0800826f 	.word	0x0800826f
 8008174:	08008299 	.word	0x08008299
 8008178:	080082eb 	.word	0x080082eb
 800817c:	0800830d 	.word	0x0800830d
 8008180:	08008349 	.word	0x08008349
 8008184:	0800836f 	.word	0x0800836f
 8008188:	080083ad 	.word	0x080083ad
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f103 0110 	add.w	r1, r3, #16
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	795b      	ldrb	r3, [r3, #5]
 8008196:	461a      	mov	r2, r3
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 f943 	bl	8008424 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2202      	movs	r2, #2
 80081a2:	761a      	strb	r2, [r3, #24]
      break;
 80081a4:	e139      	b.n	800841a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	795b      	ldrb	r3, [r3, #5]
 80081aa:	4619      	mov	r1, r3
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f003 f91d 	bl	800b3ec <USBH_LL_GetURBState>
 80081b2:	4603      	mov	r3, r0
 80081b4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80081b6:	7bbb      	ldrb	r3, [r7, #14]
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d11e      	bne.n	80081fa <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	7c1b      	ldrb	r3, [r3, #16]
 80081c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80081c4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	8adb      	ldrh	r3, [r3, #22]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00a      	beq.n	80081e4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80081ce:	7b7b      	ldrb	r3, [r7, #13]
 80081d0:	2b80      	cmp	r3, #128	; 0x80
 80081d2:	d103      	bne.n	80081dc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2203      	movs	r2, #3
 80081d8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80081da:	e115      	b.n	8008408 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2205      	movs	r2, #5
 80081e0:	761a      	strb	r2, [r3, #24]
      break;
 80081e2:	e111      	b.n	8008408 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80081e4:	7b7b      	ldrb	r3, [r7, #13]
 80081e6:	2b80      	cmp	r3, #128	; 0x80
 80081e8:	d103      	bne.n	80081f2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2209      	movs	r2, #9
 80081ee:	761a      	strb	r2, [r3, #24]
      break;
 80081f0:	e10a      	b.n	8008408 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2207      	movs	r2, #7
 80081f6:	761a      	strb	r2, [r3, #24]
      break;
 80081f8:	e106      	b.n	8008408 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80081fa:	7bbb      	ldrb	r3, [r7, #14]
 80081fc:	2b04      	cmp	r3, #4
 80081fe:	d003      	beq.n	8008208 <USBH_HandleControl+0xcc>
 8008200:	7bbb      	ldrb	r3, [r7, #14]
 8008202:	2b02      	cmp	r3, #2
 8008204:	f040 8100 	bne.w	8008408 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	220b      	movs	r2, #11
 800820c:	761a      	strb	r2, [r3, #24]
      break;
 800820e:	e0fb      	b.n	8008408 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008216:	b29a      	uxth	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6899      	ldr	r1, [r3, #8]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	899a      	ldrh	r2, [r3, #12]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	791b      	ldrb	r3, [r3, #4]
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 f93a 	bl	80084a2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2204      	movs	r2, #4
 8008232:	761a      	strb	r2, [r3, #24]
      break;
 8008234:	e0f1      	b.n	800841a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	791b      	ldrb	r3, [r3, #4]
 800823a:	4619      	mov	r1, r3
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f003 f8d5 	bl	800b3ec <USBH_LL_GetURBState>
 8008242:	4603      	mov	r3, r0
 8008244:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008246:	7bbb      	ldrb	r3, [r7, #14]
 8008248:	2b01      	cmp	r3, #1
 800824a:	d102      	bne.n	8008252 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2209      	movs	r2, #9
 8008250:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008252:	7bbb      	ldrb	r3, [r7, #14]
 8008254:	2b05      	cmp	r3, #5
 8008256:	d102      	bne.n	800825e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008258:	2303      	movs	r3, #3
 800825a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800825c:	e0d6      	b.n	800840c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800825e:	7bbb      	ldrb	r3, [r7, #14]
 8008260:	2b04      	cmp	r3, #4
 8008262:	f040 80d3 	bne.w	800840c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	220b      	movs	r2, #11
 800826a:	761a      	strb	r2, [r3, #24]
      break;
 800826c:	e0ce      	b.n	800840c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6899      	ldr	r1, [r3, #8]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	899a      	ldrh	r2, [r3, #12]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	795b      	ldrb	r3, [r3, #5]
 800827a:	2001      	movs	r0, #1
 800827c:	9000      	str	r0, [sp, #0]
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f8ea 	bl	8008458 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800828a:	b29a      	uxth	r2, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2206      	movs	r2, #6
 8008294:	761a      	strb	r2, [r3, #24]
      break;
 8008296:	e0c0      	b.n	800841a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	795b      	ldrb	r3, [r3, #5]
 800829c:	4619      	mov	r1, r3
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f003 f8a4 	bl	800b3ec <USBH_LL_GetURBState>
 80082a4:	4603      	mov	r3, r0
 80082a6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80082a8:	7bbb      	ldrb	r3, [r7, #14]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d103      	bne.n	80082b6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2207      	movs	r2, #7
 80082b2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80082b4:	e0ac      	b.n	8008410 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80082b6:	7bbb      	ldrb	r3, [r7, #14]
 80082b8:	2b05      	cmp	r3, #5
 80082ba:	d105      	bne.n	80082c8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	220c      	movs	r2, #12
 80082c0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80082c2:	2303      	movs	r3, #3
 80082c4:	73fb      	strb	r3, [r7, #15]
      break;
 80082c6:	e0a3      	b.n	8008410 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80082c8:	7bbb      	ldrb	r3, [r7, #14]
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	d103      	bne.n	80082d6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2205      	movs	r2, #5
 80082d2:	761a      	strb	r2, [r3, #24]
      break;
 80082d4:	e09c      	b.n	8008410 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80082d6:	7bbb      	ldrb	r3, [r7, #14]
 80082d8:	2b04      	cmp	r3, #4
 80082da:	f040 8099 	bne.w	8008410 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	220b      	movs	r2, #11
 80082e2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80082e4:	2302      	movs	r3, #2
 80082e6:	73fb      	strb	r3, [r7, #15]
      break;
 80082e8:	e092      	b.n	8008410 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	791b      	ldrb	r3, [r3, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	2100      	movs	r1, #0
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 f8d5 	bl	80084a2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80082fe:	b29a      	uxth	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2208      	movs	r2, #8
 8008308:	761a      	strb	r2, [r3, #24]

      break;
 800830a:	e086      	b.n	800841a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	791b      	ldrb	r3, [r3, #4]
 8008310:	4619      	mov	r1, r3
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f003 f86a 	bl	800b3ec <USBH_LL_GetURBState>
 8008318:	4603      	mov	r3, r0
 800831a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800831c:	7bbb      	ldrb	r3, [r7, #14]
 800831e:	2b01      	cmp	r3, #1
 8008320:	d105      	bne.n	800832e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	220d      	movs	r2, #13
 8008326:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008328:	2300      	movs	r3, #0
 800832a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800832c:	e072      	b.n	8008414 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800832e:	7bbb      	ldrb	r3, [r7, #14]
 8008330:	2b04      	cmp	r3, #4
 8008332:	d103      	bne.n	800833c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	220b      	movs	r2, #11
 8008338:	761a      	strb	r2, [r3, #24]
      break;
 800833a:	e06b      	b.n	8008414 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800833c:	7bbb      	ldrb	r3, [r7, #14]
 800833e:	2b05      	cmp	r3, #5
 8008340:	d168      	bne.n	8008414 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008342:	2303      	movs	r3, #3
 8008344:	73fb      	strb	r3, [r7, #15]
      break;
 8008346:	e065      	b.n	8008414 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	795b      	ldrb	r3, [r3, #5]
 800834c:	2201      	movs	r2, #1
 800834e:	9200      	str	r2, [sp, #0]
 8008350:	2200      	movs	r2, #0
 8008352:	2100      	movs	r1, #0
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 f87f 	bl	8008458 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008360:	b29a      	uxth	r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	220a      	movs	r2, #10
 800836a:	761a      	strb	r2, [r3, #24]
      break;
 800836c:	e055      	b.n	800841a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	795b      	ldrb	r3, [r3, #5]
 8008372:	4619      	mov	r1, r3
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f003 f839 	bl	800b3ec <USBH_LL_GetURBState>
 800837a:	4603      	mov	r3, r0
 800837c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800837e:	7bbb      	ldrb	r3, [r7, #14]
 8008380:	2b01      	cmp	r3, #1
 8008382:	d105      	bne.n	8008390 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008384:	2300      	movs	r3, #0
 8008386:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	220d      	movs	r2, #13
 800838c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800838e:	e043      	b.n	8008418 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008390:	7bbb      	ldrb	r3, [r7, #14]
 8008392:	2b02      	cmp	r3, #2
 8008394:	d103      	bne.n	800839e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2209      	movs	r2, #9
 800839a:	761a      	strb	r2, [r3, #24]
      break;
 800839c:	e03c      	b.n	8008418 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800839e:	7bbb      	ldrb	r3, [r7, #14]
 80083a0:	2b04      	cmp	r3, #4
 80083a2:	d139      	bne.n	8008418 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	220b      	movs	r2, #11
 80083a8:	761a      	strb	r2, [r3, #24]
      break;
 80083aa:	e035      	b.n	8008418 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	7e5b      	ldrb	r3, [r3, #25]
 80083b0:	3301      	adds	r3, #1
 80083b2:	b2da      	uxtb	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	765a      	strb	r2, [r3, #25]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	7e5b      	ldrb	r3, [r3, #25]
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d806      	bhi.n	80083ce <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2201      	movs	r2, #1
 80083ca:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80083cc:	e025      	b.n	800841a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80083d4:	2106      	movs	r1, #6
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	795b      	ldrb	r3, [r3, #5]
 80083e4:	4619      	mov	r1, r3
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 f90c 	bl	8008604 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	791b      	ldrb	r3, [r3, #4]
 80083f0:	4619      	mov	r1, r3
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f906 	bl	8008604 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80083fe:	2302      	movs	r3, #2
 8008400:	73fb      	strb	r3, [r7, #15]
      break;
 8008402:	e00a      	b.n	800841a <USBH_HandleControl+0x2de>

    default:
      break;
 8008404:	bf00      	nop
 8008406:	e008      	b.n	800841a <USBH_HandleControl+0x2de>
      break;
 8008408:	bf00      	nop
 800840a:	e006      	b.n	800841a <USBH_HandleControl+0x2de>
      break;
 800840c:	bf00      	nop
 800840e:	e004      	b.n	800841a <USBH_HandleControl+0x2de>
      break;
 8008410:	bf00      	nop
 8008412:	e002      	b.n	800841a <USBH_HandleControl+0x2de>
      break;
 8008414:	bf00      	nop
 8008416:	e000      	b.n	800841a <USBH_HandleControl+0x2de>
      break;
 8008418:	bf00      	nop
  }

  return status;
 800841a:	7bfb      	ldrb	r3, [r7, #15]
}
 800841c:	4618      	mov	r0, r3
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b088      	sub	sp, #32
 8008428:	af04      	add	r7, sp, #16
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	4613      	mov	r3, r2
 8008430:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008432:	79f9      	ldrb	r1, [r7, #7]
 8008434:	2300      	movs	r3, #0
 8008436:	9303      	str	r3, [sp, #12]
 8008438:	2308      	movs	r3, #8
 800843a:	9302      	str	r3, [sp, #8]
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	9301      	str	r3, [sp, #4]
 8008440:	2300      	movs	r3, #0
 8008442:	9300      	str	r3, [sp, #0]
 8008444:	2300      	movs	r3, #0
 8008446:	2200      	movs	r2, #0
 8008448:	68f8      	ldr	r0, [r7, #12]
 800844a:	f002 ff9e 	bl	800b38a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800844e:	2300      	movs	r3, #0
}
 8008450:	4618      	mov	r0, r3
 8008452:	3710      	adds	r7, #16
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b088      	sub	sp, #32
 800845c:	af04      	add	r7, sp, #16
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	4611      	mov	r1, r2
 8008464:	461a      	mov	r2, r3
 8008466:	460b      	mov	r3, r1
 8008468:	80fb      	strh	r3, [r7, #6]
 800846a:	4613      	mov	r3, r2
 800846c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008474:	2b00      	cmp	r3, #0
 8008476:	d001      	beq.n	800847c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008478:	2300      	movs	r3, #0
 800847a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800847c:	7979      	ldrb	r1, [r7, #5]
 800847e:	7e3b      	ldrb	r3, [r7, #24]
 8008480:	9303      	str	r3, [sp, #12]
 8008482:	88fb      	ldrh	r3, [r7, #6]
 8008484:	9302      	str	r3, [sp, #8]
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	9301      	str	r3, [sp, #4]
 800848a:	2301      	movs	r3, #1
 800848c:	9300      	str	r3, [sp, #0]
 800848e:	2300      	movs	r3, #0
 8008490:	2200      	movs	r2, #0
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f002 ff79 	bl	800b38a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b088      	sub	sp, #32
 80084a6:	af04      	add	r7, sp, #16
 80084a8:	60f8      	str	r0, [r7, #12]
 80084aa:	60b9      	str	r1, [r7, #8]
 80084ac:	4611      	mov	r1, r2
 80084ae:	461a      	mov	r2, r3
 80084b0:	460b      	mov	r3, r1
 80084b2:	80fb      	strh	r3, [r7, #6]
 80084b4:	4613      	mov	r3, r2
 80084b6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80084b8:	7979      	ldrb	r1, [r7, #5]
 80084ba:	2300      	movs	r3, #0
 80084bc:	9303      	str	r3, [sp, #12]
 80084be:	88fb      	ldrh	r3, [r7, #6]
 80084c0:	9302      	str	r3, [sp, #8]
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	9301      	str	r3, [sp, #4]
 80084c6:	2301      	movs	r3, #1
 80084c8:	9300      	str	r3, [sp, #0]
 80084ca:	2300      	movs	r3, #0
 80084cc:	2201      	movs	r2, #1
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f002 ff5b 	bl	800b38a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80084d4:	2300      	movs	r3, #0

}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b088      	sub	sp, #32
 80084e2:	af04      	add	r7, sp, #16
 80084e4:	60f8      	str	r0, [r7, #12]
 80084e6:	60b9      	str	r1, [r7, #8]
 80084e8:	4611      	mov	r1, r2
 80084ea:	461a      	mov	r2, r3
 80084ec:	460b      	mov	r3, r1
 80084ee:	80fb      	strh	r3, [r7, #6]
 80084f0:	4613      	mov	r3, r2
 80084f2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d001      	beq.n	8008502 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80084fe:	2300      	movs	r3, #0
 8008500:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008502:	7979      	ldrb	r1, [r7, #5]
 8008504:	7e3b      	ldrb	r3, [r7, #24]
 8008506:	9303      	str	r3, [sp, #12]
 8008508:	88fb      	ldrh	r3, [r7, #6]
 800850a:	9302      	str	r3, [sp, #8]
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	9301      	str	r3, [sp, #4]
 8008510:	2301      	movs	r3, #1
 8008512:	9300      	str	r3, [sp, #0]
 8008514:	2302      	movs	r3, #2
 8008516:	2200      	movs	r2, #0
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	f002 ff36 	bl	800b38a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800851e:	2300      	movs	r3, #0
}
 8008520:	4618      	mov	r0, r3
 8008522:	3710      	adds	r7, #16
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b088      	sub	sp, #32
 800852c:	af04      	add	r7, sp, #16
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	4611      	mov	r1, r2
 8008534:	461a      	mov	r2, r3
 8008536:	460b      	mov	r3, r1
 8008538:	80fb      	strh	r3, [r7, #6]
 800853a:	4613      	mov	r3, r2
 800853c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800853e:	7979      	ldrb	r1, [r7, #5]
 8008540:	2300      	movs	r3, #0
 8008542:	9303      	str	r3, [sp, #12]
 8008544:	88fb      	ldrh	r3, [r7, #6]
 8008546:	9302      	str	r3, [sp, #8]
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	9301      	str	r3, [sp, #4]
 800854c:	2301      	movs	r3, #1
 800854e:	9300      	str	r3, [sp, #0]
 8008550:	2302      	movs	r3, #2
 8008552:	2201      	movs	r2, #1
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f002 ff18 	bl	800b38a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b086      	sub	sp, #24
 8008568:	af04      	add	r7, sp, #16
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	4608      	mov	r0, r1
 800856e:	4611      	mov	r1, r2
 8008570:	461a      	mov	r2, r3
 8008572:	4603      	mov	r3, r0
 8008574:	70fb      	strb	r3, [r7, #3]
 8008576:	460b      	mov	r3, r1
 8008578:	70bb      	strb	r3, [r7, #2]
 800857a:	4613      	mov	r3, r2
 800857c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800857e:	7878      	ldrb	r0, [r7, #1]
 8008580:	78ba      	ldrb	r2, [r7, #2]
 8008582:	78f9      	ldrb	r1, [r7, #3]
 8008584:	8b3b      	ldrh	r3, [r7, #24]
 8008586:	9302      	str	r3, [sp, #8]
 8008588:	7d3b      	ldrb	r3, [r7, #20]
 800858a:	9301      	str	r3, [sp, #4]
 800858c:	7c3b      	ldrb	r3, [r7, #16]
 800858e:	9300      	str	r3, [sp, #0]
 8008590:	4603      	mov	r3, r0
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f002 feab 	bl	800b2ee <USBH_LL_OpenPipe>

  return USBH_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b082      	sub	sp, #8
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	460b      	mov	r3, r1
 80085ac:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80085ae:	78fb      	ldrb	r3, [r7, #3]
 80085b0:	4619      	mov	r1, r3
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f002 feca 	bl	800b34c <USBH_LL_ClosePipe>

  return USBH_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3708      	adds	r7, #8
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b084      	sub	sp, #16
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
 80085ca:	460b      	mov	r3, r1
 80085cc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 f836 	bl	8008640 <USBH_GetFreePipe>
 80085d4:	4603      	mov	r3, r0
 80085d6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80085d8:	89fb      	ldrh	r3, [r7, #14]
 80085da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085de:	4293      	cmp	r3, r2
 80085e0:	d00a      	beq.n	80085f8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80085e2:	78fa      	ldrb	r2, [r7, #3]
 80085e4:	89fb      	ldrh	r3, [r7, #14]
 80085e6:	f003 030f 	and.w	r3, r3, #15
 80085ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80085ee:	6879      	ldr	r1, [r7, #4]
 80085f0:	33e0      	adds	r3, #224	; 0xe0
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	440b      	add	r3, r1
 80085f6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80085f8:	89fb      	ldrh	r3, [r7, #14]
 80085fa:	b2db      	uxtb	r3, r3
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3710      	adds	r7, #16
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	460b      	mov	r3, r1
 800860e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008610:	78fb      	ldrb	r3, [r7, #3]
 8008612:	2b0a      	cmp	r3, #10
 8008614:	d80d      	bhi.n	8008632 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008616:	78fb      	ldrb	r3, [r7, #3]
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	33e0      	adds	r3, #224	; 0xe0
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	4413      	add	r3, r2
 8008620:	685a      	ldr	r2, [r3, #4]
 8008622:	78fb      	ldrb	r3, [r7, #3]
 8008624:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008628:	6879      	ldr	r1, [r7, #4]
 800862a:	33e0      	adds	r3, #224	; 0xe0
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	440b      	add	r3, r1
 8008630:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008640:	b480      	push	{r7}
 8008642:	b085      	sub	sp, #20
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008648:	2300      	movs	r3, #0
 800864a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800864c:	2300      	movs	r3, #0
 800864e:	73fb      	strb	r3, [r7, #15]
 8008650:	e00f      	b.n	8008672 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008652:	7bfb      	ldrb	r3, [r7, #15]
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	33e0      	adds	r3, #224	; 0xe0
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4413      	add	r3, r2
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008662:	2b00      	cmp	r3, #0
 8008664:	d102      	bne.n	800866c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008666:	7bfb      	ldrb	r3, [r7, #15]
 8008668:	b29b      	uxth	r3, r3
 800866a:	e007      	b.n	800867c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800866c:	7bfb      	ldrb	r3, [r7, #15]
 800866e:	3301      	adds	r3, #1
 8008670:	73fb      	strb	r3, [r7, #15]
 8008672:	7bfb      	ldrb	r3, [r7, #15]
 8008674:	2b0a      	cmp	r3, #10
 8008676:	d9ec      	bls.n	8008652 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008678:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800867c:	4618      	mov	r0, r3
 800867e:	3714      	adds	r7, #20
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	4603      	mov	r3, r0
 8008690:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008692:	79fb      	ldrb	r3, [r7, #7]
 8008694:	4a08      	ldr	r2, [pc, #32]	; (80086b8 <disk_status+0x30>)
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	4413      	add	r3, r2
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	79fa      	ldrb	r2, [r7, #7]
 80086a0:	4905      	ldr	r1, [pc, #20]	; (80086b8 <disk_status+0x30>)
 80086a2:	440a      	add	r2, r1
 80086a4:	7a12      	ldrb	r2, [r2, #8]
 80086a6:	4610      	mov	r0, r2
 80086a8:	4798      	blx	r3
 80086aa:	4603      	mov	r3, r0
 80086ac:	73fb      	strb	r3, [r7, #15]
  return stat;
 80086ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3710      	adds	r7, #16
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	200000d8 	.word	0x200000d8

080086bc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	4603      	mov	r3, r0
 80086c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80086c6:	2300      	movs	r3, #0
 80086c8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80086ca:	79fb      	ldrb	r3, [r7, #7]
 80086cc:	4a0d      	ldr	r2, [pc, #52]	; (8008704 <disk_initialize+0x48>)
 80086ce:	5cd3      	ldrb	r3, [r2, r3]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d111      	bne.n	80086f8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80086d4:	79fb      	ldrb	r3, [r7, #7]
 80086d6:	4a0b      	ldr	r2, [pc, #44]	; (8008704 <disk_initialize+0x48>)
 80086d8:	2101      	movs	r1, #1
 80086da:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80086dc:	79fb      	ldrb	r3, [r7, #7]
 80086de:	4a09      	ldr	r2, [pc, #36]	; (8008704 <disk_initialize+0x48>)
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	4413      	add	r3, r2
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	79fa      	ldrb	r2, [r7, #7]
 80086ea:	4906      	ldr	r1, [pc, #24]	; (8008704 <disk_initialize+0x48>)
 80086ec:	440a      	add	r2, r1
 80086ee:	7a12      	ldrb	r2, [r2, #8]
 80086f0:	4610      	mov	r0, r2
 80086f2:	4798      	blx	r3
 80086f4:	4603      	mov	r3, r0
 80086f6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80086f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3710      	adds	r7, #16
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	200000d8 	.word	0x200000d8

08008708 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008708:	b590      	push	{r4, r7, lr}
 800870a:	b087      	sub	sp, #28
 800870c:	af00      	add	r7, sp, #0
 800870e:	60b9      	str	r1, [r7, #8]
 8008710:	607a      	str	r2, [r7, #4]
 8008712:	603b      	str	r3, [r7, #0]
 8008714:	4603      	mov	r3, r0
 8008716:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008718:	7bfb      	ldrb	r3, [r7, #15]
 800871a:	4a0a      	ldr	r2, [pc, #40]	; (8008744 <disk_read+0x3c>)
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	4413      	add	r3, r2
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	689c      	ldr	r4, [r3, #8]
 8008724:	7bfb      	ldrb	r3, [r7, #15]
 8008726:	4a07      	ldr	r2, [pc, #28]	; (8008744 <disk_read+0x3c>)
 8008728:	4413      	add	r3, r2
 800872a:	7a18      	ldrb	r0, [r3, #8]
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	68b9      	ldr	r1, [r7, #8]
 8008732:	47a0      	blx	r4
 8008734:	4603      	mov	r3, r0
 8008736:	75fb      	strb	r3, [r7, #23]
  return res;
 8008738:	7dfb      	ldrb	r3, [r7, #23]
}
 800873a:	4618      	mov	r0, r3
 800873c:	371c      	adds	r7, #28
 800873e:	46bd      	mov	sp, r7
 8008740:	bd90      	pop	{r4, r7, pc}
 8008742:	bf00      	nop
 8008744:	200000d8 	.word	0x200000d8

08008748 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008748:	b590      	push	{r4, r7, lr}
 800874a:	b087      	sub	sp, #28
 800874c:	af00      	add	r7, sp, #0
 800874e:	60b9      	str	r1, [r7, #8]
 8008750:	607a      	str	r2, [r7, #4]
 8008752:	603b      	str	r3, [r7, #0]
 8008754:	4603      	mov	r3, r0
 8008756:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008758:	7bfb      	ldrb	r3, [r7, #15]
 800875a:	4a0a      	ldr	r2, [pc, #40]	; (8008784 <disk_write+0x3c>)
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	4413      	add	r3, r2
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	68dc      	ldr	r4, [r3, #12]
 8008764:	7bfb      	ldrb	r3, [r7, #15]
 8008766:	4a07      	ldr	r2, [pc, #28]	; (8008784 <disk_write+0x3c>)
 8008768:	4413      	add	r3, r2
 800876a:	7a18      	ldrb	r0, [r3, #8]
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	68b9      	ldr	r1, [r7, #8]
 8008772:	47a0      	blx	r4
 8008774:	4603      	mov	r3, r0
 8008776:	75fb      	strb	r3, [r7, #23]
  return res;
 8008778:	7dfb      	ldrb	r3, [r7, #23]
}
 800877a:	4618      	mov	r0, r3
 800877c:	371c      	adds	r7, #28
 800877e:	46bd      	mov	sp, r7
 8008780:	bd90      	pop	{r4, r7, pc}
 8008782:	bf00      	nop
 8008784:	200000d8 	.word	0x200000d8

08008788 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	4603      	mov	r3, r0
 8008790:	603a      	str	r2, [r7, #0]
 8008792:	71fb      	strb	r3, [r7, #7]
 8008794:	460b      	mov	r3, r1
 8008796:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008798:	79fb      	ldrb	r3, [r7, #7]
 800879a:	4a09      	ldr	r2, [pc, #36]	; (80087c0 <disk_ioctl+0x38>)
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	4413      	add	r3, r2
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	79fa      	ldrb	r2, [r7, #7]
 80087a6:	4906      	ldr	r1, [pc, #24]	; (80087c0 <disk_ioctl+0x38>)
 80087a8:	440a      	add	r2, r1
 80087aa:	7a10      	ldrb	r0, [r2, #8]
 80087ac:	79b9      	ldrb	r1, [r7, #6]
 80087ae:	683a      	ldr	r2, [r7, #0]
 80087b0:	4798      	blx	r3
 80087b2:	4603      	mov	r3, r0
 80087b4:	73fb      	strb	r3, [r7, #15]
  return res;
 80087b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3710      	adds	r7, #16
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	200000d8 	.word	0x200000d8

080087c4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	3301      	adds	r3, #1
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80087d4:	89fb      	ldrh	r3, [r7, #14]
 80087d6:	021b      	lsls	r3, r3, #8
 80087d8:	b21a      	sxth	r2, r3
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	b21b      	sxth	r3, r3
 80087e0:	4313      	orrs	r3, r2
 80087e2:	b21b      	sxth	r3, r3
 80087e4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80087e6:	89fb      	ldrh	r3, [r7, #14]
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3714      	adds	r7, #20
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	3303      	adds	r3, #3
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	021b      	lsls	r3, r3, #8
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	3202      	adds	r2, #2
 800880c:	7812      	ldrb	r2, [r2, #0]
 800880e:	4313      	orrs	r3, r2
 8008810:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	021b      	lsls	r3, r3, #8
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	3201      	adds	r2, #1
 800881a:	7812      	ldrb	r2, [r2, #0]
 800881c:	4313      	orrs	r3, r2
 800881e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	021b      	lsls	r3, r3, #8
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	7812      	ldrb	r2, [r2, #0]
 8008828:	4313      	orrs	r3, r2
 800882a:	60fb      	str	r3, [r7, #12]
	return rv;
 800882c:	68fb      	ldr	r3, [r7, #12]
}
 800882e:	4618      	mov	r0, r3
 8008830:	3714      	adds	r7, #20
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr

0800883a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800883a:	b480      	push	{r7}
 800883c:	b083      	sub	sp, #12
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
 8008842:	460b      	mov	r3, r1
 8008844:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	1c5a      	adds	r2, r3, #1
 800884a:	607a      	str	r2, [r7, #4]
 800884c:	887a      	ldrh	r2, [r7, #2]
 800884e:	b2d2      	uxtb	r2, r2
 8008850:	701a      	strb	r2, [r3, #0]
 8008852:	887b      	ldrh	r3, [r7, #2]
 8008854:	0a1b      	lsrs	r3, r3, #8
 8008856:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	1c5a      	adds	r2, r3, #1
 800885c:	607a      	str	r2, [r7, #4]
 800885e:	887a      	ldrh	r2, [r7, #2]
 8008860:	b2d2      	uxtb	r2, r2
 8008862:	701a      	strb	r2, [r3, #0]
}
 8008864:	bf00      	nop
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	1c5a      	adds	r2, r3, #1
 800887e:	607a      	str	r2, [r7, #4]
 8008880:	683a      	ldr	r2, [r7, #0]
 8008882:	b2d2      	uxtb	r2, r2
 8008884:	701a      	strb	r2, [r3, #0]
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	0a1b      	lsrs	r3, r3, #8
 800888a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	1c5a      	adds	r2, r3, #1
 8008890:	607a      	str	r2, [r7, #4]
 8008892:	683a      	ldr	r2, [r7, #0]
 8008894:	b2d2      	uxtb	r2, r2
 8008896:	701a      	strb	r2, [r3, #0]
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	0a1b      	lsrs	r3, r3, #8
 800889c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	1c5a      	adds	r2, r3, #1
 80088a2:	607a      	str	r2, [r7, #4]
 80088a4:	683a      	ldr	r2, [r7, #0]
 80088a6:	b2d2      	uxtb	r2, r2
 80088a8:	701a      	strb	r2, [r3, #0]
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	0a1b      	lsrs	r3, r3, #8
 80088ae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	1c5a      	adds	r2, r3, #1
 80088b4:	607a      	str	r2, [r7, #4]
 80088b6:	683a      	ldr	r2, [r7, #0]
 80088b8:	b2d2      	uxtb	r2, r2
 80088ba:	701a      	strb	r2, [r3, #0]
}
 80088bc:	bf00      	nop
 80088be:	370c      	adds	r7, #12
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr

080088c8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80088c8:	b480      	push	{r7}
 80088ca:	b087      	sub	sp, #28
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d00d      	beq.n	80088fe <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80088e2:	693a      	ldr	r2, [r7, #16]
 80088e4:	1c53      	adds	r3, r2, #1
 80088e6:	613b      	str	r3, [r7, #16]
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	1c59      	adds	r1, r3, #1
 80088ec:	6179      	str	r1, [r7, #20]
 80088ee:	7812      	ldrb	r2, [r2, #0]
 80088f0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	3b01      	subs	r3, #1
 80088f6:	607b      	str	r3, [r7, #4]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d1f1      	bne.n	80088e2 <mem_cpy+0x1a>
	}
}
 80088fe:	bf00      	nop
 8008900:	371c      	adds	r7, #28
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr

0800890a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800890a:	b480      	push	{r7}
 800890c:	b087      	sub	sp, #28
 800890e:	af00      	add	r7, sp, #0
 8008910:	60f8      	str	r0, [r7, #12]
 8008912:	60b9      	str	r1, [r7, #8]
 8008914:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	1c5a      	adds	r2, r3, #1
 800891e:	617a      	str	r2, [r7, #20]
 8008920:	68ba      	ldr	r2, [r7, #8]
 8008922:	b2d2      	uxtb	r2, r2
 8008924:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	3b01      	subs	r3, #1
 800892a:	607b      	str	r3, [r7, #4]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d1f3      	bne.n	800891a <mem_set+0x10>
}
 8008932:	bf00      	nop
 8008934:	bf00      	nop
 8008936:	371c      	adds	r7, #28
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008940:	b480      	push	{r7}
 8008942:	b089      	sub	sp, #36	; 0x24
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	61fb      	str	r3, [r7, #28]
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008954:	2300      	movs	r3, #0
 8008956:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	1c5a      	adds	r2, r3, #1
 800895c:	61fa      	str	r2, [r7, #28]
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	4619      	mov	r1, r3
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	1c5a      	adds	r2, r3, #1
 8008966:	61ba      	str	r2, [r7, #24]
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	1acb      	subs	r3, r1, r3
 800896c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	3b01      	subs	r3, #1
 8008972:	607b      	str	r3, [r7, #4]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d002      	beq.n	8008980 <mem_cmp+0x40>
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d0eb      	beq.n	8008958 <mem_cmp+0x18>

	return r;
 8008980:	697b      	ldr	r3, [r7, #20]
}
 8008982:	4618      	mov	r0, r3
 8008984:	3724      	adds	r7, #36	; 0x24
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr

0800898e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800898e:	b480      	push	{r7}
 8008990:	b083      	sub	sp, #12
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
 8008996:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008998:	e002      	b.n	80089a0 <chk_chr+0x12>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	3301      	adds	r3, #1
 800899e:	607b      	str	r3, [r7, #4]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d005      	beq.n	80089b4 <chk_chr+0x26>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	461a      	mov	r2, r3
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d1f2      	bne.n	800899a <chk_chr+0xc>
	return *str;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	781b      	ldrb	r3, [r3, #0]
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80089ce:	2300      	movs	r3, #0
 80089d0:	60bb      	str	r3, [r7, #8]
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	60fb      	str	r3, [r7, #12]
 80089d6:	e029      	b.n	8008a2c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80089d8:	4a27      	ldr	r2, [pc, #156]	; (8008a78 <chk_lock+0xb4>)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	011b      	lsls	r3, r3, #4
 80089de:	4413      	add	r3, r2
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d01d      	beq.n	8008a22 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80089e6:	4a24      	ldr	r2, [pc, #144]	; (8008a78 <chk_lock+0xb4>)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	011b      	lsls	r3, r3, #4
 80089ec:	4413      	add	r3, r2
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d116      	bne.n	8008a26 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80089f8:	4a1f      	ldr	r2, [pc, #124]	; (8008a78 <chk_lock+0xb4>)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	011b      	lsls	r3, r3, #4
 80089fe:	4413      	add	r3, r2
 8008a00:	3304      	adds	r3, #4
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d10c      	bne.n	8008a26 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008a0c:	4a1a      	ldr	r2, [pc, #104]	; (8008a78 <chk_lock+0xb4>)
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	011b      	lsls	r3, r3, #4
 8008a12:	4413      	add	r3, r2
 8008a14:	3308      	adds	r3, #8
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d102      	bne.n	8008a26 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008a20:	e007      	b.n	8008a32 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008a22:	2301      	movs	r3, #1
 8008a24:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	3301      	adds	r3, #1
 8008a2a:	60fb      	str	r3, [r7, #12]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d9d2      	bls.n	80089d8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	d109      	bne.n	8008a4c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d102      	bne.n	8008a44 <chk_lock+0x80>
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	2b02      	cmp	r3, #2
 8008a42:	d101      	bne.n	8008a48 <chk_lock+0x84>
 8008a44:	2300      	movs	r3, #0
 8008a46:	e010      	b.n	8008a6a <chk_lock+0xa6>
 8008a48:	2312      	movs	r3, #18
 8008a4a:	e00e      	b.n	8008a6a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d108      	bne.n	8008a64 <chk_lock+0xa0>
 8008a52:	4a09      	ldr	r2, [pc, #36]	; (8008a78 <chk_lock+0xb4>)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	011b      	lsls	r3, r3, #4
 8008a58:	4413      	add	r3, r2
 8008a5a:	330c      	adds	r3, #12
 8008a5c:	881b      	ldrh	r3, [r3, #0]
 8008a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a62:	d101      	bne.n	8008a68 <chk_lock+0xa4>
 8008a64:	2310      	movs	r3, #16
 8008a66:	e000      	b.n	8008a6a <chk_lock+0xa6>
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3714      	adds	r7, #20
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr
 8008a76:	bf00      	nop
 8008a78:	200000b8 	.word	0x200000b8

08008a7c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008a82:	2300      	movs	r3, #0
 8008a84:	607b      	str	r3, [r7, #4]
 8008a86:	e002      	b.n	8008a8e <enq_lock+0x12>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	607b      	str	r3, [r7, #4]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d806      	bhi.n	8008aa2 <enq_lock+0x26>
 8008a94:	4a09      	ldr	r2, [pc, #36]	; (8008abc <enq_lock+0x40>)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	011b      	lsls	r3, r3, #4
 8008a9a:	4413      	add	r3, r2
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d1f2      	bne.n	8008a88 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	bf14      	ite	ne
 8008aa8:	2301      	movne	r3, #1
 8008aaa:	2300      	moveq	r3, #0
 8008aac:	b2db      	uxtb	r3, r3
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	370c      	adds	r7, #12
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	200000b8 	.word	0x200000b8

08008ac0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b085      	sub	sp, #20
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008aca:	2300      	movs	r3, #0
 8008acc:	60fb      	str	r3, [r7, #12]
 8008ace:	e01f      	b.n	8008b10 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008ad0:	4a41      	ldr	r2, [pc, #260]	; (8008bd8 <inc_lock+0x118>)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	011b      	lsls	r3, r3, #4
 8008ad6:	4413      	add	r3, r2
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d113      	bne.n	8008b0a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008ae2:	4a3d      	ldr	r2, [pc, #244]	; (8008bd8 <inc_lock+0x118>)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	011b      	lsls	r3, r3, #4
 8008ae8:	4413      	add	r3, r2
 8008aea:	3304      	adds	r3, #4
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d109      	bne.n	8008b0a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008af6:	4a38      	ldr	r2, [pc, #224]	; (8008bd8 <inc_lock+0x118>)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	011b      	lsls	r3, r3, #4
 8008afc:	4413      	add	r3, r2
 8008afe:	3308      	adds	r3, #8
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d006      	beq.n	8008b18 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	60fb      	str	r3, [r7, #12]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d9dc      	bls.n	8008ad0 <inc_lock+0x10>
 8008b16:	e000      	b.n	8008b1a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008b18:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	d132      	bne.n	8008b86 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008b20:	2300      	movs	r3, #0
 8008b22:	60fb      	str	r3, [r7, #12]
 8008b24:	e002      	b.n	8008b2c <inc_lock+0x6c>
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	3301      	adds	r3, #1
 8008b2a:	60fb      	str	r3, [r7, #12]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d806      	bhi.n	8008b40 <inc_lock+0x80>
 8008b32:	4a29      	ldr	r2, [pc, #164]	; (8008bd8 <inc_lock+0x118>)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	011b      	lsls	r3, r3, #4
 8008b38:	4413      	add	r3, r2
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d1f2      	bne.n	8008b26 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d101      	bne.n	8008b4a <inc_lock+0x8a>
 8008b46:	2300      	movs	r3, #0
 8008b48:	e040      	b.n	8008bcc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	4922      	ldr	r1, [pc, #136]	; (8008bd8 <inc_lock+0x118>)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	011b      	lsls	r3, r3, #4
 8008b54:	440b      	add	r3, r1
 8008b56:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	689a      	ldr	r2, [r3, #8]
 8008b5c:	491e      	ldr	r1, [pc, #120]	; (8008bd8 <inc_lock+0x118>)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	011b      	lsls	r3, r3, #4
 8008b62:	440b      	add	r3, r1
 8008b64:	3304      	adds	r3, #4
 8008b66:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	695a      	ldr	r2, [r3, #20]
 8008b6c:	491a      	ldr	r1, [pc, #104]	; (8008bd8 <inc_lock+0x118>)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	011b      	lsls	r3, r3, #4
 8008b72:	440b      	add	r3, r1
 8008b74:	3308      	adds	r3, #8
 8008b76:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008b78:	4a17      	ldr	r2, [pc, #92]	; (8008bd8 <inc_lock+0x118>)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	011b      	lsls	r3, r3, #4
 8008b7e:	4413      	add	r3, r2
 8008b80:	330c      	adds	r3, #12
 8008b82:	2200      	movs	r2, #0
 8008b84:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d009      	beq.n	8008ba0 <inc_lock+0xe0>
 8008b8c:	4a12      	ldr	r2, [pc, #72]	; (8008bd8 <inc_lock+0x118>)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	011b      	lsls	r3, r3, #4
 8008b92:	4413      	add	r3, r2
 8008b94:	330c      	adds	r3, #12
 8008b96:	881b      	ldrh	r3, [r3, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d001      	beq.n	8008ba0 <inc_lock+0xe0>
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	e015      	b.n	8008bcc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d108      	bne.n	8008bb8 <inc_lock+0xf8>
 8008ba6:	4a0c      	ldr	r2, [pc, #48]	; (8008bd8 <inc_lock+0x118>)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	011b      	lsls	r3, r3, #4
 8008bac:	4413      	add	r3, r2
 8008bae:	330c      	adds	r3, #12
 8008bb0:	881b      	ldrh	r3, [r3, #0]
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	b29a      	uxth	r2, r3
 8008bb6:	e001      	b.n	8008bbc <inc_lock+0xfc>
 8008bb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008bbc:	4906      	ldr	r1, [pc, #24]	; (8008bd8 <inc_lock+0x118>)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	011b      	lsls	r3, r3, #4
 8008bc2:	440b      	add	r3, r1
 8008bc4:	330c      	adds	r3, #12
 8008bc6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	3301      	adds	r3, #1
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3714      	adds	r7, #20
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr
 8008bd8:	200000b8 	.word	0x200000b8

08008bdc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b085      	sub	sp, #20
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	3b01      	subs	r3, #1
 8008be8:	607b      	str	r3, [r7, #4]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d825      	bhi.n	8008c3c <dec_lock+0x60>
		n = Files[i].ctr;
 8008bf0:	4a17      	ldr	r2, [pc, #92]	; (8008c50 <dec_lock+0x74>)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	011b      	lsls	r3, r3, #4
 8008bf6:	4413      	add	r3, r2
 8008bf8:	330c      	adds	r3, #12
 8008bfa:	881b      	ldrh	r3, [r3, #0]
 8008bfc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008bfe:	89fb      	ldrh	r3, [r7, #14]
 8008c00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c04:	d101      	bne.n	8008c0a <dec_lock+0x2e>
 8008c06:	2300      	movs	r3, #0
 8008c08:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008c0a:	89fb      	ldrh	r3, [r7, #14]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d002      	beq.n	8008c16 <dec_lock+0x3a>
 8008c10:	89fb      	ldrh	r3, [r7, #14]
 8008c12:	3b01      	subs	r3, #1
 8008c14:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008c16:	4a0e      	ldr	r2, [pc, #56]	; (8008c50 <dec_lock+0x74>)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	011b      	lsls	r3, r3, #4
 8008c1c:	4413      	add	r3, r2
 8008c1e:	330c      	adds	r3, #12
 8008c20:	89fa      	ldrh	r2, [r7, #14]
 8008c22:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008c24:	89fb      	ldrh	r3, [r7, #14]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d105      	bne.n	8008c36 <dec_lock+0x5a>
 8008c2a:	4a09      	ldr	r2, [pc, #36]	; (8008c50 <dec_lock+0x74>)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	011b      	lsls	r3, r3, #4
 8008c30:	4413      	add	r3, r2
 8008c32:	2200      	movs	r2, #0
 8008c34:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008c36:	2300      	movs	r3, #0
 8008c38:	737b      	strb	r3, [r7, #13]
 8008c3a:	e001      	b.n	8008c40 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008c3c:	2302      	movs	r3, #2
 8008c3e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008c40:	7b7b      	ldrb	r3, [r7, #13]
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3714      	adds	r7, #20
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr
 8008c4e:	bf00      	nop
 8008c50:	200000b8 	.word	0x200000b8

08008c54 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	60fb      	str	r3, [r7, #12]
 8008c60:	e010      	b.n	8008c84 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008c62:	4a0d      	ldr	r2, [pc, #52]	; (8008c98 <clear_lock+0x44>)
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	011b      	lsls	r3, r3, #4
 8008c68:	4413      	add	r3, r2
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d105      	bne.n	8008c7e <clear_lock+0x2a>
 8008c72:	4a09      	ldr	r2, [pc, #36]	; (8008c98 <clear_lock+0x44>)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	011b      	lsls	r3, r3, #4
 8008c78:	4413      	add	r3, r2
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	3301      	adds	r3, #1
 8008c82:	60fb      	str	r3, [r7, #12]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d9eb      	bls.n	8008c62 <clear_lock+0xe>
	}
}
 8008c8a:	bf00      	nop
 8008c8c:	bf00      	nop
 8008c8e:	3714      	adds	r7, #20
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr
 8008c98:	200000b8 	.word	0x200000b8

08008c9c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b086      	sub	sp, #24
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	78db      	ldrb	r3, [r3, #3]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d034      	beq.n	8008d1a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	7858      	ldrb	r0, [r3, #1]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	697a      	ldr	r2, [r7, #20]
 8008cc4:	f7ff fd40 	bl	8008748 <disk_write>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d002      	beq.n	8008cd4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	73fb      	strb	r3, [r7, #15]
 8008cd2:	e022      	b.n	8008d1a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6a1b      	ldr	r3, [r3, #32]
 8008cde:	697a      	ldr	r2, [r7, #20]
 8008ce0:	1ad2      	subs	r2, r2, r3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	699b      	ldr	r3, [r3, #24]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d217      	bcs.n	8008d1a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	789b      	ldrb	r3, [r3, #2]
 8008cee:	613b      	str	r3, [r7, #16]
 8008cf0:	e010      	b.n	8008d14 <sync_window+0x78>
					wsect += fs->fsize;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	699b      	ldr	r3, [r3, #24]
 8008cf6:	697a      	ldr	r2, [r7, #20]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	7858      	ldrb	r0, [r3, #1]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d06:	2301      	movs	r3, #1
 8008d08:	697a      	ldr	r2, [r7, #20]
 8008d0a:	f7ff fd1d 	bl	8008748 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	3b01      	subs	r3, #1
 8008d12:	613b      	str	r3, [r7, #16]
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d8eb      	bhi.n	8008cf2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3718      	adds	r7, #24
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d36:	683a      	ldr	r2, [r7, #0]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d01b      	beq.n	8008d74 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f7ff ffad 	bl	8008c9c <sync_window>
 8008d42:	4603      	mov	r3, r0
 8008d44:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008d46:	7bfb      	ldrb	r3, [r7, #15]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d113      	bne.n	8008d74 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	7858      	ldrb	r0, [r3, #1]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d56:	2301      	movs	r3, #1
 8008d58:	683a      	ldr	r2, [r7, #0]
 8008d5a:	f7ff fcd5 	bl	8008708 <disk_read>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d004      	beq.n	8008d6e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008d64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d68:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	683a      	ldr	r2, [r7, #0]
 8008d72:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8008d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
	...

08008d80 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f7ff ff87 	bl	8008c9c <sync_window>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008d92:	7bfb      	ldrb	r3, [r7, #15]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d158      	bne.n	8008e4a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	2b03      	cmp	r3, #3
 8008d9e:	d148      	bne.n	8008e32 <sync_fs+0xb2>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	791b      	ldrb	r3, [r3, #4]
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d144      	bne.n	8008e32 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	3330      	adds	r3, #48	; 0x30
 8008dac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008db0:	2100      	movs	r1, #0
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7ff fda9 	bl	800890a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	3330      	adds	r3, #48	; 0x30
 8008dbc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008dc0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7ff fd38 	bl	800883a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	3330      	adds	r3, #48	; 0x30
 8008dce:	4921      	ldr	r1, [pc, #132]	; (8008e54 <sync_fs+0xd4>)
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7ff fd4d 	bl	8008870 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	3330      	adds	r3, #48	; 0x30
 8008dda:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008dde:	491e      	ldr	r1, [pc, #120]	; (8008e58 <sync_fs+0xd8>)
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7ff fd45 	bl	8008870 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	3330      	adds	r3, #48	; 0x30
 8008dea:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	4619      	mov	r1, r3
 8008df4:	4610      	mov	r0, r2
 8008df6:	f7ff fd3b 	bl	8008870 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	3330      	adds	r3, #48	; 0x30
 8008dfe:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	68db      	ldr	r3, [r3, #12]
 8008e06:	4619      	mov	r1, r3
 8008e08:	4610      	mov	r0, r2
 8008e0a:	f7ff fd31 	bl	8008870 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	69db      	ldr	r3, [r3, #28]
 8008e12:	1c5a      	adds	r2, r3, #1
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	7858      	ldrb	r0, [r3, #1]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e26:	2301      	movs	r3, #1
 8008e28:	f7ff fc8e 	bl	8008748 <disk_write>
			fs->fsi_flag = 0;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	785b      	ldrb	r3, [r3, #1]
 8008e36:	2200      	movs	r2, #0
 8008e38:	2100      	movs	r1, #0
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7ff fca4 	bl	8008788 <disk_ioctl>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d001      	beq.n	8008e4a <sync_fs+0xca>
 8008e46:	2301      	movs	r3, #1
 8008e48:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3710      	adds	r7, #16
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	41615252 	.word	0x41615252
 8008e58:	61417272 	.word	0x61417272

08008e5c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	3b02      	subs	r3, #2
 8008e6a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	695b      	ldr	r3, [r3, #20]
 8008e70:	3b02      	subs	r3, #2
 8008e72:	683a      	ldr	r2, [r7, #0]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d301      	bcc.n	8008e7c <clust2sect+0x20>
 8008e78:	2300      	movs	r3, #0
 8008e7a:	e008      	b.n	8008e8e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	895b      	ldrh	r3, [r3, #10]
 8008e80:	461a      	mov	r2, r3
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	fb03 f202 	mul.w	r2, r3, r2
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e8c:	4413      	add	r3, r2
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	370c      	adds	r7, #12
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr

08008e9a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008e9a:	b580      	push	{r7, lr}
 8008e9c:	b086      	sub	sp, #24
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
 8008ea2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d904      	bls.n	8008eba <get_fat+0x20>
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	695b      	ldr	r3, [r3, #20]
 8008eb4:	683a      	ldr	r2, [r7, #0]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d302      	bcc.n	8008ec0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008eba:	2301      	movs	r3, #1
 8008ebc:	617b      	str	r3, [r7, #20]
 8008ebe:	e08f      	b.n	8008fe0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008ec0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ec4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	2b03      	cmp	r3, #3
 8008ecc:	d062      	beq.n	8008f94 <get_fat+0xfa>
 8008ece:	2b03      	cmp	r3, #3
 8008ed0:	dc7c      	bgt.n	8008fcc <get_fat+0x132>
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d002      	beq.n	8008edc <get_fat+0x42>
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	d042      	beq.n	8008f60 <get_fat+0xc6>
 8008eda:	e077      	b.n	8008fcc <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	60fb      	str	r3, [r7, #12]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	085b      	lsrs	r3, r3, #1
 8008ee4:	68fa      	ldr	r2, [r7, #12]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	6a1a      	ldr	r2, [r3, #32]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	0a5b      	lsrs	r3, r3, #9
 8008ef2:	4413      	add	r3, r2
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	6938      	ldr	r0, [r7, #16]
 8008ef8:	f7ff ff14 	bl	8008d24 <move_window>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d167      	bne.n	8008fd2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	1c5a      	adds	r2, r3, #1
 8008f06:	60fa      	str	r2, [r7, #12]
 8008f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f0c:	693a      	ldr	r2, [r7, #16]
 8008f0e:	4413      	add	r3, r2
 8008f10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008f14:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	6a1a      	ldr	r2, [r3, #32]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	0a5b      	lsrs	r3, r3, #9
 8008f1e:	4413      	add	r3, r2
 8008f20:	4619      	mov	r1, r3
 8008f22:	6938      	ldr	r0, [r7, #16]
 8008f24:	f7ff fefe 	bl	8008d24 <move_window>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d153      	bne.n	8008fd6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f34:	693a      	ldr	r2, [r7, #16]
 8008f36:	4413      	add	r3, r2
 8008f38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008f3c:	021b      	lsls	r3, r3, #8
 8008f3e:	461a      	mov	r2, r3
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	f003 0301 	and.w	r3, r3, #1
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d002      	beq.n	8008f56 <get_fat+0xbc>
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	091b      	lsrs	r3, r3, #4
 8008f54:	e002      	b.n	8008f5c <get_fat+0xc2>
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f5c:	617b      	str	r3, [r7, #20]
			break;
 8008f5e:	e03f      	b.n	8008fe0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	6a1a      	ldr	r2, [r3, #32]
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	0a1b      	lsrs	r3, r3, #8
 8008f68:	4413      	add	r3, r2
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	6938      	ldr	r0, [r7, #16]
 8008f6e:	f7ff fed9 	bl	8008d24 <move_window>
 8008f72:	4603      	mov	r3, r0
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d130      	bne.n	8008fda <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	005b      	lsls	r3, r3, #1
 8008f82:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008f86:	4413      	add	r3, r2
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f7ff fc1b 	bl	80087c4 <ld_word>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	617b      	str	r3, [r7, #20]
			break;
 8008f92:	e025      	b.n	8008fe0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	6a1a      	ldr	r2, [r3, #32]
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	09db      	lsrs	r3, r3, #7
 8008f9c:	4413      	add	r3, r2
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	6938      	ldr	r0, [r7, #16]
 8008fa2:	f7ff febf 	bl	8008d24 <move_window>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d118      	bne.n	8008fde <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008fba:	4413      	add	r3, r2
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f7ff fc19 	bl	80087f4 <ld_dword>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008fc8:	617b      	str	r3, [r7, #20]
			break;
 8008fca:	e009      	b.n	8008fe0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008fcc:	2301      	movs	r3, #1
 8008fce:	617b      	str	r3, [r7, #20]
 8008fd0:	e006      	b.n	8008fe0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008fd2:	bf00      	nop
 8008fd4:	e004      	b.n	8008fe0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008fd6:	bf00      	nop
 8008fd8:	e002      	b.n	8008fe0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008fda:	bf00      	nop
 8008fdc:	e000      	b.n	8008fe0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008fde:	bf00      	nop
		}
	}

	return val;
 8008fe0:	697b      	ldr	r3, [r7, #20]
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3718      	adds	r7, #24
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008fea:	b590      	push	{r4, r7, lr}
 8008fec:	b089      	sub	sp, #36	; 0x24
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	60f8      	str	r0, [r7, #12]
 8008ff2:	60b9      	str	r1, [r7, #8]
 8008ff4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008ff6:	2302      	movs	r3, #2
 8008ff8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	f240 80d2 	bls.w	80091a6 <put_fat+0x1bc>
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	695b      	ldr	r3, [r3, #20]
 8009006:	68ba      	ldr	r2, [r7, #8]
 8009008:	429a      	cmp	r2, r3
 800900a:	f080 80cc 	bcs.w	80091a6 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	2b03      	cmp	r3, #3
 8009014:	f000 8096 	beq.w	8009144 <put_fat+0x15a>
 8009018:	2b03      	cmp	r3, #3
 800901a:	f300 80cd 	bgt.w	80091b8 <put_fat+0x1ce>
 800901e:	2b01      	cmp	r3, #1
 8009020:	d002      	beq.n	8009028 <put_fat+0x3e>
 8009022:	2b02      	cmp	r3, #2
 8009024:	d06e      	beq.n	8009104 <put_fat+0x11a>
 8009026:	e0c7      	b.n	80091b8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	61bb      	str	r3, [r7, #24]
 800902c:	69bb      	ldr	r3, [r7, #24]
 800902e:	085b      	lsrs	r3, r3, #1
 8009030:	69ba      	ldr	r2, [r7, #24]
 8009032:	4413      	add	r3, r2
 8009034:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	6a1a      	ldr	r2, [r3, #32]
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	0a5b      	lsrs	r3, r3, #9
 800903e:	4413      	add	r3, r2
 8009040:	4619      	mov	r1, r3
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f7ff fe6e 	bl	8008d24 <move_window>
 8009048:	4603      	mov	r3, r0
 800904a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800904c:	7ffb      	ldrb	r3, [r7, #31]
 800904e:	2b00      	cmp	r3, #0
 8009050:	f040 80ab 	bne.w	80091aa <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	1c59      	adds	r1, r3, #1
 800905e:	61b9      	str	r1, [r7, #24]
 8009060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009064:	4413      	add	r3, r2
 8009066:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	f003 0301 	and.w	r3, r3, #1
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00d      	beq.n	800908e <put_fat+0xa4>
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	b25b      	sxtb	r3, r3
 8009078:	f003 030f 	and.w	r3, r3, #15
 800907c:	b25a      	sxtb	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	b2db      	uxtb	r3, r3
 8009082:	011b      	lsls	r3, r3, #4
 8009084:	b25b      	sxtb	r3, r3
 8009086:	4313      	orrs	r3, r2
 8009088:	b25b      	sxtb	r3, r3
 800908a:	b2db      	uxtb	r3, r3
 800908c:	e001      	b.n	8009092 <put_fat+0xa8>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	b2db      	uxtb	r3, r3
 8009092:	697a      	ldr	r2, [r7, #20]
 8009094:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2201      	movs	r2, #1
 800909a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6a1a      	ldr	r2, [r3, #32]
 80090a0:	69bb      	ldr	r3, [r7, #24]
 80090a2:	0a5b      	lsrs	r3, r3, #9
 80090a4:	4413      	add	r3, r2
 80090a6:	4619      	mov	r1, r3
 80090a8:	68f8      	ldr	r0, [r7, #12]
 80090aa:	f7ff fe3b 	bl	8008d24 <move_window>
 80090ae:	4603      	mov	r3, r0
 80090b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80090b2:	7ffb      	ldrb	r3, [r7, #31]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d17a      	bne.n	80091ae <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090c4:	4413      	add	r3, r2
 80090c6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	f003 0301 	and.w	r3, r3, #1
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d003      	beq.n	80090da <put_fat+0xf0>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	091b      	lsrs	r3, r3, #4
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	e00e      	b.n	80090f8 <put_fat+0x10e>
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	b25b      	sxtb	r3, r3
 80090e0:	f023 030f 	bic.w	r3, r3, #15
 80090e4:	b25a      	sxtb	r2, r3
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	0a1b      	lsrs	r3, r3, #8
 80090ea:	b25b      	sxtb	r3, r3
 80090ec:	f003 030f 	and.w	r3, r3, #15
 80090f0:	b25b      	sxtb	r3, r3
 80090f2:	4313      	orrs	r3, r2
 80090f4:	b25b      	sxtb	r3, r3
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	697a      	ldr	r2, [r7, #20]
 80090fa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2201      	movs	r2, #1
 8009100:	70da      	strb	r2, [r3, #3]
			break;
 8009102:	e059      	b.n	80091b8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	6a1a      	ldr	r2, [r3, #32]
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	0a1b      	lsrs	r3, r3, #8
 800910c:	4413      	add	r3, r2
 800910e:	4619      	mov	r1, r3
 8009110:	68f8      	ldr	r0, [r7, #12]
 8009112:	f7ff fe07 	bl	8008d24 <move_window>
 8009116:	4603      	mov	r3, r0
 8009118:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800911a:	7ffb      	ldrb	r3, [r7, #31]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d148      	bne.n	80091b2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	005b      	lsls	r3, r3, #1
 800912a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800912e:	4413      	add	r3, r2
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	b292      	uxth	r2, r2
 8009134:	4611      	mov	r1, r2
 8009136:	4618      	mov	r0, r3
 8009138:	f7ff fb7f 	bl	800883a <st_word>
			fs->wflag = 1;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2201      	movs	r2, #1
 8009140:	70da      	strb	r2, [r3, #3]
			break;
 8009142:	e039      	b.n	80091b8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6a1a      	ldr	r2, [r3, #32]
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	09db      	lsrs	r3, r3, #7
 800914c:	4413      	add	r3, r2
 800914e:	4619      	mov	r1, r3
 8009150:	68f8      	ldr	r0, [r7, #12]
 8009152:	f7ff fde7 	bl	8008d24 <move_window>
 8009156:	4603      	mov	r3, r0
 8009158:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800915a:	7ffb      	ldrb	r3, [r7, #31]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d12a      	bne.n	80091b6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009174:	4413      	add	r3, r2
 8009176:	4618      	mov	r0, r3
 8009178:	f7ff fb3c 	bl	80087f4 <ld_dword>
 800917c:	4603      	mov	r3, r0
 800917e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009182:	4323      	orrs	r3, r4
 8009184:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009194:	4413      	add	r3, r2
 8009196:	6879      	ldr	r1, [r7, #4]
 8009198:	4618      	mov	r0, r3
 800919a:	f7ff fb69 	bl	8008870 <st_dword>
			fs->wflag = 1;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2201      	movs	r2, #1
 80091a2:	70da      	strb	r2, [r3, #3]
			break;
 80091a4:	e008      	b.n	80091b8 <put_fat+0x1ce>
		}
	}
 80091a6:	bf00      	nop
 80091a8:	e006      	b.n	80091b8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80091aa:	bf00      	nop
 80091ac:	e004      	b.n	80091b8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80091ae:	bf00      	nop
 80091b0:	e002      	b.n	80091b8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80091b2:	bf00      	nop
 80091b4:	e000      	b.n	80091b8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80091b6:	bf00      	nop
	return res;
 80091b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3724      	adds	r7, #36	; 0x24
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd90      	pop	{r4, r7, pc}

080091c2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80091c2:	b580      	push	{r7, lr}
 80091c4:	b088      	sub	sp, #32
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	60f8      	str	r0, [r7, #12]
 80091ca:	60b9      	str	r1, [r7, #8]
 80091cc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80091ce:	2300      	movs	r3, #0
 80091d0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d904      	bls.n	80091e8 <remove_chain+0x26>
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	695b      	ldr	r3, [r3, #20]
 80091e2:	68ba      	ldr	r2, [r7, #8]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d301      	bcc.n	80091ec <remove_chain+0x2a>
 80091e8:	2302      	movs	r3, #2
 80091ea:	e04b      	b.n	8009284 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00c      	beq.n	800920c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80091f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091f6:	6879      	ldr	r1, [r7, #4]
 80091f8:	69b8      	ldr	r0, [r7, #24]
 80091fa:	f7ff fef6 	bl	8008fea <put_fat>
 80091fe:	4603      	mov	r3, r0
 8009200:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009202:	7ffb      	ldrb	r3, [r7, #31]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d001      	beq.n	800920c <remove_chain+0x4a>
 8009208:	7ffb      	ldrb	r3, [r7, #31]
 800920a:	e03b      	b.n	8009284 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800920c:	68b9      	ldr	r1, [r7, #8]
 800920e:	68f8      	ldr	r0, [r7, #12]
 8009210:	f7ff fe43 	bl	8008e9a <get_fat>
 8009214:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d031      	beq.n	8009280 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	2b01      	cmp	r3, #1
 8009220:	d101      	bne.n	8009226 <remove_chain+0x64>
 8009222:	2302      	movs	r3, #2
 8009224:	e02e      	b.n	8009284 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800922c:	d101      	bne.n	8009232 <remove_chain+0x70>
 800922e:	2301      	movs	r3, #1
 8009230:	e028      	b.n	8009284 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009232:	2200      	movs	r2, #0
 8009234:	68b9      	ldr	r1, [r7, #8]
 8009236:	69b8      	ldr	r0, [r7, #24]
 8009238:	f7ff fed7 	bl	8008fea <put_fat>
 800923c:	4603      	mov	r3, r0
 800923e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009240:	7ffb      	ldrb	r3, [r7, #31]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d001      	beq.n	800924a <remove_chain+0x88>
 8009246:	7ffb      	ldrb	r3, [r7, #31]
 8009248:	e01c      	b.n	8009284 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800924a:	69bb      	ldr	r3, [r7, #24]
 800924c:	691a      	ldr	r2, [r3, #16]
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	695b      	ldr	r3, [r3, #20]
 8009252:	3b02      	subs	r3, #2
 8009254:	429a      	cmp	r2, r3
 8009256:	d20b      	bcs.n	8009270 <remove_chain+0xae>
			fs->free_clst++;
 8009258:	69bb      	ldr	r3, [r7, #24]
 800925a:	691b      	ldr	r3, [r3, #16]
 800925c:	1c5a      	adds	r2, r3, #1
 800925e:	69bb      	ldr	r3, [r7, #24]
 8009260:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8009262:	69bb      	ldr	r3, [r7, #24]
 8009264:	791b      	ldrb	r3, [r3, #4]
 8009266:	f043 0301 	orr.w	r3, r3, #1
 800926a:	b2da      	uxtb	r2, r3
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009274:	69bb      	ldr	r3, [r7, #24]
 8009276:	695b      	ldr	r3, [r3, #20]
 8009278:	68ba      	ldr	r2, [r7, #8]
 800927a:	429a      	cmp	r2, r3
 800927c:	d3c6      	bcc.n	800920c <remove_chain+0x4a>
 800927e:	e000      	b.n	8009282 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009280:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009282:	2300      	movs	r3, #0
}
 8009284:	4618      	mov	r0, r3
 8009286:	3720      	adds	r7, #32
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b088      	sub	sp, #32
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d10d      	bne.n	80092be <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d004      	beq.n	80092b8 <create_chain+0x2c>
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	695b      	ldr	r3, [r3, #20]
 80092b2:	69ba      	ldr	r2, [r7, #24]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d31b      	bcc.n	80092f0 <create_chain+0x64>
 80092b8:	2301      	movs	r3, #1
 80092ba:	61bb      	str	r3, [r7, #24]
 80092bc:	e018      	b.n	80092f0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80092be:	6839      	ldr	r1, [r7, #0]
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f7ff fdea 	bl	8008e9a <get_fat>
 80092c6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d801      	bhi.n	80092d2 <create_chain+0x46>
 80092ce:	2301      	movs	r3, #1
 80092d0:	e070      	b.n	80093b4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092d8:	d101      	bne.n	80092de <create_chain+0x52>
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	e06a      	b.n	80093b4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	695b      	ldr	r3, [r3, #20]
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d201      	bcs.n	80092ec <create_chain+0x60>
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	e063      	b.n	80093b4 <create_chain+0x128>
		scl = clst;
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	3301      	adds	r3, #1
 80092f8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	695b      	ldr	r3, [r3, #20]
 80092fe:	69fa      	ldr	r2, [r7, #28]
 8009300:	429a      	cmp	r2, r3
 8009302:	d307      	bcc.n	8009314 <create_chain+0x88>
				ncl = 2;
 8009304:	2302      	movs	r3, #2
 8009306:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009308:	69fa      	ldr	r2, [r7, #28]
 800930a:	69bb      	ldr	r3, [r7, #24]
 800930c:	429a      	cmp	r2, r3
 800930e:	d901      	bls.n	8009314 <create_chain+0x88>
 8009310:	2300      	movs	r3, #0
 8009312:	e04f      	b.n	80093b4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009314:	69f9      	ldr	r1, [r7, #28]
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f7ff fdbf 	bl	8008e9a <get_fat>
 800931c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00e      	beq.n	8009342 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2b01      	cmp	r3, #1
 8009328:	d003      	beq.n	8009332 <create_chain+0xa6>
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009330:	d101      	bne.n	8009336 <create_chain+0xaa>
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	e03e      	b.n	80093b4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009336:	69fa      	ldr	r2, [r7, #28]
 8009338:	69bb      	ldr	r3, [r7, #24]
 800933a:	429a      	cmp	r2, r3
 800933c:	d1da      	bne.n	80092f4 <create_chain+0x68>
 800933e:	2300      	movs	r3, #0
 8009340:	e038      	b.n	80093b4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009342:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009344:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009348:	69f9      	ldr	r1, [r7, #28]
 800934a:	6938      	ldr	r0, [r7, #16]
 800934c:	f7ff fe4d 	bl	8008fea <put_fat>
 8009350:	4603      	mov	r3, r0
 8009352:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009354:	7dfb      	ldrb	r3, [r7, #23]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d109      	bne.n	800936e <create_chain+0xe2>
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d006      	beq.n	800936e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009360:	69fa      	ldr	r2, [r7, #28]
 8009362:	6839      	ldr	r1, [r7, #0]
 8009364:	6938      	ldr	r0, [r7, #16]
 8009366:	f7ff fe40 	bl	8008fea <put_fat>
 800936a:	4603      	mov	r3, r0
 800936c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800936e:	7dfb      	ldrb	r3, [r7, #23]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d116      	bne.n	80093a2 <create_chain+0x116>
		fs->last_clst = ncl;
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	69fa      	ldr	r2, [r7, #28]
 8009378:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	691a      	ldr	r2, [r3, #16]
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	695b      	ldr	r3, [r3, #20]
 8009382:	3b02      	subs	r3, #2
 8009384:	429a      	cmp	r2, r3
 8009386:	d804      	bhi.n	8009392 <create_chain+0x106>
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	691b      	ldr	r3, [r3, #16]
 800938c:	1e5a      	subs	r2, r3, #1
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	791b      	ldrb	r3, [r3, #4]
 8009396:	f043 0301 	orr.w	r3, r3, #1
 800939a:	b2da      	uxtb	r2, r3
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	711a      	strb	r2, [r3, #4]
 80093a0:	e007      	b.n	80093b2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80093a2:	7dfb      	ldrb	r3, [r7, #23]
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d102      	bne.n	80093ae <create_chain+0x122>
 80093a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80093ac:	e000      	b.n	80093b0 <create_chain+0x124>
 80093ae:	2301      	movs	r3, #1
 80093b0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80093b2:	69fb      	ldr	r3, [r7, #28]
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3720      	adds	r7, #32
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80093bc:	b480      	push	{r7}
 80093be:	b087      	sub	sp, #28
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d0:	3304      	adds	r3, #4
 80093d2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	0a5b      	lsrs	r3, r3, #9
 80093d8:	68fa      	ldr	r2, [r7, #12]
 80093da:	8952      	ldrh	r2, [r2, #10]
 80093dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80093e0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	1d1a      	adds	r2, r3, #4
 80093e6:	613a      	str	r2, [r7, #16]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d101      	bne.n	80093f6 <clmt_clust+0x3a>
 80093f2:	2300      	movs	r3, #0
 80093f4:	e010      	b.n	8009418 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80093f6:	697a      	ldr	r2, [r7, #20]
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d307      	bcc.n	800940e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80093fe:	697a      	ldr	r2, [r7, #20]
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	1ad3      	subs	r3, r2, r3
 8009404:	617b      	str	r3, [r7, #20]
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	3304      	adds	r3, #4
 800940a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800940c:	e7e9      	b.n	80093e2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800940e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	4413      	add	r3, r2
}
 8009418:	4618      	mov	r0, r3
 800941a:	371c      	adds	r7, #28
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b086      	sub	sp, #24
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800943a:	d204      	bcs.n	8009446 <dir_sdi+0x22>
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	f003 031f 	and.w	r3, r3, #31
 8009442:	2b00      	cmp	r3, #0
 8009444:	d001      	beq.n	800944a <dir_sdi+0x26>
		return FR_INT_ERR;
 8009446:	2302      	movs	r3, #2
 8009448:	e063      	b.n	8009512 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	683a      	ldr	r2, [r7, #0]
 800944e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d106      	bne.n	800946a <dir_sdi+0x46>
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	2b02      	cmp	r3, #2
 8009462:	d902      	bls.n	800946a <dir_sdi+0x46>
		clst = fs->dirbase;
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009468:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d10c      	bne.n	800948a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	095b      	lsrs	r3, r3, #5
 8009474:	693a      	ldr	r2, [r7, #16]
 8009476:	8912      	ldrh	r2, [r2, #8]
 8009478:	4293      	cmp	r3, r2
 800947a:	d301      	bcc.n	8009480 <dir_sdi+0x5c>
 800947c:	2302      	movs	r3, #2
 800947e:	e048      	b.n	8009512 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	61da      	str	r2, [r3, #28]
 8009488:	e029      	b.n	80094de <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	895b      	ldrh	r3, [r3, #10]
 800948e:	025b      	lsls	r3, r3, #9
 8009490:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009492:	e019      	b.n	80094c8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6979      	ldr	r1, [r7, #20]
 8009498:	4618      	mov	r0, r3
 800949a:	f7ff fcfe 	bl	8008e9a <get_fat>
 800949e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094a6:	d101      	bne.n	80094ac <dir_sdi+0x88>
 80094a8:	2301      	movs	r3, #1
 80094aa:	e032      	b.n	8009512 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d904      	bls.n	80094bc <dir_sdi+0x98>
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	695b      	ldr	r3, [r3, #20]
 80094b6:	697a      	ldr	r2, [r7, #20]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d301      	bcc.n	80094c0 <dir_sdi+0x9c>
 80094bc:	2302      	movs	r3, #2
 80094be:	e028      	b.n	8009512 <dir_sdi+0xee>
			ofs -= csz;
 80094c0:	683a      	ldr	r2, [r7, #0]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	1ad3      	subs	r3, r2, r3
 80094c6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80094c8:	683a      	ldr	r2, [r7, #0]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d2e1      	bcs.n	8009494 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80094d0:	6979      	ldr	r1, [r7, #20]
 80094d2:	6938      	ldr	r0, [r7, #16]
 80094d4:	f7ff fcc2 	bl	8008e5c <clust2sect>
 80094d8:	4602      	mov	r2, r0
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	697a      	ldr	r2, [r7, #20]
 80094e2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	69db      	ldr	r3, [r3, #28]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d101      	bne.n	80094f0 <dir_sdi+0xcc>
 80094ec:	2302      	movs	r3, #2
 80094ee:	e010      	b.n	8009512 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	69da      	ldr	r2, [r3, #28]
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	0a5b      	lsrs	r3, r3, #9
 80094f8:	441a      	add	r2, r3
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800950a:	441a      	add	r2, r3
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009510:	2300      	movs	r3, #0
}
 8009512:	4618      	mov	r0, r3
 8009514:	3718      	adds	r7, #24
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b086      	sub	sp, #24
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
 8009522:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	695b      	ldr	r3, [r3, #20]
 800952e:	3320      	adds	r3, #32
 8009530:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	69db      	ldr	r3, [r3, #28]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d003      	beq.n	8009542 <dir_next+0x28>
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009540:	d301      	bcc.n	8009546 <dir_next+0x2c>
 8009542:	2304      	movs	r3, #4
 8009544:	e0aa      	b.n	800969c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800954c:	2b00      	cmp	r3, #0
 800954e:	f040 8098 	bne.w	8009682 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	69db      	ldr	r3, [r3, #28]
 8009556:	1c5a      	adds	r2, r3, #1
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	699b      	ldr	r3, [r3, #24]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d10b      	bne.n	800957c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	095b      	lsrs	r3, r3, #5
 8009568:	68fa      	ldr	r2, [r7, #12]
 800956a:	8912      	ldrh	r2, [r2, #8]
 800956c:	4293      	cmp	r3, r2
 800956e:	f0c0 8088 	bcc.w	8009682 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2200      	movs	r2, #0
 8009576:	61da      	str	r2, [r3, #28]
 8009578:	2304      	movs	r3, #4
 800957a:	e08f      	b.n	800969c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	0a5b      	lsrs	r3, r3, #9
 8009580:	68fa      	ldr	r2, [r7, #12]
 8009582:	8952      	ldrh	r2, [r2, #10]
 8009584:	3a01      	subs	r2, #1
 8009586:	4013      	ands	r3, r2
 8009588:	2b00      	cmp	r3, #0
 800958a:	d17a      	bne.n	8009682 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	699b      	ldr	r3, [r3, #24]
 8009592:	4619      	mov	r1, r3
 8009594:	4610      	mov	r0, r2
 8009596:	f7ff fc80 	bl	8008e9a <get_fat>
 800959a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d801      	bhi.n	80095a6 <dir_next+0x8c>
 80095a2:	2302      	movs	r3, #2
 80095a4:	e07a      	b.n	800969c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095ac:	d101      	bne.n	80095b2 <dir_next+0x98>
 80095ae:	2301      	movs	r3, #1
 80095b0:	e074      	b.n	800969c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	695b      	ldr	r3, [r3, #20]
 80095b6:	697a      	ldr	r2, [r7, #20]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d358      	bcc.n	800966e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d104      	bne.n	80095cc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	61da      	str	r2, [r3, #28]
 80095c8:	2304      	movs	r3, #4
 80095ca:	e067      	b.n	800969c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	699b      	ldr	r3, [r3, #24]
 80095d2:	4619      	mov	r1, r3
 80095d4:	4610      	mov	r0, r2
 80095d6:	f7ff fe59 	bl	800928c <create_chain>
 80095da:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d101      	bne.n	80095e6 <dir_next+0xcc>
 80095e2:	2307      	movs	r3, #7
 80095e4:	e05a      	b.n	800969c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d101      	bne.n	80095f0 <dir_next+0xd6>
 80095ec:	2302      	movs	r3, #2
 80095ee:	e055      	b.n	800969c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095f6:	d101      	bne.n	80095fc <dir_next+0xe2>
 80095f8:	2301      	movs	r3, #1
 80095fa:	e04f      	b.n	800969c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80095fc:	68f8      	ldr	r0, [r7, #12]
 80095fe:	f7ff fb4d 	bl	8008c9c <sync_window>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d001      	beq.n	800960c <dir_next+0xf2>
 8009608:	2301      	movs	r3, #1
 800960a:	e047      	b.n	800969c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	3330      	adds	r3, #48	; 0x30
 8009610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009614:	2100      	movs	r1, #0
 8009616:	4618      	mov	r0, r3
 8009618:	f7ff f977 	bl	800890a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800961c:	2300      	movs	r3, #0
 800961e:	613b      	str	r3, [r7, #16]
 8009620:	6979      	ldr	r1, [r7, #20]
 8009622:	68f8      	ldr	r0, [r7, #12]
 8009624:	f7ff fc1a 	bl	8008e5c <clust2sect>
 8009628:	4602      	mov	r2, r0
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	62da      	str	r2, [r3, #44]	; 0x2c
 800962e:	e012      	b.n	8009656 <dir_next+0x13c>
						fs->wflag = 1;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2201      	movs	r2, #1
 8009634:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009636:	68f8      	ldr	r0, [r7, #12]
 8009638:	f7ff fb30 	bl	8008c9c <sync_window>
 800963c:	4603      	mov	r3, r0
 800963e:	2b00      	cmp	r3, #0
 8009640:	d001      	beq.n	8009646 <dir_next+0x12c>
 8009642:	2301      	movs	r3, #1
 8009644:	e02a      	b.n	800969c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	3301      	adds	r3, #1
 800964a:	613b      	str	r3, [r7, #16]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009650:	1c5a      	adds	r2, r3, #1
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	62da      	str	r2, [r3, #44]	; 0x2c
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	895b      	ldrh	r3, [r3, #10]
 800965a:	461a      	mov	r2, r3
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	4293      	cmp	r3, r2
 8009660:	d3e6      	bcc.n	8009630 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	1ad2      	subs	r2, r2, r3
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	697a      	ldr	r2, [r7, #20]
 8009672:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009674:	6979      	ldr	r1, [r7, #20]
 8009676:	68f8      	ldr	r0, [r7, #12]
 8009678:	f7ff fbf0 	bl	8008e5c <clust2sect>
 800967c:	4602      	mov	r2, r0
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	68ba      	ldr	r2, [r7, #8]
 8009686:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009694:	441a      	add	r2, r3
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800969a:	2300      	movs	r3, #0
}
 800969c:	4618      	mov	r0, r3
 800969e:	3718      	adds	r7, #24
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b086      	sub	sp, #24
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80096b4:	2100      	movs	r1, #0
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f7ff feb4 	bl	8009424 <dir_sdi>
 80096bc:	4603      	mov	r3, r0
 80096be:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80096c0:	7dfb      	ldrb	r3, [r7, #23]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d12b      	bne.n	800971e <dir_alloc+0x7a>
		n = 0;
 80096c6:	2300      	movs	r3, #0
 80096c8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	69db      	ldr	r3, [r3, #28]
 80096ce:	4619      	mov	r1, r3
 80096d0:	68f8      	ldr	r0, [r7, #12]
 80096d2:	f7ff fb27 	bl	8008d24 <move_window>
 80096d6:	4603      	mov	r3, r0
 80096d8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80096da:	7dfb      	ldrb	r3, [r7, #23]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d11d      	bne.n	800971c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6a1b      	ldr	r3, [r3, #32]
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	2be5      	cmp	r3, #229	; 0xe5
 80096e8:	d004      	beq.n	80096f4 <dir_alloc+0x50>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6a1b      	ldr	r3, [r3, #32]
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d107      	bne.n	8009704 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	3301      	adds	r3, #1
 80096f8:	613b      	str	r3, [r7, #16]
 80096fa:	693a      	ldr	r2, [r7, #16]
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d102      	bne.n	8009708 <dir_alloc+0x64>
 8009702:	e00c      	b.n	800971e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009704:	2300      	movs	r3, #0
 8009706:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009708:	2101      	movs	r1, #1
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f7ff ff05 	bl	800951a <dir_next>
 8009710:	4603      	mov	r3, r0
 8009712:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009714:	7dfb      	ldrb	r3, [r7, #23]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d0d7      	beq.n	80096ca <dir_alloc+0x26>
 800971a:	e000      	b.n	800971e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800971c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800971e:	7dfb      	ldrb	r3, [r7, #23]
 8009720:	2b04      	cmp	r3, #4
 8009722:	d101      	bne.n	8009728 <dir_alloc+0x84>
 8009724:	2307      	movs	r3, #7
 8009726:	75fb      	strb	r3, [r7, #23]
	return res;
 8009728:	7dfb      	ldrb	r3, [r7, #23]
}
 800972a:	4618      	mov	r0, r3
 800972c:	3718      	adds	r7, #24
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b084      	sub	sp, #16
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
 800973a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	331a      	adds	r3, #26
 8009740:	4618      	mov	r0, r3
 8009742:	f7ff f83f 	bl	80087c4 <ld_word>
 8009746:	4603      	mov	r3, r0
 8009748:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	2b03      	cmp	r3, #3
 8009750:	d109      	bne.n	8009766 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	3314      	adds	r3, #20
 8009756:	4618      	mov	r0, r3
 8009758:	f7ff f834 	bl	80087c4 <ld_word>
 800975c:	4603      	mov	r3, r0
 800975e:	041b      	lsls	r3, r3, #16
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	4313      	orrs	r3, r2
 8009764:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009766:	68fb      	ldr	r3, [r7, #12]
}
 8009768:	4618      	mov	r0, r3
 800976a:	3710      	adds	r7, #16
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	60b9      	str	r1, [r7, #8]
 800977a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	331a      	adds	r3, #26
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	b292      	uxth	r2, r2
 8009784:	4611      	mov	r1, r2
 8009786:	4618      	mov	r0, r3
 8009788:	f7ff f857 	bl	800883a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	2b03      	cmp	r3, #3
 8009792:	d109      	bne.n	80097a8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	f103 0214 	add.w	r2, r3, #20
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	0c1b      	lsrs	r3, r3, #16
 800979e:	b29b      	uxth	r3, r3
 80097a0:	4619      	mov	r1, r3
 80097a2:	4610      	mov	r0, r2
 80097a4:	f7ff f849 	bl	800883a <st_word>
	}
}
 80097a8:	bf00      	nop
 80097aa:	3710      	adds	r7, #16
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b086      	sub	sp, #24
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80097be:	2100      	movs	r1, #0
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f7ff fe2f 	bl	8009424 <dir_sdi>
 80097c6:	4603      	mov	r3, r0
 80097c8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80097ca:	7dfb      	ldrb	r3, [r7, #23]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d001      	beq.n	80097d4 <dir_find+0x24>
 80097d0:	7dfb      	ldrb	r3, [r7, #23]
 80097d2:	e03e      	b.n	8009852 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	69db      	ldr	r3, [r3, #28]
 80097d8:	4619      	mov	r1, r3
 80097da:	6938      	ldr	r0, [r7, #16]
 80097dc:	f7ff faa2 	bl	8008d24 <move_window>
 80097e0:	4603      	mov	r3, r0
 80097e2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80097e4:	7dfb      	ldrb	r3, [r7, #23]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d12f      	bne.n	800984a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6a1b      	ldr	r3, [r3, #32]
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80097f2:	7bfb      	ldrb	r3, [r7, #15]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d102      	bne.n	80097fe <dir_find+0x4e>
 80097f8:	2304      	movs	r3, #4
 80097fa:	75fb      	strb	r3, [r7, #23]
 80097fc:	e028      	b.n	8009850 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6a1b      	ldr	r3, [r3, #32]
 8009802:	330b      	adds	r3, #11
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800980a:	b2da      	uxtb	r2, r3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6a1b      	ldr	r3, [r3, #32]
 8009814:	330b      	adds	r3, #11
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	f003 0308 	and.w	r3, r3, #8
 800981c:	2b00      	cmp	r3, #0
 800981e:	d10a      	bne.n	8009836 <dir_find+0x86>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6a18      	ldr	r0, [r3, #32]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	3324      	adds	r3, #36	; 0x24
 8009828:	220b      	movs	r2, #11
 800982a:	4619      	mov	r1, r3
 800982c:	f7ff f888 	bl	8008940 <mem_cmp>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00b      	beq.n	800984e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009836:	2100      	movs	r1, #0
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f7ff fe6e 	bl	800951a <dir_next>
 800983e:	4603      	mov	r3, r0
 8009840:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009842:	7dfb      	ldrb	r3, [r7, #23]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d0c5      	beq.n	80097d4 <dir_find+0x24>
 8009848:	e002      	b.n	8009850 <dir_find+0xa0>
		if (res != FR_OK) break;
 800984a:	bf00      	nop
 800984c:	e000      	b.n	8009850 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800984e:	bf00      	nop

	return res;
 8009850:	7dfb      	ldrb	r3, [r7, #23]
}
 8009852:	4618      	mov	r0, r3
 8009854:	3718      	adds	r7, #24
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b084      	sub	sp, #16
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009868:	2101      	movs	r1, #1
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f7ff ff1a 	bl	80096a4 <dir_alloc>
 8009870:	4603      	mov	r3, r0
 8009872:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009874:	7bfb      	ldrb	r3, [r7, #15]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d11c      	bne.n	80098b4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	69db      	ldr	r3, [r3, #28]
 800987e:	4619      	mov	r1, r3
 8009880:	68b8      	ldr	r0, [r7, #8]
 8009882:	f7ff fa4f 	bl	8008d24 <move_window>
 8009886:	4603      	mov	r3, r0
 8009888:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800988a:	7bfb      	ldrb	r3, [r7, #15]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d111      	bne.n	80098b4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6a1b      	ldr	r3, [r3, #32]
 8009894:	2220      	movs	r2, #32
 8009896:	2100      	movs	r1, #0
 8009898:	4618      	mov	r0, r3
 800989a:	f7ff f836 	bl	800890a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6a18      	ldr	r0, [r3, #32]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	3324      	adds	r3, #36	; 0x24
 80098a6:	220b      	movs	r2, #11
 80098a8:	4619      	mov	r1, r3
 80098aa:	f7ff f80d 	bl	80088c8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	2201      	movs	r2, #1
 80098b2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80098b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3710      	adds	r7, #16
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}

080098be <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80098be:	b580      	push	{r7, lr}
 80098c0:	b086      	sub	sp, #24
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
 80098c6:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	2200      	movs	r2, #0
 80098cc:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	69db      	ldr	r3, [r3, #28]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d04e      	beq.n	8009974 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80098d6:	2300      	movs	r3, #0
 80098d8:	613b      	str	r3, [r7, #16]
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80098de:	e021      	b.n	8009924 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6a1a      	ldr	r2, [r3, #32]
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	1c59      	adds	r1, r3, #1
 80098e8:	6179      	str	r1, [r7, #20]
 80098ea:	4413      	add	r3, r2
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80098f0:	7bfb      	ldrb	r3, [r7, #15]
 80098f2:	2b20      	cmp	r3, #32
 80098f4:	d100      	bne.n	80098f8 <get_fileinfo+0x3a>
 80098f6:	e015      	b.n	8009924 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80098f8:	7bfb      	ldrb	r3, [r7, #15]
 80098fa:	2b05      	cmp	r3, #5
 80098fc:	d101      	bne.n	8009902 <get_fileinfo+0x44>
 80098fe:	23e5      	movs	r3, #229	; 0xe5
 8009900:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	2b09      	cmp	r3, #9
 8009906:	d106      	bne.n	8009916 <get_fileinfo+0x58>
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	1c5a      	adds	r2, r3, #1
 800990c:	613a      	str	r2, [r7, #16]
 800990e:	683a      	ldr	r2, [r7, #0]
 8009910:	4413      	add	r3, r2
 8009912:	222e      	movs	r2, #46	; 0x2e
 8009914:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	1c5a      	adds	r2, r3, #1
 800991a:	613a      	str	r2, [r7, #16]
 800991c:	683a      	ldr	r2, [r7, #0]
 800991e:	4413      	add	r3, r2
 8009920:	7bfa      	ldrb	r2, [r7, #15]
 8009922:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	2b0a      	cmp	r3, #10
 8009928:	d9da      	bls.n	80098e0 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800992a:	683a      	ldr	r2, [r7, #0]
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	4413      	add	r3, r2
 8009930:	3309      	adds	r3, #9
 8009932:	2200      	movs	r2, #0
 8009934:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6a1b      	ldr	r3, [r3, #32]
 800993a:	7ada      	ldrb	r2, [r3, #11]
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6a1b      	ldr	r3, [r3, #32]
 8009944:	331c      	adds	r3, #28
 8009946:	4618      	mov	r0, r3
 8009948:	f7fe ff54 	bl	80087f4 <ld_dword>
 800994c:	4602      	mov	r2, r0
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6a1b      	ldr	r3, [r3, #32]
 8009956:	3316      	adds	r3, #22
 8009958:	4618      	mov	r0, r3
 800995a:	f7fe ff4b 	bl	80087f4 <ld_dword>
 800995e:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	b29a      	uxth	r2, r3
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	80da      	strh	r2, [r3, #6]
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	0c1b      	lsrs	r3, r3, #16
 800996c:	b29a      	uxth	r2, r3
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	809a      	strh	r2, [r3, #4]
 8009972:	e000      	b.n	8009976 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009974:	bf00      	nop
}
 8009976:	3718      	adds	r7, #24
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b088      	sub	sp, #32
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	60fb      	str	r3, [r7, #12]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	3324      	adds	r3, #36	; 0x24
 8009990:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009992:	220b      	movs	r2, #11
 8009994:	2120      	movs	r1, #32
 8009996:	68b8      	ldr	r0, [r7, #8]
 8009998:	f7fe ffb7 	bl	800890a <mem_set>
	si = i = 0; ni = 8;
 800999c:	2300      	movs	r3, #0
 800999e:	613b      	str	r3, [r7, #16]
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	61fb      	str	r3, [r7, #28]
 80099a4:	2308      	movs	r3, #8
 80099a6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	1c5a      	adds	r2, r3, #1
 80099ac:	61fa      	str	r2, [r7, #28]
 80099ae:	68fa      	ldr	r2, [r7, #12]
 80099b0:	4413      	add	r3, r2
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80099b6:	7efb      	ldrb	r3, [r7, #27]
 80099b8:	2b20      	cmp	r3, #32
 80099ba:	d94e      	bls.n	8009a5a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80099bc:	7efb      	ldrb	r3, [r7, #27]
 80099be:	2b2f      	cmp	r3, #47	; 0x2f
 80099c0:	d006      	beq.n	80099d0 <create_name+0x54>
 80099c2:	7efb      	ldrb	r3, [r7, #27]
 80099c4:	2b5c      	cmp	r3, #92	; 0x5c
 80099c6:	d110      	bne.n	80099ea <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80099c8:	e002      	b.n	80099d0 <create_name+0x54>
 80099ca:	69fb      	ldr	r3, [r7, #28]
 80099cc:	3301      	adds	r3, #1
 80099ce:	61fb      	str	r3, [r7, #28]
 80099d0:	68fa      	ldr	r2, [r7, #12]
 80099d2:	69fb      	ldr	r3, [r7, #28]
 80099d4:	4413      	add	r3, r2
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	2b2f      	cmp	r3, #47	; 0x2f
 80099da:	d0f6      	beq.n	80099ca <create_name+0x4e>
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	69fb      	ldr	r3, [r7, #28]
 80099e0:	4413      	add	r3, r2
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	2b5c      	cmp	r3, #92	; 0x5c
 80099e6:	d0f0      	beq.n	80099ca <create_name+0x4e>
			break;
 80099e8:	e038      	b.n	8009a5c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80099ea:	7efb      	ldrb	r3, [r7, #27]
 80099ec:	2b2e      	cmp	r3, #46	; 0x2e
 80099ee:	d003      	beq.n	80099f8 <create_name+0x7c>
 80099f0:	693a      	ldr	r2, [r7, #16]
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d30c      	bcc.n	8009a12 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	2b0b      	cmp	r3, #11
 80099fc:	d002      	beq.n	8009a04 <create_name+0x88>
 80099fe:	7efb      	ldrb	r3, [r7, #27]
 8009a00:	2b2e      	cmp	r3, #46	; 0x2e
 8009a02:	d001      	beq.n	8009a08 <create_name+0x8c>
 8009a04:	2306      	movs	r3, #6
 8009a06:	e044      	b.n	8009a92 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009a08:	2308      	movs	r3, #8
 8009a0a:	613b      	str	r3, [r7, #16]
 8009a0c:	230b      	movs	r3, #11
 8009a0e:	617b      	str	r3, [r7, #20]
			continue;
 8009a10:	e022      	b.n	8009a58 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009a12:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	da04      	bge.n	8009a24 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009a1a:	7efb      	ldrb	r3, [r7, #27]
 8009a1c:	3b80      	subs	r3, #128	; 0x80
 8009a1e:	4a1f      	ldr	r2, [pc, #124]	; (8009a9c <create_name+0x120>)
 8009a20:	5cd3      	ldrb	r3, [r2, r3]
 8009a22:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009a24:	7efb      	ldrb	r3, [r7, #27]
 8009a26:	4619      	mov	r1, r3
 8009a28:	481d      	ldr	r0, [pc, #116]	; (8009aa0 <create_name+0x124>)
 8009a2a:	f7fe ffb0 	bl	800898e <chk_chr>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d001      	beq.n	8009a38 <create_name+0xbc>
 8009a34:	2306      	movs	r3, #6
 8009a36:	e02c      	b.n	8009a92 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009a38:	7efb      	ldrb	r3, [r7, #27]
 8009a3a:	2b60      	cmp	r3, #96	; 0x60
 8009a3c:	d905      	bls.n	8009a4a <create_name+0xce>
 8009a3e:	7efb      	ldrb	r3, [r7, #27]
 8009a40:	2b7a      	cmp	r3, #122	; 0x7a
 8009a42:	d802      	bhi.n	8009a4a <create_name+0xce>
 8009a44:	7efb      	ldrb	r3, [r7, #27]
 8009a46:	3b20      	subs	r3, #32
 8009a48:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	1c5a      	adds	r2, r3, #1
 8009a4e:	613a      	str	r2, [r7, #16]
 8009a50:	68ba      	ldr	r2, [r7, #8]
 8009a52:	4413      	add	r3, r2
 8009a54:	7efa      	ldrb	r2, [r7, #27]
 8009a56:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009a58:	e7a6      	b.n	80099a8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009a5a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009a5c:	68fa      	ldr	r2, [r7, #12]
 8009a5e:	69fb      	ldr	r3, [r7, #28]
 8009a60:	441a      	add	r2, r3
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d101      	bne.n	8009a70 <create_name+0xf4>
 8009a6c:	2306      	movs	r3, #6
 8009a6e:	e010      	b.n	8009a92 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	2be5      	cmp	r3, #229	; 0xe5
 8009a76:	d102      	bne.n	8009a7e <create_name+0x102>
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	2205      	movs	r2, #5
 8009a7c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009a7e:	7efb      	ldrb	r3, [r7, #27]
 8009a80:	2b20      	cmp	r3, #32
 8009a82:	d801      	bhi.n	8009a88 <create_name+0x10c>
 8009a84:	2204      	movs	r2, #4
 8009a86:	e000      	b.n	8009a8a <create_name+0x10e>
 8009a88:	2200      	movs	r2, #0
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	330b      	adds	r3, #11
 8009a8e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009a90:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3720      	adds	r7, #32
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	0800c4bc 	.word	0x0800c4bc
 8009aa0:	0800c308 	.word	0x0800c308

08009aa4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b086      	sub	sp, #24
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009ab8:	e002      	b.n	8009ac0 <follow_path+0x1c>
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	3301      	adds	r3, #1
 8009abe:	603b      	str	r3, [r7, #0]
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	2b2f      	cmp	r3, #47	; 0x2f
 8009ac6:	d0f8      	beq.n	8009aba <follow_path+0x16>
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	2b5c      	cmp	r3, #92	; 0x5c
 8009ace:	d0f4      	beq.n	8009aba <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	2b1f      	cmp	r3, #31
 8009adc:	d80a      	bhi.n	8009af4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2280      	movs	r2, #128	; 0x80
 8009ae2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009ae6:	2100      	movs	r1, #0
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f7ff fc9b 	bl	8009424 <dir_sdi>
 8009aee:	4603      	mov	r3, r0
 8009af0:	75fb      	strb	r3, [r7, #23]
 8009af2:	e043      	b.n	8009b7c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009af4:	463b      	mov	r3, r7
 8009af6:	4619      	mov	r1, r3
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f7ff ff3f 	bl	800997c <create_name>
 8009afe:	4603      	mov	r3, r0
 8009b00:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009b02:	7dfb      	ldrb	r3, [r7, #23]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d134      	bne.n	8009b72 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f7ff fe51 	bl	80097b0 <dir_find>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009b18:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009b1a:	7dfb      	ldrb	r3, [r7, #23]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d00a      	beq.n	8009b36 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009b20:	7dfb      	ldrb	r3, [r7, #23]
 8009b22:	2b04      	cmp	r3, #4
 8009b24:	d127      	bne.n	8009b76 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009b26:	7afb      	ldrb	r3, [r7, #11]
 8009b28:	f003 0304 	and.w	r3, r3, #4
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d122      	bne.n	8009b76 <follow_path+0xd2>
 8009b30:	2305      	movs	r3, #5
 8009b32:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009b34:	e01f      	b.n	8009b76 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009b36:	7afb      	ldrb	r3, [r7, #11]
 8009b38:	f003 0304 	and.w	r3, r3, #4
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d11c      	bne.n	8009b7a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	799b      	ldrb	r3, [r3, #6]
 8009b44:	f003 0310 	and.w	r3, r3, #16
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d102      	bne.n	8009b52 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009b4c:	2305      	movs	r3, #5
 8009b4e:	75fb      	strb	r3, [r7, #23]
 8009b50:	e014      	b.n	8009b7c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	695b      	ldr	r3, [r3, #20]
 8009b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b60:	4413      	add	r3, r2
 8009b62:	4619      	mov	r1, r3
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f7ff fde4 	bl	8009732 <ld_clust>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009b70:	e7c0      	b.n	8009af4 <follow_path+0x50>
			if (res != FR_OK) break;
 8009b72:	bf00      	nop
 8009b74:	e002      	b.n	8009b7c <follow_path+0xd8>
				break;
 8009b76:	bf00      	nop
 8009b78:	e000      	b.n	8009b7c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009b7a:	bf00      	nop
			}
		}
	}

	return res;
 8009b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3718      	adds	r7, #24
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009b86:	b480      	push	{r7}
 8009b88:	b087      	sub	sp, #28
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b92:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d031      	beq.n	8009c00 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	617b      	str	r3, [r7, #20]
 8009ba2:	e002      	b.n	8009baa <get_ldnumber+0x24>
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	617b      	str	r3, [r7, #20]
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	2b20      	cmp	r3, #32
 8009bb0:	d903      	bls.n	8009bba <get_ldnumber+0x34>
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	2b3a      	cmp	r3, #58	; 0x3a
 8009bb8:	d1f4      	bne.n	8009ba4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	2b3a      	cmp	r3, #58	; 0x3a
 8009bc0:	d11c      	bne.n	8009bfc <get_ldnumber+0x76>
			tp = *path;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	1c5a      	adds	r2, r3, #1
 8009bcc:	60fa      	str	r2, [r7, #12]
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	3b30      	subs	r3, #48	; 0x30
 8009bd2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	2b09      	cmp	r3, #9
 8009bd8:	d80e      	bhi.n	8009bf8 <get_ldnumber+0x72>
 8009bda:	68fa      	ldr	r2, [r7, #12]
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d10a      	bne.n	8009bf8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d107      	bne.n	8009bf8 <get_ldnumber+0x72>
					vol = (int)i;
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	3301      	adds	r3, #1
 8009bf0:	617b      	str	r3, [r7, #20]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	697a      	ldr	r2, [r7, #20]
 8009bf6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	e002      	b.n	8009c02 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009c00:	693b      	ldr	r3, [r7, #16]
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	371c      	adds	r7, #28
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr
	...

08009c10 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	70da      	strb	r2, [r3, #3]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c26:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009c28:	6839      	ldr	r1, [r7, #0]
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f7ff f87a 	bl	8008d24 <move_window>
 8009c30:	4603      	mov	r3, r0
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d001      	beq.n	8009c3a <check_fs+0x2a>
 8009c36:	2304      	movs	r3, #4
 8009c38:	e038      	b.n	8009cac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	3330      	adds	r3, #48	; 0x30
 8009c3e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7fe fdbe 	bl	80087c4 <ld_word>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d001      	beq.n	8009c58 <check_fs+0x48>
 8009c54:	2303      	movs	r3, #3
 8009c56:	e029      	b.n	8009cac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c5e:	2be9      	cmp	r3, #233	; 0xe9
 8009c60:	d009      	beq.n	8009c76 <check_fs+0x66>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c68:	2beb      	cmp	r3, #235	; 0xeb
 8009c6a:	d11e      	bne.n	8009caa <check_fs+0x9a>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009c72:	2b90      	cmp	r3, #144	; 0x90
 8009c74:	d119      	bne.n	8009caa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	3330      	adds	r3, #48	; 0x30
 8009c7a:	3336      	adds	r3, #54	; 0x36
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f7fe fdb9 	bl	80087f4 <ld_dword>
 8009c82:	4603      	mov	r3, r0
 8009c84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009c88:	4a0a      	ldr	r2, [pc, #40]	; (8009cb4 <check_fs+0xa4>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d101      	bne.n	8009c92 <check_fs+0x82>
 8009c8e:	2300      	movs	r3, #0
 8009c90:	e00c      	b.n	8009cac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	3330      	adds	r3, #48	; 0x30
 8009c96:	3352      	adds	r3, #82	; 0x52
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f7fe fdab 	bl	80087f4 <ld_dword>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	4a05      	ldr	r2, [pc, #20]	; (8009cb8 <check_fs+0xa8>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d101      	bne.n	8009caa <check_fs+0x9a>
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	e000      	b.n	8009cac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009caa:	2302      	movs	r3, #2
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3708      	adds	r7, #8
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	00544146 	.word	0x00544146
 8009cb8:	33544146 	.word	0x33544146

08009cbc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b096      	sub	sp, #88	; 0x58
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f7ff ff58 	bl	8009b86 <get_ldnumber>
 8009cd6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	da01      	bge.n	8009ce2 <find_volume+0x26>
 8009cde:	230b      	movs	r3, #11
 8009ce0:	e22e      	b.n	800a140 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009ce2:	4aa8      	ldr	r2, [pc, #672]	; (8009f84 <find_volume+0x2c8>)
 8009ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d101      	bne.n	8009cf6 <find_volume+0x3a>
 8009cf2:	230c      	movs	r3, #12
 8009cf4:	e224      	b.n	800a140 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cfa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009cfc:	79fb      	ldrb	r3, [r7, #7]
 8009cfe:	f023 0301 	bic.w	r3, r3, #1
 8009d02:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d01a      	beq.n	8009d42 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d0e:	785b      	ldrb	r3, [r3, #1]
 8009d10:	4618      	mov	r0, r3
 8009d12:	f7fe fcb9 	bl	8008688 <disk_status>
 8009d16:	4603      	mov	r3, r0
 8009d18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009d1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009d20:	f003 0301 	and.w	r3, r3, #1
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d10c      	bne.n	8009d42 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009d28:	79fb      	ldrb	r3, [r7, #7]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d007      	beq.n	8009d3e <find_volume+0x82>
 8009d2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009d32:	f003 0304 	and.w	r3, r3, #4
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d001      	beq.n	8009d3e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009d3a:	230a      	movs	r3, #10
 8009d3c:	e200      	b.n	800a140 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8009d3e:	2300      	movs	r3, #0
 8009d40:	e1fe      	b.n	800a140 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d44:	2200      	movs	r2, #0
 8009d46:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d4a:	b2da      	uxtb	r2, r3
 8009d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d4e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d52:	785b      	ldrb	r3, [r3, #1]
 8009d54:	4618      	mov	r0, r3
 8009d56:	f7fe fcb1 	bl	80086bc <disk_initialize>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009d60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009d64:	f003 0301 	and.w	r3, r3, #1
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d001      	beq.n	8009d70 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009d6c:	2303      	movs	r3, #3
 8009d6e:	e1e7      	b.n	800a140 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009d70:	79fb      	ldrb	r3, [r7, #7]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d007      	beq.n	8009d86 <find_volume+0xca>
 8009d76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009d7a:	f003 0304 	and.w	r3, r3, #4
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d001      	beq.n	8009d86 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009d82:	230a      	movs	r3, #10
 8009d84:	e1dc      	b.n	800a140 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009d86:	2300      	movs	r3, #0
 8009d88:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009d8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009d8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009d8e:	f7ff ff3f 	bl	8009c10 <check_fs>
 8009d92:	4603      	mov	r3, r0
 8009d94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009d98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009d9c:	2b02      	cmp	r3, #2
 8009d9e:	d14b      	bne.n	8009e38 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009da0:	2300      	movs	r3, #0
 8009da2:	643b      	str	r3, [r7, #64]	; 0x40
 8009da4:	e01f      	b.n	8009de6 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009da8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dae:	011b      	lsls	r3, r3, #4
 8009db0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009db4:	4413      	add	r3, r2
 8009db6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dba:	3304      	adds	r3, #4
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d006      	beq.n	8009dd0 <find_volume+0x114>
 8009dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc4:	3308      	adds	r3, #8
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7fe fd14 	bl	80087f4 <ld_dword>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	e000      	b.n	8009dd2 <find_volume+0x116>
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8009dda:	440b      	add	r3, r1
 8009ddc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009de2:	3301      	adds	r3, #1
 8009de4:	643b      	str	r3, [r7, #64]	; 0x40
 8009de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009de8:	2b03      	cmp	r3, #3
 8009dea:	d9dc      	bls.n	8009da6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009dec:	2300      	movs	r3, #0
 8009dee:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d002      	beq.n	8009dfc <find_volume+0x140>
 8009df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009df8:	3b01      	subs	r3, #1
 8009dfa:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009dfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009e04:	4413      	add	r3, r2
 8009e06:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009e0a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d005      	beq.n	8009e1e <find_volume+0x162>
 8009e12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009e14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009e16:	f7ff fefb 	bl	8009c10 <check_fs>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	e000      	b.n	8009e20 <find_volume+0x164>
 8009e1e:	2303      	movs	r3, #3
 8009e20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009e24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	d905      	bls.n	8009e38 <find_volume+0x17c>
 8009e2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e2e:	3301      	adds	r3, #1
 8009e30:	643b      	str	r3, [r7, #64]	; 0x40
 8009e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e34:	2b03      	cmp	r3, #3
 8009e36:	d9e1      	bls.n	8009dfc <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009e38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009e3c:	2b04      	cmp	r3, #4
 8009e3e:	d101      	bne.n	8009e44 <find_volume+0x188>
 8009e40:	2301      	movs	r3, #1
 8009e42:	e17d      	b.n	800a140 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009e44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	d901      	bls.n	8009e50 <find_volume+0x194>
 8009e4c:	230d      	movs	r3, #13
 8009e4e:	e177      	b.n	800a140 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e52:	3330      	adds	r3, #48	; 0x30
 8009e54:	330b      	adds	r3, #11
 8009e56:	4618      	mov	r0, r3
 8009e58:	f7fe fcb4 	bl	80087c4 <ld_word>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e62:	d001      	beq.n	8009e68 <find_volume+0x1ac>
 8009e64:	230d      	movs	r3, #13
 8009e66:	e16b      	b.n	800a140 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e6a:	3330      	adds	r3, #48	; 0x30
 8009e6c:	3316      	adds	r3, #22
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f7fe fca8 	bl	80087c4 <ld_word>
 8009e74:	4603      	mov	r3, r0
 8009e76:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d106      	bne.n	8009e8c <find_volume+0x1d0>
 8009e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e80:	3330      	adds	r3, #48	; 0x30
 8009e82:	3324      	adds	r3, #36	; 0x24
 8009e84:	4618      	mov	r0, r3
 8009e86:	f7fe fcb5 	bl	80087f4 <ld_dword>
 8009e8a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009e90:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e94:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8009e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e9a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e9e:	789b      	ldrb	r3, [r3, #2]
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d005      	beq.n	8009eb0 <find_volume+0x1f4>
 8009ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea6:	789b      	ldrb	r3, [r3, #2]
 8009ea8:	2b02      	cmp	r3, #2
 8009eaa:	d001      	beq.n	8009eb0 <find_volume+0x1f4>
 8009eac:	230d      	movs	r3, #13
 8009eae:	e147      	b.n	800a140 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb2:	789b      	ldrb	r3, [r3, #2]
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009eb8:	fb02 f303 	mul.w	r3, r2, r3
 8009ebc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ec4:	b29a      	uxth	r2, r3
 8009ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ecc:	895b      	ldrh	r3, [r3, #10]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d008      	beq.n	8009ee4 <find_volume+0x228>
 8009ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed4:	895b      	ldrh	r3, [r3, #10]
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eda:	895b      	ldrh	r3, [r3, #10]
 8009edc:	3b01      	subs	r3, #1
 8009ede:	4013      	ands	r3, r2
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d001      	beq.n	8009ee8 <find_volume+0x22c>
 8009ee4:	230d      	movs	r3, #13
 8009ee6:	e12b      	b.n	800a140 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eea:	3330      	adds	r3, #48	; 0x30
 8009eec:	3311      	adds	r3, #17
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7fe fc68 	bl	80087c4 <ld_word>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009efa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009efe:	891b      	ldrh	r3, [r3, #8]
 8009f00:	f003 030f 	and.w	r3, r3, #15
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d001      	beq.n	8009f0e <find_volume+0x252>
 8009f0a:	230d      	movs	r3, #13
 8009f0c:	e118      	b.n	800a140 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f10:	3330      	adds	r3, #48	; 0x30
 8009f12:	3313      	adds	r3, #19
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7fe fc55 	bl	80087c4 <ld_word>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d106      	bne.n	8009f32 <find_volume+0x276>
 8009f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f26:	3330      	adds	r3, #48	; 0x30
 8009f28:	3320      	adds	r3, #32
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7fe fc62 	bl	80087f4 <ld_dword>
 8009f30:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f34:	3330      	adds	r3, #48	; 0x30
 8009f36:	330e      	adds	r3, #14
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f7fe fc43 	bl	80087c4 <ld_word>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009f42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d101      	bne.n	8009f4c <find_volume+0x290>
 8009f48:	230d      	movs	r3, #13
 8009f4a:	e0f9      	b.n	800a140 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009f4c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f50:	4413      	add	r3, r2
 8009f52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f54:	8912      	ldrh	r2, [r2, #8]
 8009f56:	0912      	lsrs	r2, r2, #4
 8009f58:	b292      	uxth	r2, r2
 8009f5a:	4413      	add	r3, r2
 8009f5c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009f5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d201      	bcs.n	8009f6a <find_volume+0x2ae>
 8009f66:	230d      	movs	r3, #13
 8009f68:	e0ea      	b.n	800a140 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009f6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f6e:	1ad3      	subs	r3, r2, r3
 8009f70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f72:	8952      	ldrh	r2, [r2, #10]
 8009f74:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f78:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d103      	bne.n	8009f88 <find_volume+0x2cc>
 8009f80:	230d      	movs	r3, #13
 8009f82:	e0dd      	b.n	800a140 <find_volume+0x484>
 8009f84:	200000b0 	.word	0x200000b0
		fmt = FS_FAT32;
 8009f88:	2303      	movs	r3, #3
 8009f8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f90:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d802      	bhi.n	8009f9e <find_volume+0x2e2>
 8009f98:	2302      	movs	r3, #2
 8009f9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa0:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d802      	bhi.n	8009fae <find_volume+0x2f2>
 8009fa8:	2301      	movs	r3, #1
 8009faa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb0:	1c9a      	adds	r2, r3, #2
 8009fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb4:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009fba:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009fbc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fc0:	441a      	add	r2, r3
 8009fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc4:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009fc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fca:	441a      	add	r2, r3
 8009fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fce:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8009fd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009fd4:	2b03      	cmp	r3, #3
 8009fd6:	d11e      	bne.n	800a016 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fda:	3330      	adds	r3, #48	; 0x30
 8009fdc:	332a      	adds	r3, #42	; 0x2a
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f7fe fbf0 	bl	80087c4 <ld_word>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d001      	beq.n	8009fee <find_volume+0x332>
 8009fea:	230d      	movs	r3, #13
 8009fec:	e0a8      	b.n	800a140 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff0:	891b      	ldrh	r3, [r3, #8]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d001      	beq.n	8009ffa <find_volume+0x33e>
 8009ff6:	230d      	movs	r3, #13
 8009ff8:	e0a2      	b.n	800a140 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ffc:	3330      	adds	r3, #48	; 0x30
 8009ffe:	332c      	adds	r3, #44	; 0x2c
 800a000:	4618      	mov	r0, r3
 800a002:	f7fe fbf7 	bl	80087f4 <ld_dword>
 800a006:	4602      	mov	r2, r0
 800a008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00e:	695b      	ldr	r3, [r3, #20]
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	647b      	str	r3, [r7, #68]	; 0x44
 800a014:	e01f      	b.n	800a056 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a018:	891b      	ldrh	r3, [r3, #8]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d101      	bne.n	800a022 <find_volume+0x366>
 800a01e:	230d      	movs	r3, #13
 800a020:	e08e      	b.n	800a140 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a024:	6a1a      	ldr	r2, [r3, #32]
 800a026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a028:	441a      	add	r2, r3
 800a02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a02c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a02e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a032:	2b02      	cmp	r3, #2
 800a034:	d103      	bne.n	800a03e <find_volume+0x382>
 800a036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a038:	695b      	ldr	r3, [r3, #20]
 800a03a:	005b      	lsls	r3, r3, #1
 800a03c:	e00a      	b.n	800a054 <find_volume+0x398>
 800a03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a040:	695a      	ldr	r2, [r3, #20]
 800a042:	4613      	mov	r3, r2
 800a044:	005b      	lsls	r3, r3, #1
 800a046:	4413      	add	r3, r2
 800a048:	085a      	lsrs	r2, r3, #1
 800a04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04c:	695b      	ldr	r3, [r3, #20]
 800a04e:	f003 0301 	and.w	r3, r3, #1
 800a052:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a054:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a058:	699a      	ldr	r2, [r3, #24]
 800a05a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a05c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a060:	0a5b      	lsrs	r3, r3, #9
 800a062:	429a      	cmp	r2, r3
 800a064:	d201      	bcs.n	800a06a <find_volume+0x3ae>
 800a066:	230d      	movs	r3, #13
 800a068:	e06a      	b.n	800a140 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a070:	611a      	str	r2, [r3, #16]
 800a072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a074:	691a      	ldr	r2, [r3, #16]
 800a076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a078:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a07c:	2280      	movs	r2, #128	; 0x80
 800a07e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a080:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a084:	2b03      	cmp	r3, #3
 800a086:	d149      	bne.n	800a11c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a08a:	3330      	adds	r3, #48	; 0x30
 800a08c:	3330      	adds	r3, #48	; 0x30
 800a08e:	4618      	mov	r0, r3
 800a090:	f7fe fb98 	bl	80087c4 <ld_word>
 800a094:	4603      	mov	r3, r0
 800a096:	2b01      	cmp	r3, #1
 800a098:	d140      	bne.n	800a11c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a09a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a09c:	3301      	adds	r3, #1
 800a09e:	4619      	mov	r1, r3
 800a0a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a0a2:	f7fe fe3f 	bl	8008d24 <move_window>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d137      	bne.n	800a11c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800a0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b4:	3330      	adds	r3, #48	; 0x30
 800a0b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7fe fb82 	bl	80087c4 <ld_word>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d127      	bne.n	800a11c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ce:	3330      	adds	r3, #48	; 0x30
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f7fe fb8f 	bl	80087f4 <ld_dword>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	4a1b      	ldr	r2, [pc, #108]	; (800a148 <find_volume+0x48c>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d11e      	bne.n	800a11c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0e0:	3330      	adds	r3, #48	; 0x30
 800a0e2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7fe fb84 	bl	80087f4 <ld_dword>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	4a17      	ldr	r2, [pc, #92]	; (800a14c <find_volume+0x490>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d113      	bne.n	800a11c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f6:	3330      	adds	r3, #48	; 0x30
 800a0f8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f7fe fb79 	bl	80087f4 <ld_dword>
 800a102:	4602      	mov	r2, r0
 800a104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a106:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a10a:	3330      	adds	r3, #48	; 0x30
 800a10c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a110:	4618      	mov	r0, r3
 800a112:	f7fe fb6f 	bl	80087f4 <ld_dword>
 800a116:	4602      	mov	r2, r0
 800a118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a11a:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a11e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a122:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a124:	4b0a      	ldr	r3, [pc, #40]	; (800a150 <find_volume+0x494>)
 800a126:	881b      	ldrh	r3, [r3, #0]
 800a128:	3301      	adds	r3, #1
 800a12a:	b29a      	uxth	r2, r3
 800a12c:	4b08      	ldr	r3, [pc, #32]	; (800a150 <find_volume+0x494>)
 800a12e:	801a      	strh	r2, [r3, #0]
 800a130:	4b07      	ldr	r3, [pc, #28]	; (800a150 <find_volume+0x494>)
 800a132:	881a      	ldrh	r2, [r3, #0]
 800a134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a136:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a138:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a13a:	f7fe fd8b 	bl	8008c54 <clear_lock>
#endif
	return FR_OK;
 800a13e:	2300      	movs	r3, #0
}
 800a140:	4618      	mov	r0, r3
 800a142:	3758      	adds	r7, #88	; 0x58
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}
 800a148:	41615252 	.word	0x41615252
 800a14c:	61417272 	.word	0x61417272
 800a150:	200000b4 	.word	0x200000b4

0800a154 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a15e:	2309      	movs	r3, #9
 800a160:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d01c      	beq.n	800a1a2 <validate+0x4e>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d018      	beq.n	800a1a2 <validate+0x4e>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d013      	beq.n	800a1a2 <validate+0x4e>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	889a      	ldrh	r2, [r3, #4]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	88db      	ldrh	r3, [r3, #6]
 800a184:	429a      	cmp	r2, r3
 800a186:	d10c      	bne.n	800a1a2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	785b      	ldrb	r3, [r3, #1]
 800a18e:	4618      	mov	r0, r3
 800a190:	f7fe fa7a 	bl	8008688 <disk_status>
 800a194:	4603      	mov	r3, r0
 800a196:	f003 0301 	and.w	r3, r3, #1
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d101      	bne.n	800a1a2 <validate+0x4e>
			res = FR_OK;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a1a2:	7bfb      	ldrb	r3, [r7, #15]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d102      	bne.n	800a1ae <validate+0x5a>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	e000      	b.n	800a1b0 <validate+0x5c>
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	683a      	ldr	r2, [r7, #0]
 800a1b2:	6013      	str	r3, [r2, #0]
	return res;
 800a1b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3710      	adds	r7, #16
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
	...

0800a1c0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b088      	sub	sp, #32
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	60b9      	str	r1, [r7, #8]
 800a1ca:	4613      	mov	r3, r2
 800a1cc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a1d2:	f107 0310 	add.w	r3, r7, #16
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f7ff fcd5 	bl	8009b86 <get_ldnumber>
 800a1dc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a1de:	69fb      	ldr	r3, [r7, #28]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	da01      	bge.n	800a1e8 <f_mount+0x28>
 800a1e4:	230b      	movs	r3, #11
 800a1e6:	e02b      	b.n	800a240 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a1e8:	4a17      	ldr	r2, [pc, #92]	; (800a248 <f_mount+0x88>)
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1f0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d005      	beq.n	800a204 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a1f8:	69b8      	ldr	r0, [r7, #24]
 800a1fa:	f7fe fd2b 	bl	8008c54 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a1fe:	69bb      	ldr	r3, [r7, #24]
 800a200:	2200      	movs	r2, #0
 800a202:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d002      	beq.n	800a210 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2200      	movs	r2, #0
 800a20e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a210:	68fa      	ldr	r2, [r7, #12]
 800a212:	490d      	ldr	r1, [pc, #52]	; (800a248 <f_mount+0x88>)
 800a214:	69fb      	ldr	r3, [r7, #28]
 800a216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d002      	beq.n	800a226 <f_mount+0x66>
 800a220:	79fb      	ldrb	r3, [r7, #7]
 800a222:	2b01      	cmp	r3, #1
 800a224:	d001      	beq.n	800a22a <f_mount+0x6a>
 800a226:	2300      	movs	r3, #0
 800a228:	e00a      	b.n	800a240 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a22a:	f107 010c 	add.w	r1, r7, #12
 800a22e:	f107 0308 	add.w	r3, r7, #8
 800a232:	2200      	movs	r2, #0
 800a234:	4618      	mov	r0, r3
 800a236:	f7ff fd41 	bl	8009cbc <find_volume>
 800a23a:	4603      	mov	r3, r0
 800a23c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a23e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a240:	4618      	mov	r0, r3
 800a242:	3720      	adds	r7, #32
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	200000b0 	.word	0x200000b0

0800a24c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b098      	sub	sp, #96	; 0x60
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	4613      	mov	r3, r2
 800a258:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d101      	bne.n	800a264 <f_open+0x18>
 800a260:	2309      	movs	r3, #9
 800a262:	e1ad      	b.n	800a5c0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a264:	79fb      	ldrb	r3, [r7, #7]
 800a266:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a26a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a26c:	79fa      	ldrb	r2, [r7, #7]
 800a26e:	f107 0110 	add.w	r1, r7, #16
 800a272:	f107 0308 	add.w	r3, r7, #8
 800a276:	4618      	mov	r0, r3
 800a278:	f7ff fd20 	bl	8009cbc <find_volume>
 800a27c:	4603      	mov	r3, r0
 800a27e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a282:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a286:	2b00      	cmp	r3, #0
 800a288:	f040 8191 	bne.w	800a5ae <f_open+0x362>
		dj.obj.fs = fs;
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a290:	68ba      	ldr	r2, [r7, #8]
 800a292:	f107 0314 	add.w	r3, r7, #20
 800a296:	4611      	mov	r1, r2
 800a298:	4618      	mov	r0, r3
 800a29a:	f7ff fc03 	bl	8009aa4 <follow_path>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a2a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d11a      	bne.n	800a2e2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a2ac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a2b0:	b25b      	sxtb	r3, r3
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	da03      	bge.n	800a2be <f_open+0x72>
				res = FR_INVALID_NAME;
 800a2b6:	2306      	movs	r3, #6
 800a2b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a2bc:	e011      	b.n	800a2e2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a2be:	79fb      	ldrb	r3, [r7, #7]
 800a2c0:	f023 0301 	bic.w	r3, r3, #1
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	bf14      	ite	ne
 800a2c8:	2301      	movne	r3, #1
 800a2ca:	2300      	moveq	r3, #0
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	f107 0314 	add.w	r3, r7, #20
 800a2d4:	4611      	mov	r1, r2
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7fe fb74 	bl	80089c4 <chk_lock>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a2e2:	79fb      	ldrb	r3, [r7, #7]
 800a2e4:	f003 031c 	and.w	r3, r3, #28
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d07f      	beq.n	800a3ec <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a2ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d017      	beq.n	800a324 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a2f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2f8:	2b04      	cmp	r3, #4
 800a2fa:	d10e      	bne.n	800a31a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a2fc:	f7fe fbbe 	bl	8008a7c <enq_lock>
 800a300:	4603      	mov	r3, r0
 800a302:	2b00      	cmp	r3, #0
 800a304:	d006      	beq.n	800a314 <f_open+0xc8>
 800a306:	f107 0314 	add.w	r3, r7, #20
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7ff faa5 	bl	800985a <dir_register>
 800a310:	4603      	mov	r3, r0
 800a312:	e000      	b.n	800a316 <f_open+0xca>
 800a314:	2312      	movs	r3, #18
 800a316:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a31a:	79fb      	ldrb	r3, [r7, #7]
 800a31c:	f043 0308 	orr.w	r3, r3, #8
 800a320:	71fb      	strb	r3, [r7, #7]
 800a322:	e010      	b.n	800a346 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a324:	7ebb      	ldrb	r3, [r7, #26]
 800a326:	f003 0311 	and.w	r3, r3, #17
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d003      	beq.n	800a336 <f_open+0xea>
					res = FR_DENIED;
 800a32e:	2307      	movs	r3, #7
 800a330:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a334:	e007      	b.n	800a346 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a336:	79fb      	ldrb	r3, [r7, #7]
 800a338:	f003 0304 	and.w	r3, r3, #4
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d002      	beq.n	800a346 <f_open+0xfa>
 800a340:	2308      	movs	r3, #8
 800a342:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a346:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d168      	bne.n	800a420 <f_open+0x1d4>
 800a34e:	79fb      	ldrb	r3, [r7, #7]
 800a350:	f003 0308 	and.w	r3, r3, #8
 800a354:	2b00      	cmp	r3, #0
 800a356:	d063      	beq.n	800a420 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a358:	f7fb f99a 	bl	8005690 <get_fattime>
 800a35c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a35e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a360:	330e      	adds	r3, #14
 800a362:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a364:	4618      	mov	r0, r3
 800a366:	f7fe fa83 	bl	8008870 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a36a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a36c:	3316      	adds	r3, #22
 800a36e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a370:	4618      	mov	r0, r3
 800a372:	f7fe fa7d 	bl	8008870 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a378:	330b      	adds	r3, #11
 800a37a:	2220      	movs	r2, #32
 800a37c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a382:	4611      	mov	r1, r2
 800a384:	4618      	mov	r0, r3
 800a386:	f7ff f9d4 	bl	8009732 <ld_clust>
 800a38a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a390:	2200      	movs	r2, #0
 800a392:	4618      	mov	r0, r3
 800a394:	f7ff f9ec 	bl	8009770 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a39a:	331c      	adds	r3, #28
 800a39c:	2100      	movs	r1, #0
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f7fe fa66 	bl	8008870 <st_dword>
					fs->wflag = 1;
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a3aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d037      	beq.n	800a420 <f_open+0x1d4>
						dw = fs->winsect;
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a3b6:	f107 0314 	add.w	r3, r7, #20
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7fe feff 	bl	80091c2 <remove_chain>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a3ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d126      	bne.n	800a420 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7fe fca4 	bl	8008d24 <move_window>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a3e6:	3a01      	subs	r2, #1
 800a3e8:	60da      	str	r2, [r3, #12]
 800a3ea:	e019      	b.n	800a420 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a3ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d115      	bne.n	800a420 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a3f4:	7ebb      	ldrb	r3, [r7, #26]
 800a3f6:	f003 0310 	and.w	r3, r3, #16
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d003      	beq.n	800a406 <f_open+0x1ba>
					res = FR_NO_FILE;
 800a3fe:	2304      	movs	r3, #4
 800a400:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a404:	e00c      	b.n	800a420 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a406:	79fb      	ldrb	r3, [r7, #7]
 800a408:	f003 0302 	and.w	r3, r3, #2
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d007      	beq.n	800a420 <f_open+0x1d4>
 800a410:	7ebb      	ldrb	r3, [r7, #26]
 800a412:	f003 0301 	and.w	r3, r3, #1
 800a416:	2b00      	cmp	r3, #0
 800a418:	d002      	beq.n	800a420 <f_open+0x1d4>
						res = FR_DENIED;
 800a41a:	2307      	movs	r3, #7
 800a41c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a420:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a424:	2b00      	cmp	r3, #0
 800a426:	d128      	bne.n	800a47a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a428:	79fb      	ldrb	r3, [r7, #7]
 800a42a:	f003 0308 	and.w	r3, r3, #8
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d003      	beq.n	800a43a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a432:	79fb      	ldrb	r3, [r7, #7]
 800a434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a438:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a442:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a448:	79fb      	ldrb	r3, [r7, #7]
 800a44a:	f023 0301 	bic.w	r3, r3, #1
 800a44e:	2b00      	cmp	r3, #0
 800a450:	bf14      	ite	ne
 800a452:	2301      	movne	r3, #1
 800a454:	2300      	moveq	r3, #0
 800a456:	b2db      	uxtb	r3, r3
 800a458:	461a      	mov	r2, r3
 800a45a:	f107 0314 	add.w	r3, r7, #20
 800a45e:	4611      	mov	r1, r2
 800a460:	4618      	mov	r0, r3
 800a462:	f7fe fb2d 	bl	8008ac0 <inc_lock>
 800a466:	4602      	mov	r2, r0
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	691b      	ldr	r3, [r3, #16]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d102      	bne.n	800a47a <f_open+0x22e>
 800a474:	2302      	movs	r3, #2
 800a476:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a47a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a47e:	2b00      	cmp	r3, #0
 800a480:	f040 8095 	bne.w	800a5ae <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a488:	4611      	mov	r1, r2
 800a48a:	4618      	mov	r0, r3
 800a48c:	f7ff f951 	bl	8009732 <ld_clust>
 800a490:	4602      	mov	r2, r0
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a498:	331c      	adds	r3, #28
 800a49a:	4618      	mov	r0, r3
 800a49c:	f7fe f9aa 	bl	80087f4 <ld_dword>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a4ac:	693a      	ldr	r2, [r7, #16]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	88da      	ldrh	r2, [r3, #6]
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	79fa      	ldrb	r2, [r7, #7]
 800a4be:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	3330      	adds	r3, #48	; 0x30
 800a4d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a4da:	2100      	movs	r1, #0
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f7fe fa14 	bl	800890a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a4e2:	79fb      	ldrb	r3, [r7, #7]
 800a4e4:	f003 0320 	and.w	r3, r3, #32
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d060      	beq.n	800a5ae <f_open+0x362>
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	68db      	ldr	r3, [r3, #12]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d05c      	beq.n	800a5ae <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	68da      	ldr	r2, [r3, #12]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	895b      	ldrh	r3, [r3, #10]
 800a500:	025b      	lsls	r3, r3, #9
 800a502:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	689b      	ldr	r3, [r3, #8]
 800a508:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	68db      	ldr	r3, [r3, #12]
 800a50e:	657b      	str	r3, [r7, #84]	; 0x54
 800a510:	e016      	b.n	800a540 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a516:	4618      	mov	r0, r3
 800a518:	f7fe fcbf 	bl	8008e9a <get_fat>
 800a51c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a51e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a520:	2b01      	cmp	r3, #1
 800a522:	d802      	bhi.n	800a52a <f_open+0x2de>
 800a524:	2302      	movs	r3, #2
 800a526:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a52a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a52c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a530:	d102      	bne.n	800a538 <f_open+0x2ec>
 800a532:	2301      	movs	r3, #1
 800a534:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a538:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a53a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a53c:	1ad3      	subs	r3, r2, r3
 800a53e:	657b      	str	r3, [r7, #84]	; 0x54
 800a540:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a544:	2b00      	cmp	r3, #0
 800a546:	d103      	bne.n	800a550 <f_open+0x304>
 800a548:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a54a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d8e0      	bhi.n	800a512 <f_open+0x2c6>
				}
				fp->clust = clst;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a554:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a556:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d127      	bne.n	800a5ae <f_open+0x362>
 800a55e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a564:	2b00      	cmp	r3, #0
 800a566:	d022      	beq.n	800a5ae <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a56c:	4618      	mov	r0, r3
 800a56e:	f7fe fc75 	bl	8008e5c <clust2sect>
 800a572:	6478      	str	r0, [r7, #68]	; 0x44
 800a574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a576:	2b00      	cmp	r3, #0
 800a578:	d103      	bne.n	800a582 <f_open+0x336>
						res = FR_INT_ERR;
 800a57a:	2302      	movs	r3, #2
 800a57c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a580:	e015      	b.n	800a5ae <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a584:	0a5a      	lsrs	r2, r3, #9
 800a586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a588:	441a      	add	r2, r3
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	7858      	ldrb	r0, [r3, #1]
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	6a1a      	ldr	r2, [r3, #32]
 800a59c:	2301      	movs	r3, #1
 800a59e:	f7fe f8b3 	bl	8008708 <disk_read>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d002      	beq.n	800a5ae <f_open+0x362>
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a5ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d002      	beq.n	800a5bc <f_open+0x370>
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a5bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3760      	adds	r7, #96	; 0x60
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b08c      	sub	sp, #48	; 0x30
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	60b9      	str	r1, [r7, #8]
 800a5d2:	607a      	str	r2, [r7, #4]
 800a5d4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f107 0210 	add.w	r2, r7, #16
 800a5e6:	4611      	mov	r1, r2
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f7ff fdb3 	bl	800a154 <validate>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a5f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d107      	bne.n	800a60c <f_write+0x44>
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	7d5b      	ldrb	r3, [r3, #21]
 800a600:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a604:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d002      	beq.n	800a612 <f_write+0x4a>
 800a60c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a610:	e14b      	b.n	800a8aa <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	7d1b      	ldrb	r3, [r3, #20]
 800a616:	f003 0302 	and.w	r3, r3, #2
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d101      	bne.n	800a622 <f_write+0x5a>
 800a61e:	2307      	movs	r3, #7
 800a620:	e143      	b.n	800a8aa <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	699a      	ldr	r2, [r3, #24]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	441a      	add	r2, r3
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	699b      	ldr	r3, [r3, #24]
 800a62e:	429a      	cmp	r2, r3
 800a630:	f080 812d 	bcs.w	800a88e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	699b      	ldr	r3, [r3, #24]
 800a638:	43db      	mvns	r3, r3
 800a63a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a63c:	e127      	b.n	800a88e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	699b      	ldr	r3, [r3, #24]
 800a642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a646:	2b00      	cmp	r3, #0
 800a648:	f040 80e3 	bne.w	800a812 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	699b      	ldr	r3, [r3, #24]
 800a650:	0a5b      	lsrs	r3, r3, #9
 800a652:	693a      	ldr	r2, [r7, #16]
 800a654:	8952      	ldrh	r2, [r2, #10]
 800a656:	3a01      	subs	r2, #1
 800a658:	4013      	ands	r3, r2
 800a65a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a65c:	69bb      	ldr	r3, [r7, #24]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d143      	bne.n	800a6ea <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	699b      	ldr	r3, [r3, #24]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d10c      	bne.n	800a684 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	689b      	ldr	r3, [r3, #8]
 800a66e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a672:	2b00      	cmp	r3, #0
 800a674:	d11a      	bne.n	800a6ac <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2100      	movs	r1, #0
 800a67a:	4618      	mov	r0, r3
 800a67c:	f7fe fe06 	bl	800928c <create_chain>
 800a680:	62b8      	str	r0, [r7, #40]	; 0x28
 800a682:	e013      	b.n	800a6ac <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d007      	beq.n	800a69c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	699b      	ldr	r3, [r3, #24]
 800a690:	4619      	mov	r1, r3
 800a692:	68f8      	ldr	r0, [r7, #12]
 800a694:	f7fe fe92 	bl	80093bc <clmt_clust>
 800a698:	62b8      	str	r0, [r7, #40]	; 0x28
 800a69a:	e007      	b.n	800a6ac <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a69c:	68fa      	ldr	r2, [r7, #12]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	69db      	ldr	r3, [r3, #28]
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	4610      	mov	r0, r2
 800a6a6:	f7fe fdf1 	bl	800928c <create_chain>
 800a6aa:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	f000 80f2 	beq.w	800a898 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d104      	bne.n	800a6c4 <f_write+0xfc>
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2202      	movs	r2, #2
 800a6be:	755a      	strb	r2, [r3, #21]
 800a6c0:	2302      	movs	r3, #2
 800a6c2:	e0f2      	b.n	800a8aa <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6ca:	d104      	bne.n	800a6d6 <f_write+0x10e>
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	755a      	strb	r2, [r3, #21]
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	e0e9      	b.n	800a8aa <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6da:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d102      	bne.n	800a6ea <f_write+0x122>
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6e8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	7d1b      	ldrb	r3, [r3, #20]
 800a6ee:	b25b      	sxtb	r3, r3
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	da18      	bge.n	800a726 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	7858      	ldrb	r0, [r3, #1]
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	6a1a      	ldr	r2, [r3, #32]
 800a702:	2301      	movs	r3, #1
 800a704:	f7fe f820 	bl	8008748 <disk_write>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d004      	beq.n	800a718 <f_write+0x150>
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2201      	movs	r2, #1
 800a712:	755a      	strb	r2, [r3, #21]
 800a714:	2301      	movs	r3, #1
 800a716:	e0c8      	b.n	800a8aa <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	7d1b      	ldrb	r3, [r3, #20]
 800a71c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a720:	b2da      	uxtb	r2, r3
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a726:	693a      	ldr	r2, [r7, #16]
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	69db      	ldr	r3, [r3, #28]
 800a72c:	4619      	mov	r1, r3
 800a72e:	4610      	mov	r0, r2
 800a730:	f7fe fb94 	bl	8008e5c <clust2sect>
 800a734:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d104      	bne.n	800a746 <f_write+0x17e>
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2202      	movs	r2, #2
 800a740:	755a      	strb	r2, [r3, #21]
 800a742:	2302      	movs	r3, #2
 800a744:	e0b1      	b.n	800a8aa <f_write+0x2e2>
			sect += csect;
 800a746:	697a      	ldr	r2, [r7, #20]
 800a748:	69bb      	ldr	r3, [r7, #24]
 800a74a:	4413      	add	r3, r2
 800a74c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	0a5b      	lsrs	r3, r3, #9
 800a752:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a754:	6a3b      	ldr	r3, [r7, #32]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d03c      	beq.n	800a7d4 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a75a:	69ba      	ldr	r2, [r7, #24]
 800a75c:	6a3b      	ldr	r3, [r7, #32]
 800a75e:	4413      	add	r3, r2
 800a760:	693a      	ldr	r2, [r7, #16]
 800a762:	8952      	ldrh	r2, [r2, #10]
 800a764:	4293      	cmp	r3, r2
 800a766:	d905      	bls.n	800a774 <f_write+0x1ac>
					cc = fs->csize - csect;
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	895b      	ldrh	r3, [r3, #10]
 800a76c:	461a      	mov	r2, r3
 800a76e:	69bb      	ldr	r3, [r7, #24]
 800a770:	1ad3      	subs	r3, r2, r3
 800a772:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	7858      	ldrb	r0, [r3, #1]
 800a778:	6a3b      	ldr	r3, [r7, #32]
 800a77a:	697a      	ldr	r2, [r7, #20]
 800a77c:	69f9      	ldr	r1, [r7, #28]
 800a77e:	f7fd ffe3 	bl	8008748 <disk_write>
 800a782:	4603      	mov	r3, r0
 800a784:	2b00      	cmp	r3, #0
 800a786:	d004      	beq.n	800a792 <f_write+0x1ca>
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2201      	movs	r2, #1
 800a78c:	755a      	strb	r2, [r3, #21]
 800a78e:	2301      	movs	r3, #1
 800a790:	e08b      	b.n	800a8aa <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	6a1a      	ldr	r2, [r3, #32]
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	1ad3      	subs	r3, r2, r3
 800a79a:	6a3a      	ldr	r2, [r7, #32]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d915      	bls.n	800a7cc <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	6a1a      	ldr	r2, [r3, #32]
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	1ad3      	subs	r3, r2, r3
 800a7ae:	025b      	lsls	r3, r3, #9
 800a7b0:	69fa      	ldr	r2, [r7, #28]
 800a7b2:	4413      	add	r3, r2
 800a7b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	f7fe f885 	bl	80088c8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	7d1b      	ldrb	r3, [r3, #20]
 800a7c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7c6:	b2da      	uxtb	r2, r3
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a7cc:	6a3b      	ldr	r3, [r7, #32]
 800a7ce:	025b      	lsls	r3, r3, #9
 800a7d0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a7d2:	e03f      	b.n	800a854 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	6a1b      	ldr	r3, [r3, #32]
 800a7d8:	697a      	ldr	r2, [r7, #20]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d016      	beq.n	800a80c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	699a      	ldr	r2, [r3, #24]
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d210      	bcs.n	800a80c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	7858      	ldrb	r0, [r3, #1]
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	697a      	ldr	r2, [r7, #20]
 800a7f8:	f7fd ff86 	bl	8008708 <disk_read>
 800a7fc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d004      	beq.n	800a80c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2201      	movs	r2, #1
 800a806:	755a      	strb	r2, [r3, #21]
 800a808:	2301      	movs	r3, #1
 800a80a:	e04e      	b.n	800a8aa <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	697a      	ldr	r2, [r7, #20]
 800a810:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	699b      	ldr	r3, [r3, #24]
 800a816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a81a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a81e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	429a      	cmp	r2, r3
 800a826:	d901      	bls.n	800a82c <f_write+0x264>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	699b      	ldr	r3, [r3, #24]
 800a836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a83a:	4413      	add	r3, r2
 800a83c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a83e:	69f9      	ldr	r1, [r7, #28]
 800a840:	4618      	mov	r0, r3
 800a842:	f7fe f841 	bl	80088c8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	7d1b      	ldrb	r3, [r3, #20]
 800a84a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a84e:	b2da      	uxtb	r2, r3
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a854:	69fa      	ldr	r2, [r7, #28]
 800a856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a858:	4413      	add	r3, r2
 800a85a:	61fb      	str	r3, [r7, #28]
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	699a      	ldr	r2, [r3, #24]
 800a860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a862:	441a      	add	r2, r3
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	619a      	str	r2, [r3, #24]
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	68da      	ldr	r2, [r3, #12]
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	699b      	ldr	r3, [r3, #24]
 800a870:	429a      	cmp	r2, r3
 800a872:	bf38      	it	cc
 800a874:	461a      	movcc	r2, r3
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	60da      	str	r2, [r3, #12]
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a880:	441a      	add	r2, r3
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	601a      	str	r2, [r3, #0]
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a88a:	1ad3      	subs	r3, r2, r3
 800a88c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2b00      	cmp	r3, #0
 800a892:	f47f aed4 	bne.w	800a63e <f_write+0x76>
 800a896:	e000      	b.n	800a89a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a898:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	7d1b      	ldrb	r3, [r3, #20]
 800a89e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8a2:	b2da      	uxtb	r2, r3
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a8a8:	2300      	movs	r3, #0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3730      	adds	r7, #48	; 0x30
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a8b2:	b580      	push	{r7, lr}
 800a8b4:	b086      	sub	sp, #24
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f107 0208 	add.w	r2, r7, #8
 800a8c0:	4611      	mov	r1, r2
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7ff fc46 	bl	800a154 <validate>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a8cc:	7dfb      	ldrb	r3, [r7, #23]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d168      	bne.n	800a9a4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	7d1b      	ldrb	r3, [r3, #20]
 800a8d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d062      	beq.n	800a9a4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	7d1b      	ldrb	r3, [r3, #20]
 800a8e2:	b25b      	sxtb	r3, r3
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	da15      	bge.n	800a914 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	7858      	ldrb	r0, [r3, #1]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6a1a      	ldr	r2, [r3, #32]
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	f7fd ff26 	bl	8008748 <disk_write>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d001      	beq.n	800a906 <f_sync+0x54>
 800a902:	2301      	movs	r3, #1
 800a904:	e04f      	b.n	800a9a6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	7d1b      	ldrb	r3, [r3, #20]
 800a90a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a90e:	b2da      	uxtb	r2, r3
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a914:	f7fa febc 	bl	8005690 <get_fattime>
 800a918:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a91a:	68ba      	ldr	r2, [r7, #8]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a920:	4619      	mov	r1, r3
 800a922:	4610      	mov	r0, r2
 800a924:	f7fe f9fe 	bl	8008d24 <move_window>
 800a928:	4603      	mov	r3, r0
 800a92a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a92c:	7dfb      	ldrb	r3, [r7, #23]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d138      	bne.n	800a9a4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a936:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	330b      	adds	r3, #11
 800a93c:	781a      	ldrb	r2, [r3, #0]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	330b      	adds	r3, #11
 800a942:	f042 0220 	orr.w	r2, r2, #32
 800a946:	b2d2      	uxtb	r2, r2
 800a948:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6818      	ldr	r0, [r3, #0]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	689b      	ldr	r3, [r3, #8]
 800a952:	461a      	mov	r2, r3
 800a954:	68f9      	ldr	r1, [r7, #12]
 800a956:	f7fe ff0b 	bl	8009770 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f103 021c 	add.w	r2, r3, #28
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	68db      	ldr	r3, [r3, #12]
 800a964:	4619      	mov	r1, r3
 800a966:	4610      	mov	r0, r2
 800a968:	f7fd ff82 	bl	8008870 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	3316      	adds	r3, #22
 800a970:	6939      	ldr	r1, [r7, #16]
 800a972:	4618      	mov	r0, r3
 800a974:	f7fd ff7c 	bl	8008870 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	3312      	adds	r3, #18
 800a97c:	2100      	movs	r1, #0
 800a97e:	4618      	mov	r0, r3
 800a980:	f7fd ff5b 	bl	800883a <st_word>
					fs->wflag = 1;
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	2201      	movs	r2, #1
 800a988:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7fe f9f7 	bl	8008d80 <sync_fs>
 800a992:	4603      	mov	r3, r0
 800a994:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	7d1b      	ldrb	r3, [r3, #20]
 800a99a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a99e:	b2da      	uxtb	r2, r3
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a9a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3718      	adds	r7, #24
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b084      	sub	sp, #16
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f7ff ff7b 	bl	800a8b2 <f_sync>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a9c0:	7bfb      	ldrb	r3, [r7, #15]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d118      	bne.n	800a9f8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f107 0208 	add.w	r2, r7, #8
 800a9cc:	4611      	mov	r1, r2
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f7ff fbc0 	bl	800a154 <validate>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a9d8:	7bfb      	ldrb	r3, [r7, #15]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d10c      	bne.n	800a9f8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	691b      	ldr	r3, [r3, #16]
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f7fe f8fa 	bl	8008bdc <dec_lock>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a9ec:	7bfb      	ldrb	r3, [r7, #15]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d102      	bne.n	800a9f8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a9f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3710      	adds	r7, #16
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}

0800aa02 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800aa02:	b580      	push	{r7, lr}
 800aa04:	b090      	sub	sp, #64	; 0x40
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
 800aa0a:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800aa0c:	f107 010c 	add.w	r1, r7, #12
 800aa10:	1d3b      	adds	r3, r7, #4
 800aa12:	2200      	movs	r2, #0
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7ff f951 	bl	8009cbc <find_volume>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800aa20:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d11f      	bne.n	800aa68 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	f107 030c 	add.w	r3, r7, #12
 800aa2e:	4611      	mov	r1, r2
 800aa30:	4618      	mov	r0, r3
 800aa32:	f7ff f837 	bl	8009aa4 <follow_path>
 800aa36:	4603      	mov	r3, r0
 800aa38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800aa3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d111      	bne.n	800aa68 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800aa44:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800aa48:	b25b      	sxtb	r3, r3
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	da03      	bge.n	800aa56 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800aa4e:	2306      	movs	r3, #6
 800aa50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800aa54:	e008      	b.n	800aa68 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d005      	beq.n	800aa68 <f_stat+0x66>
 800aa5c:	f107 030c 	add.w	r3, r7, #12
 800aa60:	6839      	ldr	r1, [r7, #0]
 800aa62:	4618      	mov	r0, r3
 800aa64:	f7fe ff2b 	bl	80098be <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800aa68:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3740      	adds	r7, #64	; 0x40
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b092      	sub	sp, #72	; 0x48
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	60f8      	str	r0, [r7, #12]
 800aa7c:	60b9      	str	r1, [r7, #8]
 800aa7e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800aa80:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800aa84:	f107 030c 	add.w	r3, r7, #12
 800aa88:	2200      	movs	r2, #0
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7ff f916 	bl	8009cbc <find_volume>
 800aa90:	4603      	mov	r3, r0
 800aa92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800aa96:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	f040 8099 	bne.w	800abd2 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800aaa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800aaa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa8:	691a      	ldr	r2, [r3, #16]
 800aaaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaac:	695b      	ldr	r3, [r3, #20]
 800aaae:	3b02      	subs	r3, #2
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d804      	bhi.n	800aabe <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800aab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab6:	691a      	ldr	r2, [r3, #16]
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	601a      	str	r2, [r3, #0]
 800aabc:	e089      	b.n	800abd2 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800aabe:	2300      	movs	r3, #0
 800aac0:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800aac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d128      	bne.n	800ab1c <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800aaca:	2302      	movs	r3, #2
 800aacc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad0:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800aad2:	f107 0314 	add.w	r3, r7, #20
 800aad6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aad8:	4618      	mov	r0, r3
 800aada:	f7fe f9de 	bl	8008e9a <get_fat>
 800aade:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800aae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aae6:	d103      	bne.n	800aaf0 <f_getfree+0x7c>
 800aae8:	2301      	movs	r3, #1
 800aaea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800aaee:	e063      	b.n	800abb8 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800aaf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d103      	bne.n	800aafe <f_getfree+0x8a>
 800aaf6:	2302      	movs	r3, #2
 800aaf8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800aafc:	e05c      	b.n	800abb8 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800aafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d102      	bne.n	800ab0a <f_getfree+0x96>
 800ab04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab06:	3301      	adds	r3, #1
 800ab08:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800ab0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab12:	695b      	ldr	r3, [r3, #20]
 800ab14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ab16:	429a      	cmp	r2, r3
 800ab18:	d3db      	bcc.n	800aad2 <f_getfree+0x5e>
 800ab1a:	e04d      	b.n	800abb8 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800ab1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1e:	695b      	ldr	r3, [r3, #20]
 800ab20:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab24:	6a1b      	ldr	r3, [r3, #32]
 800ab26:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	637b      	str	r3, [r7, #52]	; 0x34
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800ab30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d113      	bne.n	800ab5e <f_getfree+0xea>
							res = move_window(fs, sect++);
 800ab36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab3a:	1c5a      	adds	r2, r3, #1
 800ab3c:	63ba      	str	r2, [r7, #56]	; 0x38
 800ab3e:	4619      	mov	r1, r3
 800ab40:	f7fe f8f0 	bl	8008d24 <move_window>
 800ab44:	4603      	mov	r3, r0
 800ab46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800ab4a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d131      	bne.n	800abb6 <f_getfree+0x142>
							p = fs->win;
 800ab52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab54:	3330      	adds	r3, #48	; 0x30
 800ab56:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800ab58:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab5c:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800ab5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab60:	781b      	ldrb	r3, [r3, #0]
 800ab62:	2b02      	cmp	r3, #2
 800ab64:	d10f      	bne.n	800ab86 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800ab66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab68:	f7fd fe2c 	bl	80087c4 <ld_word>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d102      	bne.n	800ab78 <f_getfree+0x104>
 800ab72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab74:	3301      	adds	r3, #1
 800ab76:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800ab78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab7a:	3302      	adds	r3, #2
 800ab7c:	633b      	str	r3, [r7, #48]	; 0x30
 800ab7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab80:	3b02      	subs	r3, #2
 800ab82:	637b      	str	r3, [r7, #52]	; 0x34
 800ab84:	e010      	b.n	800aba8 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800ab86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab88:	f7fd fe34 	bl	80087f4 <ld_dword>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d102      	bne.n	800ab9c <f_getfree+0x128>
 800ab96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab98:	3301      	adds	r3, #1
 800ab9a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800ab9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9e:	3304      	adds	r3, #4
 800aba0:	633b      	str	r3, [r7, #48]	; 0x30
 800aba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aba4:	3b04      	subs	r3, #4
 800aba6:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800aba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abaa:	3b01      	subs	r3, #1
 800abac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d1bd      	bne.n	800ab30 <f_getfree+0xbc>
 800abb4:	e000      	b.n	800abb8 <f_getfree+0x144>
							if (res != FR_OK) break;
 800abb6:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800abbc:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800abbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800abc2:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800abc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc6:	791a      	ldrb	r2, [r3, #4]
 800abc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abca:	f042 0201 	orr.w	r2, r2, #1
 800abce:	b2d2      	uxtb	r2, r2
 800abd0:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800abd2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3748      	adds	r7, #72	; 0x48
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}

0800abde <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800abde:	b580      	push	{r7, lr}
 800abe0:	b096      	sub	sp, #88	; 0x58
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800abe6:	f107 0108 	add.w	r1, r7, #8
 800abea:	1d3b      	adds	r3, r7, #4
 800abec:	2202      	movs	r2, #2
 800abee:	4618      	mov	r0, r3
 800abf0:	f7ff f864 	bl	8009cbc <find_volume>
 800abf4:	4603      	mov	r3, r0
 800abf6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800abfe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	f040 80ec 	bne.w	800ade0 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	f107 030c 	add.w	r3, r7, #12
 800ac0e:	4611      	mov	r1, r2
 800ac10:	4618      	mov	r0, r3
 800ac12:	f7fe ff47 	bl	8009aa4 <follow_path>
 800ac16:	4603      	mov	r3, r0
 800ac18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800ac1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d102      	bne.n	800ac2a <f_mkdir+0x4c>
 800ac24:	2308      	movs	r3, #8
 800ac26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800ac2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ac2e:	2b04      	cmp	r3, #4
 800ac30:	f040 80d6 	bne.w	800ade0 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800ac34:	f107 030c 	add.w	r3, r7, #12
 800ac38:	2100      	movs	r1, #0
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7fe fb26 	bl	800928c <create_chain>
 800ac40:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	895b      	ldrh	r3, [r3, #10]
 800ac46:	025b      	lsls	r3, r3, #9
 800ac48:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800ac50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d102      	bne.n	800ac5c <f_mkdir+0x7e>
 800ac56:	2307      	movs	r3, #7
 800ac58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800ac5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac5e:	2b01      	cmp	r3, #1
 800ac60:	d102      	bne.n	800ac68 <f_mkdir+0x8a>
 800ac62:	2302      	movs	r3, #2
 800ac64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ac68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac6e:	d102      	bne.n	800ac76 <f_mkdir+0x98>
 800ac70:	2301      	movs	r3, #1
 800ac72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800ac76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d106      	bne.n	800ac8c <f_mkdir+0xae>
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	4618      	mov	r0, r3
 800ac82:	f7fe f80b 	bl	8008c9c <sync_window>
 800ac86:	4603      	mov	r3, r0
 800ac88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 800ac8c:	f7fa fd00 	bl	8005690 <get_fattime>
 800ac90:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800ac92:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d16a      	bne.n	800ad70 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7fe f8dc 	bl	8008e5c <clust2sect>
 800aca4:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	3330      	adds	r3, #48	; 0x30
 800acaa:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 800acac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800acb0:	2100      	movs	r1, #0
 800acb2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800acb4:	f7fd fe29 	bl	800890a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800acb8:	220b      	movs	r2, #11
 800acba:	2120      	movs	r1, #32
 800acbc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800acbe:	f7fd fe24 	bl	800890a <mem_set>
					dir[DIR_Name] = '.';
 800acc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acc4:	222e      	movs	r2, #46	; 0x2e
 800acc6:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800acc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acca:	330b      	adds	r3, #11
 800accc:	2210      	movs	r2, #16
 800acce:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800acd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acd2:	3316      	adds	r3, #22
 800acd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800acd6:	4618      	mov	r0, r3
 800acd8:	f7fd fdca 	bl	8008870 <st_dword>
					st_clust(fs, dir, dcl);
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ace0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7fe fd44 	bl	8009770 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800ace8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acea:	3320      	adds	r3, #32
 800acec:	2220      	movs	r2, #32
 800acee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800acf0:	4618      	mov	r0, r3
 800acf2:	f7fd fde9 	bl	80088c8 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800acf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acf8:	3321      	adds	r3, #33	; 0x21
 800acfa:	222e      	movs	r2, #46	; 0x2e
 800acfc:	701a      	strb	r2, [r3, #0]
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	781b      	ldrb	r3, [r3, #0]
 800ad06:	2b03      	cmp	r3, #3
 800ad08:	d106      	bne.n	800ad18 <f_mkdir+0x13a>
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d101      	bne.n	800ad18 <f_mkdir+0x13a>
 800ad14:	2300      	movs	r3, #0
 800ad16:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800ad18:	68b8      	ldr	r0, [r7, #8]
 800ad1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad1c:	3320      	adds	r3, #32
 800ad1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad20:	4619      	mov	r1, r3
 800ad22:	f7fe fd25 	bl	8009770 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	895b      	ldrh	r3, [r3, #10]
 800ad2a:	653b      	str	r3, [r7, #80]	; 0x50
 800ad2c:	e01b      	b.n	800ad66 <f_mkdir+0x188>
					fs->winsect = dsc++;
 800ad2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad30:	1c5a      	adds	r2, r3, #1
 800ad32:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ad34:	68ba      	ldr	r2, [r7, #8]
 800ad36:	62d3      	str	r3, [r2, #44]	; 0x2c
					fs->wflag = 1;
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	4618      	mov	r0, r3
 800ad42:	f7fd ffab 	bl	8008c9c <sync_window>
 800ad46:	4603      	mov	r3, r0
 800ad48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 800ad4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d10c      	bne.n	800ad6e <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 800ad54:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad58:	2100      	movs	r1, #0
 800ad5a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ad5c:	f7fd fdd5 	bl	800890a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800ad60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad62:	3b01      	subs	r3, #1
 800ad64:	653b      	str	r3, [r7, #80]	; 0x50
 800ad66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d1e0      	bne.n	800ad2e <f_mkdir+0x150>
 800ad6c:	e000      	b.n	800ad70 <f_mkdir+0x192>
					if (res != FR_OK) break;
 800ad6e:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800ad70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d107      	bne.n	800ad88 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800ad78:	f107 030c 	add.w	r3, r7, #12
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f7fe fd6c 	bl	800985a <dir_register>
 800ad82:	4603      	mov	r3, r0
 800ad84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 800ad88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d120      	bne.n	800add2 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800ad90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad92:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800ad94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad96:	3316      	adds	r3, #22
 800ad98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f7fd fd68 	bl	8008870 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ada4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7fe fce2 	bl	8009770 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800adac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adae:	330b      	adds	r3, #11
 800adb0:	2210      	movs	r2, #16
 800adb2:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	2201      	movs	r2, #1
 800adb8:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800adba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d10e      	bne.n	800ade0 <f_mkdir+0x202>
					res = sync_fs(fs);
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	4618      	mov	r0, r3
 800adc6:	f7fd ffdb 	bl	8008d80 <sync_fs>
 800adca:	4603      	mov	r3, r0
 800adcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800add0:	e006      	b.n	800ade0 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800add2:	f107 030c 	add.w	r3, r7, #12
 800add6:	2200      	movs	r2, #0
 800add8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800adda:	4618      	mov	r0, r3
 800addc:	f7fe f9f1 	bl	80091c2 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800ade0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3758      	adds	r7, #88	; 0x58
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800adec:	b480      	push	{r7}
 800adee:	b087      	sub	sp, #28
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	60f8      	str	r0, [r7, #12]
 800adf4:	60b9      	str	r1, [r7, #8]
 800adf6:	4613      	mov	r3, r2
 800adf8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800adfa:	2301      	movs	r3, #1
 800adfc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800adfe:	2300      	movs	r3, #0
 800ae00:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ae02:	4b1f      	ldr	r3, [pc, #124]	; (800ae80 <FATFS_LinkDriverEx+0x94>)
 800ae04:	7a5b      	ldrb	r3, [r3, #9]
 800ae06:	b2db      	uxtb	r3, r3
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d131      	bne.n	800ae70 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ae0c:	4b1c      	ldr	r3, [pc, #112]	; (800ae80 <FATFS_LinkDriverEx+0x94>)
 800ae0e:	7a5b      	ldrb	r3, [r3, #9]
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	461a      	mov	r2, r3
 800ae14:	4b1a      	ldr	r3, [pc, #104]	; (800ae80 <FATFS_LinkDriverEx+0x94>)
 800ae16:	2100      	movs	r1, #0
 800ae18:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ae1a:	4b19      	ldr	r3, [pc, #100]	; (800ae80 <FATFS_LinkDriverEx+0x94>)
 800ae1c:	7a5b      	ldrb	r3, [r3, #9]
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	4a17      	ldr	r2, [pc, #92]	; (800ae80 <FATFS_LinkDriverEx+0x94>)
 800ae22:	009b      	lsls	r3, r3, #2
 800ae24:	4413      	add	r3, r2
 800ae26:	68fa      	ldr	r2, [r7, #12]
 800ae28:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ae2a:	4b15      	ldr	r3, [pc, #84]	; (800ae80 <FATFS_LinkDriverEx+0x94>)
 800ae2c:	7a5b      	ldrb	r3, [r3, #9]
 800ae2e:	b2db      	uxtb	r3, r3
 800ae30:	461a      	mov	r2, r3
 800ae32:	4b13      	ldr	r3, [pc, #76]	; (800ae80 <FATFS_LinkDriverEx+0x94>)
 800ae34:	4413      	add	r3, r2
 800ae36:	79fa      	ldrb	r2, [r7, #7]
 800ae38:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ae3a:	4b11      	ldr	r3, [pc, #68]	; (800ae80 <FATFS_LinkDriverEx+0x94>)
 800ae3c:	7a5b      	ldrb	r3, [r3, #9]
 800ae3e:	b2db      	uxtb	r3, r3
 800ae40:	1c5a      	adds	r2, r3, #1
 800ae42:	b2d1      	uxtb	r1, r2
 800ae44:	4a0e      	ldr	r2, [pc, #56]	; (800ae80 <FATFS_LinkDriverEx+0x94>)
 800ae46:	7251      	strb	r1, [r2, #9]
 800ae48:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ae4a:	7dbb      	ldrb	r3, [r7, #22]
 800ae4c:	3330      	adds	r3, #48	; 0x30
 800ae4e:	b2da      	uxtb	r2, r3
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	3301      	adds	r3, #1
 800ae58:	223a      	movs	r2, #58	; 0x3a
 800ae5a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	3302      	adds	r3, #2
 800ae60:	222f      	movs	r2, #47	; 0x2f
 800ae62:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	3303      	adds	r3, #3
 800ae68:	2200      	movs	r2, #0
 800ae6a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ae70:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	371c      	adds	r7, #28
 800ae76:	46bd      	mov	sp, r7
 800ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7c:	4770      	bx	lr
 800ae7e:	bf00      	nop
 800ae80:	200000d8 	.word	0x200000d8

0800ae84 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b082      	sub	sp, #8
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ae8e:	2200      	movs	r2, #0
 800ae90:	6839      	ldr	r1, [r7, #0]
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f7ff ffaa 	bl	800adec <FATFS_LinkDriverEx>
 800ae98:	4603      	mov	r3, r0
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3708      	adds	r7, #8
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
	...

0800aea4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800aea8:	2201      	movs	r2, #1
 800aeaa:	490e      	ldr	r1, [pc, #56]	; (800aee4 <MX_USB_HOST_Init+0x40>)
 800aeac:	480e      	ldr	r0, [pc, #56]	; (800aee8 <MX_USB_HOST_Init+0x44>)
 800aeae:	f7fc f893 	bl	8006fd8 <USBH_Init>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d001      	beq.n	800aebc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800aeb8:	f7f6 fad6 	bl	8001468 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800aebc:	490b      	ldr	r1, [pc, #44]	; (800aeec <MX_USB_HOST_Init+0x48>)
 800aebe:	480a      	ldr	r0, [pc, #40]	; (800aee8 <MX_USB_HOST_Init+0x44>)
 800aec0:	f7fc f918 	bl	80070f4 <USBH_RegisterClass>
 800aec4:	4603      	mov	r3, r0
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d001      	beq.n	800aece <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800aeca:	f7f6 facd 	bl	8001468 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800aece:	4806      	ldr	r0, [pc, #24]	; (800aee8 <MX_USB_HOST_Init+0x44>)
 800aed0:	f7fc f99c 	bl	800720c <USBH_Start>
 800aed4:	4603      	mov	r3, r0
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d001      	beq.n	800aede <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800aeda:	f7f6 fac5 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800aede:	bf00      	nop
 800aee0:	bd80      	pop	{r7, pc}
 800aee2:	bf00      	nop
 800aee4:	0800af05 	.word	0x0800af05
 800aee8:	200005d4 	.word	0x200005d4
 800aeec:	2000000c 	.word	0x2000000c

0800aef0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800aef4:	4802      	ldr	r0, [pc, #8]	; (800af00 <MX_USB_HOST_Process+0x10>)
 800aef6:	f7fc f999 	bl	800722c <USBH_Process>
}
 800aefa:	bf00      	nop
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	200005d4 	.word	0x200005d4

0800af04 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b082      	sub	sp, #8
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	460b      	mov	r3, r1
 800af0e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800af10:	78fb      	ldrb	r3, [r7, #3]
 800af12:	3b01      	subs	r3, #1
 800af14:	2b04      	cmp	r3, #4
 800af16:	d841      	bhi.n	800af9c <USBH_UserProcess+0x98>
 800af18:	a201      	add	r2, pc, #4	; (adr r2, 800af20 <USBH_UserProcess+0x1c>)
 800af1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af1e:	bf00      	nop
 800af20:	0800af9d 	.word	0x0800af9d
 800af24:	0800af41 	.word	0x0800af41
 800af28:	0800af9d 	.word	0x0800af9d
 800af2c:	0800af95 	.word	0x0800af95
 800af30:	0800af35 	.word	0x0800af35
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800af34:	4b1c      	ldr	r3, [pc, #112]	; (800afa8 <USBH_UserProcess+0xa4>)
 800af36:	2203      	movs	r2, #3
 800af38:	701a      	strb	r2, [r3, #0]
  Unmount_USB();
 800af3a:	f7f5 fe63 	bl	8000c04 <Unmount_USB>
  break;
 800af3e:	e02e      	b.n	800af9e <USBH_UserProcess+0x9a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800af40:	4b19      	ldr	r3, [pc, #100]	; (800afa8 <USBH_UserProcess+0xa4>)
 800af42:	2202      	movs	r2, #2
 800af44:	701a      	strb	r2, [r3, #0]

  Mount_USB();
 800af46:	f7f5 fe3b 	bl	8000bc0 <Mount_USB>

  Check_USB_Details();   // check space details
 800af4a:	f7f6 f8f3 	bl	8001134 <Check_USB_Details>

  //Scan_USB("/");   // scan for files and directories

  Create_File("/ROOTFILE.txt");
 800af4e:	4817      	ldr	r0, [pc, #92]	; (800afac <USBH_UserProcess+0xa8>)
 800af50:	f7f5 ff3c 	bl	8000dcc <Create_File>
  Write_File("/ROOTFILE.txt", "This data should be in root file\n");
 800af54:	4916      	ldr	r1, [pc, #88]	; (800afb0 <USBH_UserProcess+0xac>)
 800af56:	4815      	ldr	r0, [pc, #84]	; (800afac <USBH_UserProcess+0xa8>)
 800af58:	f7f5 fe74 	bl	8000c44 <Write_File>

  Create_Dir("/DIR1");
 800af5c:	4815      	ldr	r0, [pc, #84]	; (800afb4 <USBH_UserProcess+0xb0>)
 800af5e:	f7f6 f8a9 	bl	80010b4 <Create_Dir>
  Create_File("/DIR1/DIR1FILE.txt");
 800af62:	4815      	ldr	r0, [pc, #84]	; (800afb8 <USBH_UserProcess+0xb4>)
 800af64:	f7f5 ff32 	bl	8000dcc <Create_File>
  Write_File("/DIR1/DIR1FILE.txt", "This data should be in DIR1 file\n");
 800af68:	4914      	ldr	r1, [pc, #80]	; (800afbc <USBH_UserProcess+0xb8>)
 800af6a:	4813      	ldr	r0, [pc, #76]	; (800afb8 <USBH_UserProcess+0xb4>)
 800af6c:	f7f5 fe6a 	bl	8000c44 <Write_File>

  Create_Dir("/DIR2");
 800af70:	4813      	ldr	r0, [pc, #76]	; (800afc0 <USBH_UserProcess+0xbc>)
 800af72:	f7f6 f89f 	bl	80010b4 <Create_Dir>
  Create_Dir("/DIR2/SUBDIR1");
 800af76:	4813      	ldr	r0, [pc, #76]	; (800afc4 <USBH_UserProcess+0xc0>)
 800af78:	f7f6 f89c 	bl	80010b4 <Create_Dir>
  Create_File("/DIR2/SUBDIR1/DIR2FILE.txt");
 800af7c:	4812      	ldr	r0, [pc, #72]	; (800afc8 <USBH_UserProcess+0xc4>)
 800af7e:	f7f5 ff25 	bl	8000dcc <Create_File>
  Write_File("/DIR2/SUBDIR1/DIR2FILE.txt", "This data should be in DIR2/SUBDIR1 file\n as i have nothing better to write/n so i just wrote this\n");
 800af82:	4912      	ldr	r1, [pc, #72]	; (800afcc <USBH_UserProcess+0xc8>)
 800af84:	4810      	ldr	r0, [pc, #64]	; (800afc8 <USBH_UserProcess+0xc4>)
 800af86:	f7f5 fe5d 	bl	8000c44 <Write_File>

  Update_File("/ROOTFILE.txt", "This updated data must be in second line of Root File\n");
 800af8a:	4911      	ldr	r1, [pc, #68]	; (800afd0 <USBH_UserProcess+0xcc>)
 800af8c:	4807      	ldr	r0, [pc, #28]	; (800afac <USBH_UserProcess+0xa8>)
 800af8e:	f7f5 ffb9 	bl	8000f04 <Update_File>
  break;
 800af92:	e004      	b.n	800af9e <USBH_UserProcess+0x9a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800af94:	4b04      	ldr	r3, [pc, #16]	; (800afa8 <USBH_UserProcess+0xa4>)
 800af96:	2201      	movs	r2, #1
 800af98:	701a      	strb	r2, [r3, #0]
  break;
 800af9a:	e000      	b.n	800af9e <USBH_UserProcess+0x9a>

  default:
  break;
 800af9c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800af9e:	bf00      	nop
 800afa0:	3708      	adds	r7, #8
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
 800afa6:	bf00      	nop
 800afa8:	200000e4 	.word	0x200000e4
 800afac:	0800c34c 	.word	0x0800c34c
 800afb0:	0800c35c 	.word	0x0800c35c
 800afb4:	0800c380 	.word	0x0800c380
 800afb8:	0800c388 	.word	0x0800c388
 800afbc:	0800c39c 	.word	0x0800c39c
 800afc0:	0800c3c0 	.word	0x0800c3c0
 800afc4:	0800c3c8 	.word	0x0800c3c8
 800afc8:	0800c3d8 	.word	0x0800c3d8
 800afcc:	0800c3f4 	.word	0x0800c3f4
 800afd0:	0800c458 	.word	0x0800c458

0800afd4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b08a      	sub	sp, #40	; 0x28
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800afdc:	f107 0314 	add.w	r3, r7, #20
 800afe0:	2200      	movs	r2, #0
 800afe2:	601a      	str	r2, [r3, #0]
 800afe4:	605a      	str	r2, [r3, #4]
 800afe6:	609a      	str	r2, [r3, #8]
 800afe8:	60da      	str	r2, [r3, #12]
 800afea:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aff4:	d158      	bne.n	800b0a8 <HAL_HCD_MspInit+0xd4>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aff6:	2300      	movs	r3, #0
 800aff8:	613b      	str	r3, [r7, #16]
 800affa:	4b2d      	ldr	r3, [pc, #180]	; (800b0b0 <HAL_HCD_MspInit+0xdc>)
 800affc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800affe:	4a2c      	ldr	r2, [pc, #176]	; (800b0b0 <HAL_HCD_MspInit+0xdc>)
 800b000:	f043 0301 	orr.w	r3, r3, #1
 800b004:	6313      	str	r3, [r2, #48]	; 0x30
 800b006:	4b2a      	ldr	r3, [pc, #168]	; (800b0b0 <HAL_HCD_MspInit+0xdc>)
 800b008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b00a:	f003 0301 	and.w	r3, r3, #1
 800b00e:	613b      	str	r3, [r7, #16]
 800b010:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800b012:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b018:	2300      	movs	r3, #0
 800b01a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b01c:	2300      	movs	r3, #0
 800b01e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b020:	f107 0314 	add.w	r3, r7, #20
 800b024:	4619      	mov	r1, r3
 800b026:	4823      	ldr	r0, [pc, #140]	; (800b0b4 <HAL_HCD_MspInit+0xe0>)
 800b028:	f7f6 fce2 	bl	80019f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800b02c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b032:	2302      	movs	r3, #2
 800b034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b036:	2300      	movs	r3, #0
 800b038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b03a:	2303      	movs	r3, #3
 800b03c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b03e:	230a      	movs	r3, #10
 800b040:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b042:	f107 0314 	add.w	r3, r7, #20
 800b046:	4619      	mov	r1, r3
 800b048:	481a      	ldr	r0, [pc, #104]	; (800b0b4 <HAL_HCD_MspInit+0xe0>)
 800b04a:	f7f6 fcd1 	bl	80019f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800b04e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b054:	2302      	movs	r3, #2
 800b056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b058:	2301      	movs	r3, #1
 800b05a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b05c:	2303      	movs	r3, #3
 800b05e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b060:	230a      	movs	r3, #10
 800b062:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b064:	f107 0314 	add.w	r3, r7, #20
 800b068:	4619      	mov	r1, r3
 800b06a:	4812      	ldr	r0, [pc, #72]	; (800b0b4 <HAL_HCD_MspInit+0xe0>)
 800b06c:	f7f6 fcc0 	bl	80019f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b070:	4b0f      	ldr	r3, [pc, #60]	; (800b0b0 <HAL_HCD_MspInit+0xdc>)
 800b072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b074:	4a0e      	ldr	r2, [pc, #56]	; (800b0b0 <HAL_HCD_MspInit+0xdc>)
 800b076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b07a:	6353      	str	r3, [r2, #52]	; 0x34
 800b07c:	2300      	movs	r3, #0
 800b07e:	60fb      	str	r3, [r7, #12]
 800b080:	4b0b      	ldr	r3, [pc, #44]	; (800b0b0 <HAL_HCD_MspInit+0xdc>)
 800b082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b084:	4a0a      	ldr	r2, [pc, #40]	; (800b0b0 <HAL_HCD_MspInit+0xdc>)
 800b086:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b08a:	6453      	str	r3, [r2, #68]	; 0x44
 800b08c:	4b08      	ldr	r3, [pc, #32]	; (800b0b0 <HAL_HCD_MspInit+0xdc>)
 800b08e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b090:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b094:	60fb      	str	r3, [r7, #12]
 800b096:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b098:	2200      	movs	r2, #0
 800b09a:	2100      	movs	r1, #0
 800b09c:	2043      	movs	r0, #67	; 0x43
 800b09e:	f7f6 fc70 	bl	8001982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b0a2:	2043      	movs	r0, #67	; 0x43
 800b0a4:	f7f6 fc89 	bl	80019ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b0a8:	bf00      	nop
 800b0aa:	3728      	adds	r7, #40	; 0x28
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}
 800b0b0:	40023800 	.word	0x40023800
 800b0b4:	40020000 	.word	0x40020000

0800b0b8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f7fc fc83 	bl	80079d2 <USBH_LL_IncTimer>
}
 800b0cc:	bf00      	nop
 800b0ce:	3708      	adds	r7, #8
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f7fc fcbb 	bl	8007a5e <USBH_LL_Connect>
}
 800b0e8:	bf00      	nop
 800b0ea:	3708      	adds	r7, #8
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}

0800b0f0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b082      	sub	sp, #8
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7fc fcc4 	bl	8007a8c <USBH_LL_Disconnect>
}
 800b104:	bf00      	nop
 800b106:	3708      	adds	r7, #8
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}

0800b10c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b083      	sub	sp, #12
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	460b      	mov	r3, r1
 800b116:	70fb      	strb	r3, [r7, #3]
 800b118:	4613      	mov	r3, r2
 800b11a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b11c:	bf00      	nop
 800b11e:	370c      	adds	r7, #12
 800b120:	46bd      	mov	sp, r7
 800b122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b126:	4770      	bx	lr

0800b128 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b082      	sub	sp, #8
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b136:	4618      	mov	r0, r3
 800b138:	f7fc fc75 	bl	8007a26 <USBH_LL_PortEnabled>
}
 800b13c:	bf00      	nop
 800b13e:	3708      	adds	r7, #8
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b082      	sub	sp, #8
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b152:	4618      	mov	r0, r3
 800b154:	f7fc fc75 	bl	8007a42 <USBH_LL_PortDisabled>
}
 800b158:	bf00      	nop
 800b15a:	3708      	adds	r7, #8
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b082      	sub	sp, #8
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d12a      	bne.n	800b1c8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b172:	4a18      	ldr	r2, [pc, #96]	; (800b1d4 <USBH_LL_Init+0x74>)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	4a15      	ldr	r2, [pc, #84]	; (800b1d4 <USBH_LL_Init+0x74>)
 800b17e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b182:	4b14      	ldr	r3, [pc, #80]	; (800b1d4 <USBH_LL_Init+0x74>)
 800b184:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b188:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b18a:	4b12      	ldr	r3, [pc, #72]	; (800b1d4 <USBH_LL_Init+0x74>)
 800b18c:	2208      	movs	r2, #8
 800b18e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b190:	4b10      	ldr	r3, [pc, #64]	; (800b1d4 <USBH_LL_Init+0x74>)
 800b192:	2201      	movs	r2, #1
 800b194:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b196:	4b0f      	ldr	r3, [pc, #60]	; (800b1d4 <USBH_LL_Init+0x74>)
 800b198:	2200      	movs	r2, #0
 800b19a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b19c:	4b0d      	ldr	r3, [pc, #52]	; (800b1d4 <USBH_LL_Init+0x74>)
 800b19e:	2202      	movs	r2, #2
 800b1a0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b1a2:	4b0c      	ldr	r3, [pc, #48]	; (800b1d4 <USBH_LL_Init+0x74>)
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b1a8:	480a      	ldr	r0, [pc, #40]	; (800b1d4 <USBH_LL_Init+0x74>)
 800b1aa:	f7f6 fdd8 	bl	8001d5e <HAL_HCD_Init>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d001      	beq.n	800b1b8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b1b4:	f7f6 f958 	bl	8001468 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b1b8:	4806      	ldr	r0, [pc, #24]	; (800b1d4 <USBH_LL_Init+0x74>)
 800b1ba:	f7f7 f9bc 	bl	8002536 <HAL_HCD_GetCurrentFrame>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f7fc fbf6 	bl	80079b4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b1c8:	2300      	movs	r3, #0
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3708      	adds	r7, #8
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop
 800b1d4:	200009ac 	.word	0x200009ac

0800b1d8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f7f7 f92b 	bl	800244a <HAL_HCD_Start>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b1f8:	7bfb      	ldrb	r3, [r7, #15]
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f000 f982 	bl	800b504 <USBH_Get_USB_Status>
 800b200:	4603      	mov	r3, r0
 800b202:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b204:	7bbb      	ldrb	r3, [r7, #14]
}
 800b206:	4618      	mov	r0, r3
 800b208:	3710      	adds	r7, #16
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}

0800b20e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b20e:	b580      	push	{r7, lr}
 800b210:	b084      	sub	sp, #16
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b216:	2300      	movs	r3, #0
 800b218:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b21a:	2300      	movs	r3, #0
 800b21c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b224:	4618      	mov	r0, r3
 800b226:	f7f7 f933 	bl	8002490 <HAL_HCD_Stop>
 800b22a:	4603      	mov	r3, r0
 800b22c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b22e:	7bfb      	ldrb	r3, [r7, #15]
 800b230:	4618      	mov	r0, r3
 800b232:	f000 f967 	bl	800b504 <USBH_Get_USB_Status>
 800b236:	4603      	mov	r3, r0
 800b238:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b23a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3710      	adds	r7, #16
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}

0800b244 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b24c:	2301      	movs	r3, #1
 800b24e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b256:	4618      	mov	r0, r3
 800b258:	f7f7 f97b 	bl	8002552 <HAL_HCD_GetCurrentSpeed>
 800b25c:	4603      	mov	r3, r0
 800b25e:	2b02      	cmp	r3, #2
 800b260:	d00c      	beq.n	800b27c <USBH_LL_GetSpeed+0x38>
 800b262:	2b02      	cmp	r3, #2
 800b264:	d80d      	bhi.n	800b282 <USBH_LL_GetSpeed+0x3e>
 800b266:	2b00      	cmp	r3, #0
 800b268:	d002      	beq.n	800b270 <USBH_LL_GetSpeed+0x2c>
 800b26a:	2b01      	cmp	r3, #1
 800b26c:	d003      	beq.n	800b276 <USBH_LL_GetSpeed+0x32>
 800b26e:	e008      	b.n	800b282 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b270:	2300      	movs	r3, #0
 800b272:	73fb      	strb	r3, [r7, #15]
    break;
 800b274:	e008      	b.n	800b288 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b276:	2301      	movs	r3, #1
 800b278:	73fb      	strb	r3, [r7, #15]
    break;
 800b27a:	e005      	b.n	800b288 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b27c:	2302      	movs	r3, #2
 800b27e:	73fb      	strb	r3, [r7, #15]
    break;
 800b280:	e002      	b.n	800b288 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b282:	2301      	movs	r3, #1
 800b284:	73fb      	strb	r3, [r7, #15]
    break;
 800b286:	bf00      	nop
  }
  return  speed;
 800b288:	7bfb      	ldrb	r3, [r7, #15]
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3710      	adds	r7, #16
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}

0800b292 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b292:	b580      	push	{r7, lr}
 800b294:	b084      	sub	sp, #16
 800b296:	af00      	add	r7, sp, #0
 800b298:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b29a:	2300      	movs	r3, #0
 800b29c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f7f7 f90e 	bl	80024ca <HAL_HCD_ResetPort>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b2b2:	7bfb      	ldrb	r3, [r7, #15]
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f000 f925 	bl	800b504 <USBH_Get_USB_Status>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2be:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3710      	adds	r7, #16
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	460b      	mov	r3, r1
 800b2d2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b2da:	78fa      	ldrb	r2, [r7, #3]
 800b2dc:	4611      	mov	r1, r2
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f7f7 f915 	bl	800250e <HAL_HCD_HC_GetXferCount>
 800b2e4:	4603      	mov	r3, r0
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3708      	adds	r7, #8
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}

0800b2ee <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b2ee:	b590      	push	{r4, r7, lr}
 800b2f0:	b089      	sub	sp, #36	; 0x24
 800b2f2:	af04      	add	r7, sp, #16
 800b2f4:	6078      	str	r0, [r7, #4]
 800b2f6:	4608      	mov	r0, r1
 800b2f8:	4611      	mov	r1, r2
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	70fb      	strb	r3, [r7, #3]
 800b300:	460b      	mov	r3, r1
 800b302:	70bb      	strb	r3, [r7, #2]
 800b304:	4613      	mov	r3, r2
 800b306:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b308:	2300      	movs	r3, #0
 800b30a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b30c:	2300      	movs	r3, #0
 800b30e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b316:	787c      	ldrb	r4, [r7, #1]
 800b318:	78ba      	ldrb	r2, [r7, #2]
 800b31a:	78f9      	ldrb	r1, [r7, #3]
 800b31c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b31e:	9302      	str	r3, [sp, #8]
 800b320:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b324:	9301      	str	r3, [sp, #4]
 800b326:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b32a:	9300      	str	r3, [sp, #0]
 800b32c:	4623      	mov	r3, r4
 800b32e:	f7f6 fd78 	bl	8001e22 <HAL_HCD_HC_Init>
 800b332:	4603      	mov	r3, r0
 800b334:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b336:	7bfb      	ldrb	r3, [r7, #15]
 800b338:	4618      	mov	r0, r3
 800b33a:	f000 f8e3 	bl	800b504 <USBH_Get_USB_Status>
 800b33e:	4603      	mov	r3, r0
 800b340:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b342:	7bbb      	ldrb	r3, [r7, #14]
}
 800b344:	4618      	mov	r0, r3
 800b346:	3714      	adds	r7, #20
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd90      	pop	{r4, r7, pc}

0800b34c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	460b      	mov	r3, r1
 800b356:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b358:	2300      	movs	r3, #0
 800b35a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b35c:	2300      	movs	r3, #0
 800b35e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b366:	78fa      	ldrb	r2, [r7, #3]
 800b368:	4611      	mov	r1, r2
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7f6 fde8 	bl	8001f40 <HAL_HCD_HC_Halt>
 800b370:	4603      	mov	r3, r0
 800b372:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b374:	7bfb      	ldrb	r3, [r7, #15]
 800b376:	4618      	mov	r0, r3
 800b378:	f000 f8c4 	bl	800b504 <USBH_Get_USB_Status>
 800b37c:	4603      	mov	r3, r0
 800b37e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b380:	7bbb      	ldrb	r3, [r7, #14]
}
 800b382:	4618      	mov	r0, r3
 800b384:	3710      	adds	r7, #16
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}

0800b38a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b38a:	b590      	push	{r4, r7, lr}
 800b38c:	b089      	sub	sp, #36	; 0x24
 800b38e:	af04      	add	r7, sp, #16
 800b390:	6078      	str	r0, [r7, #4]
 800b392:	4608      	mov	r0, r1
 800b394:	4611      	mov	r1, r2
 800b396:	461a      	mov	r2, r3
 800b398:	4603      	mov	r3, r0
 800b39a:	70fb      	strb	r3, [r7, #3]
 800b39c:	460b      	mov	r3, r1
 800b39e:	70bb      	strb	r3, [r7, #2]
 800b3a0:	4613      	mov	r3, r2
 800b3a2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b3b2:	787c      	ldrb	r4, [r7, #1]
 800b3b4:	78ba      	ldrb	r2, [r7, #2]
 800b3b6:	78f9      	ldrb	r1, [r7, #3]
 800b3b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b3bc:	9303      	str	r3, [sp, #12]
 800b3be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b3c0:	9302      	str	r3, [sp, #8]
 800b3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c4:	9301      	str	r3, [sp, #4]
 800b3c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b3ca:	9300      	str	r3, [sp, #0]
 800b3cc:	4623      	mov	r3, r4
 800b3ce:	f7f6 fddb 	bl	8001f88 <HAL_HCD_HC_SubmitRequest>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b3d6:	7bfb      	ldrb	r3, [r7, #15]
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f000 f893 	bl	800b504 <USBH_Get_USB_Status>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3714      	adds	r7, #20
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd90      	pop	{r4, r7, pc}

0800b3ec <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	460b      	mov	r3, r1
 800b3f6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b3fe:	78fa      	ldrb	r2, [r7, #3]
 800b400:	4611      	mov	r1, r2
 800b402:	4618      	mov	r0, r3
 800b404:	f7f7 f86f 	bl	80024e6 <HAL_HCD_HC_GetURBState>
 800b408:	4603      	mov	r3, r0
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3708      	adds	r7, #8
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b412:	b580      	push	{r7, lr}
 800b414:	b082      	sub	sp, #8
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
 800b41a:	460b      	mov	r3, r1
 800b41c:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800b41e:	20c8      	movs	r0, #200	; 0xc8
 800b420:	f7f6 f9b0 	bl	8001784 <HAL_Delay>
  return USBH_OK;
 800b424:	2300      	movs	r3, #0
}
 800b426:	4618      	mov	r0, r3
 800b428:	3708      	adds	r7, #8
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}

0800b42e <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b42e:	b480      	push	{r7}
 800b430:	b085      	sub	sp, #20
 800b432:	af00      	add	r7, sp, #0
 800b434:	6078      	str	r0, [r7, #4]
 800b436:	460b      	mov	r3, r1
 800b438:	70fb      	strb	r3, [r7, #3]
 800b43a:	4613      	mov	r3, r2
 800b43c:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b444:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b446:	78fb      	ldrb	r3, [r7, #3]
 800b448:	68fa      	ldr	r2, [r7, #12]
 800b44a:	212c      	movs	r1, #44	; 0x2c
 800b44c:	fb01 f303 	mul.w	r3, r1, r3
 800b450:	4413      	add	r3, r2
 800b452:	333b      	adds	r3, #59	; 0x3b
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d009      	beq.n	800b46e <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b45a:	78fb      	ldrb	r3, [r7, #3]
 800b45c:	68fa      	ldr	r2, [r7, #12]
 800b45e:	212c      	movs	r1, #44	; 0x2c
 800b460:	fb01 f303 	mul.w	r3, r1, r3
 800b464:	4413      	add	r3, r2
 800b466:	3354      	adds	r3, #84	; 0x54
 800b468:	78ba      	ldrb	r2, [r7, #2]
 800b46a:	701a      	strb	r2, [r3, #0]
 800b46c:	e008      	b.n	800b480 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b46e:	78fb      	ldrb	r3, [r7, #3]
 800b470:	68fa      	ldr	r2, [r7, #12]
 800b472:	212c      	movs	r1, #44	; 0x2c
 800b474:	fb01 f303 	mul.w	r3, r1, r3
 800b478:	4413      	add	r3, r2
 800b47a:	3355      	adds	r3, #85	; 0x55
 800b47c:	78ba      	ldrb	r2, [r7, #2]
 800b47e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b480:	2300      	movs	r3, #0
}
 800b482:	4618      	mov	r0, r3
 800b484:	3714      	adds	r7, #20
 800b486:	46bd      	mov	sp, r7
 800b488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48c:	4770      	bx	lr

0800b48e <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b48e:	b480      	push	{r7}
 800b490:	b085      	sub	sp, #20
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
 800b496:	460b      	mov	r3, r1
 800b498:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800b49a:	2300      	movs	r3, #0
 800b49c:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b4a4:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800b4a6:	78fb      	ldrb	r3, [r7, #3]
 800b4a8:	68ba      	ldr	r2, [r7, #8]
 800b4aa:	212c      	movs	r1, #44	; 0x2c
 800b4ac:	fb01 f303 	mul.w	r3, r1, r3
 800b4b0:	4413      	add	r3, r2
 800b4b2:	333b      	adds	r3, #59	; 0x3b
 800b4b4:	781b      	ldrb	r3, [r3, #0]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d009      	beq.n	800b4ce <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800b4ba:	78fb      	ldrb	r3, [r7, #3]
 800b4bc:	68ba      	ldr	r2, [r7, #8]
 800b4be:	212c      	movs	r1, #44	; 0x2c
 800b4c0:	fb01 f303 	mul.w	r3, r1, r3
 800b4c4:	4413      	add	r3, r2
 800b4c6:	3354      	adds	r3, #84	; 0x54
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	73fb      	strb	r3, [r7, #15]
 800b4cc:	e008      	b.n	800b4e0 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800b4ce:	78fb      	ldrb	r3, [r7, #3]
 800b4d0:	68ba      	ldr	r2, [r7, #8]
 800b4d2:	212c      	movs	r1, #44	; 0x2c
 800b4d4:	fb01 f303 	mul.w	r3, r1, r3
 800b4d8:	4413      	add	r3, r2
 800b4da:	3355      	adds	r3, #85	; 0x55
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800b4e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3714      	adds	r7, #20
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ec:	4770      	bx	lr

0800b4ee <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b4ee:	b580      	push	{r7, lr}
 800b4f0:	b082      	sub	sp, #8
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f7f6 f944 	bl	8001784 <HAL_Delay>
}
 800b4fc:	bf00      	nop
 800b4fe:	3708      	adds	r7, #8
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b504:	b480      	push	{r7}
 800b506:	b085      	sub	sp, #20
 800b508:	af00      	add	r7, sp, #0
 800b50a:	4603      	mov	r3, r0
 800b50c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b50e:	2300      	movs	r3, #0
 800b510:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b512:	79fb      	ldrb	r3, [r7, #7]
 800b514:	2b03      	cmp	r3, #3
 800b516:	d817      	bhi.n	800b548 <USBH_Get_USB_Status+0x44>
 800b518:	a201      	add	r2, pc, #4	; (adr r2, 800b520 <USBH_Get_USB_Status+0x1c>)
 800b51a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b51e:	bf00      	nop
 800b520:	0800b531 	.word	0x0800b531
 800b524:	0800b537 	.word	0x0800b537
 800b528:	0800b53d 	.word	0x0800b53d
 800b52c:	0800b543 	.word	0x0800b543
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b530:	2300      	movs	r3, #0
 800b532:	73fb      	strb	r3, [r7, #15]
    break;
 800b534:	e00b      	b.n	800b54e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b536:	2302      	movs	r3, #2
 800b538:	73fb      	strb	r3, [r7, #15]
    break;
 800b53a:	e008      	b.n	800b54e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b53c:	2301      	movs	r3, #1
 800b53e:	73fb      	strb	r3, [r7, #15]
    break;
 800b540:	e005      	b.n	800b54e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b542:	2302      	movs	r3, #2
 800b544:	73fb      	strb	r3, [r7, #15]
    break;
 800b546:	e002      	b.n	800b54e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b548:	2302      	movs	r3, #2
 800b54a:	73fb      	strb	r3, [r7, #15]
    break;
 800b54c:	bf00      	nop
  }
  return usb_status;
 800b54e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b550:	4618      	mov	r0, r3
 800b552:	3714      	adds	r7, #20
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr

0800b55c <__errno>:
 800b55c:	4b01      	ldr	r3, [pc, #4]	; (800b564 <__errno+0x8>)
 800b55e:	6818      	ldr	r0, [r3, #0]
 800b560:	4770      	bx	lr
 800b562:	bf00      	nop
 800b564:	2000002c 	.word	0x2000002c

0800b568 <__libc_init_array>:
 800b568:	b570      	push	{r4, r5, r6, lr}
 800b56a:	4d0d      	ldr	r5, [pc, #52]	; (800b5a0 <__libc_init_array+0x38>)
 800b56c:	4c0d      	ldr	r4, [pc, #52]	; (800b5a4 <__libc_init_array+0x3c>)
 800b56e:	1b64      	subs	r4, r4, r5
 800b570:	10a4      	asrs	r4, r4, #2
 800b572:	2600      	movs	r6, #0
 800b574:	42a6      	cmp	r6, r4
 800b576:	d109      	bne.n	800b58c <__libc_init_array+0x24>
 800b578:	4d0b      	ldr	r5, [pc, #44]	; (800b5a8 <__libc_init_array+0x40>)
 800b57a:	4c0c      	ldr	r4, [pc, #48]	; (800b5ac <__libc_init_array+0x44>)
 800b57c:	f000 fc5e 	bl	800be3c <_init>
 800b580:	1b64      	subs	r4, r4, r5
 800b582:	10a4      	asrs	r4, r4, #2
 800b584:	2600      	movs	r6, #0
 800b586:	42a6      	cmp	r6, r4
 800b588:	d105      	bne.n	800b596 <__libc_init_array+0x2e>
 800b58a:	bd70      	pop	{r4, r5, r6, pc}
 800b58c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b590:	4798      	blx	r3
 800b592:	3601      	adds	r6, #1
 800b594:	e7ee      	b.n	800b574 <__libc_init_array+0xc>
 800b596:	f855 3b04 	ldr.w	r3, [r5], #4
 800b59a:	4798      	blx	r3
 800b59c:	3601      	adds	r6, #1
 800b59e:	e7f2      	b.n	800b586 <__libc_init_array+0x1e>
 800b5a0:	0800c578 	.word	0x0800c578
 800b5a4:	0800c578 	.word	0x0800c578
 800b5a8:	0800c578 	.word	0x0800c578
 800b5ac:	0800c57c 	.word	0x0800c57c

0800b5b0 <malloc>:
 800b5b0:	4b02      	ldr	r3, [pc, #8]	; (800b5bc <malloc+0xc>)
 800b5b2:	4601      	mov	r1, r0
 800b5b4:	6818      	ldr	r0, [r3, #0]
 800b5b6:	f000 b871 	b.w	800b69c <_malloc_r>
 800b5ba:	bf00      	nop
 800b5bc:	2000002c 	.word	0x2000002c

0800b5c0 <free>:
 800b5c0:	4b02      	ldr	r3, [pc, #8]	; (800b5cc <free+0xc>)
 800b5c2:	4601      	mov	r1, r0
 800b5c4:	6818      	ldr	r0, [r3, #0]
 800b5c6:	f000 b819 	b.w	800b5fc <_free_r>
 800b5ca:	bf00      	nop
 800b5cc:	2000002c 	.word	0x2000002c

0800b5d0 <memcpy>:
 800b5d0:	440a      	add	r2, r1
 800b5d2:	4291      	cmp	r1, r2
 800b5d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b5d8:	d100      	bne.n	800b5dc <memcpy+0xc>
 800b5da:	4770      	bx	lr
 800b5dc:	b510      	push	{r4, lr}
 800b5de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5e6:	4291      	cmp	r1, r2
 800b5e8:	d1f9      	bne.n	800b5de <memcpy+0xe>
 800b5ea:	bd10      	pop	{r4, pc}

0800b5ec <memset>:
 800b5ec:	4402      	add	r2, r0
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d100      	bne.n	800b5f6 <memset+0xa>
 800b5f4:	4770      	bx	lr
 800b5f6:	f803 1b01 	strb.w	r1, [r3], #1
 800b5fa:	e7f9      	b.n	800b5f0 <memset+0x4>

0800b5fc <_free_r>:
 800b5fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5fe:	2900      	cmp	r1, #0
 800b600:	d048      	beq.n	800b694 <_free_r+0x98>
 800b602:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b606:	9001      	str	r0, [sp, #4]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	f1a1 0404 	sub.w	r4, r1, #4
 800b60e:	bfb8      	it	lt
 800b610:	18e4      	addlt	r4, r4, r3
 800b612:	f000 f8cd 	bl	800b7b0 <__malloc_lock>
 800b616:	4a20      	ldr	r2, [pc, #128]	; (800b698 <_free_r+0x9c>)
 800b618:	9801      	ldr	r0, [sp, #4]
 800b61a:	6813      	ldr	r3, [r2, #0]
 800b61c:	4615      	mov	r5, r2
 800b61e:	b933      	cbnz	r3, 800b62e <_free_r+0x32>
 800b620:	6063      	str	r3, [r4, #4]
 800b622:	6014      	str	r4, [r2, #0]
 800b624:	b003      	add	sp, #12
 800b626:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b62a:	f000 b8c7 	b.w	800b7bc <__malloc_unlock>
 800b62e:	42a3      	cmp	r3, r4
 800b630:	d90b      	bls.n	800b64a <_free_r+0x4e>
 800b632:	6821      	ldr	r1, [r4, #0]
 800b634:	1862      	adds	r2, r4, r1
 800b636:	4293      	cmp	r3, r2
 800b638:	bf04      	itt	eq
 800b63a:	681a      	ldreq	r2, [r3, #0]
 800b63c:	685b      	ldreq	r3, [r3, #4]
 800b63e:	6063      	str	r3, [r4, #4]
 800b640:	bf04      	itt	eq
 800b642:	1852      	addeq	r2, r2, r1
 800b644:	6022      	streq	r2, [r4, #0]
 800b646:	602c      	str	r4, [r5, #0]
 800b648:	e7ec      	b.n	800b624 <_free_r+0x28>
 800b64a:	461a      	mov	r2, r3
 800b64c:	685b      	ldr	r3, [r3, #4]
 800b64e:	b10b      	cbz	r3, 800b654 <_free_r+0x58>
 800b650:	42a3      	cmp	r3, r4
 800b652:	d9fa      	bls.n	800b64a <_free_r+0x4e>
 800b654:	6811      	ldr	r1, [r2, #0]
 800b656:	1855      	adds	r5, r2, r1
 800b658:	42a5      	cmp	r5, r4
 800b65a:	d10b      	bne.n	800b674 <_free_r+0x78>
 800b65c:	6824      	ldr	r4, [r4, #0]
 800b65e:	4421      	add	r1, r4
 800b660:	1854      	adds	r4, r2, r1
 800b662:	42a3      	cmp	r3, r4
 800b664:	6011      	str	r1, [r2, #0]
 800b666:	d1dd      	bne.n	800b624 <_free_r+0x28>
 800b668:	681c      	ldr	r4, [r3, #0]
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	6053      	str	r3, [r2, #4]
 800b66e:	4421      	add	r1, r4
 800b670:	6011      	str	r1, [r2, #0]
 800b672:	e7d7      	b.n	800b624 <_free_r+0x28>
 800b674:	d902      	bls.n	800b67c <_free_r+0x80>
 800b676:	230c      	movs	r3, #12
 800b678:	6003      	str	r3, [r0, #0]
 800b67a:	e7d3      	b.n	800b624 <_free_r+0x28>
 800b67c:	6825      	ldr	r5, [r4, #0]
 800b67e:	1961      	adds	r1, r4, r5
 800b680:	428b      	cmp	r3, r1
 800b682:	bf04      	itt	eq
 800b684:	6819      	ldreq	r1, [r3, #0]
 800b686:	685b      	ldreq	r3, [r3, #4]
 800b688:	6063      	str	r3, [r4, #4]
 800b68a:	bf04      	itt	eq
 800b68c:	1949      	addeq	r1, r1, r5
 800b68e:	6021      	streq	r1, [r4, #0]
 800b690:	6054      	str	r4, [r2, #4]
 800b692:	e7c7      	b.n	800b624 <_free_r+0x28>
 800b694:	b003      	add	sp, #12
 800b696:	bd30      	pop	{r4, r5, pc}
 800b698:	200000e8 	.word	0x200000e8

0800b69c <_malloc_r>:
 800b69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b69e:	1ccd      	adds	r5, r1, #3
 800b6a0:	f025 0503 	bic.w	r5, r5, #3
 800b6a4:	3508      	adds	r5, #8
 800b6a6:	2d0c      	cmp	r5, #12
 800b6a8:	bf38      	it	cc
 800b6aa:	250c      	movcc	r5, #12
 800b6ac:	2d00      	cmp	r5, #0
 800b6ae:	4606      	mov	r6, r0
 800b6b0:	db01      	blt.n	800b6b6 <_malloc_r+0x1a>
 800b6b2:	42a9      	cmp	r1, r5
 800b6b4:	d903      	bls.n	800b6be <_malloc_r+0x22>
 800b6b6:	230c      	movs	r3, #12
 800b6b8:	6033      	str	r3, [r6, #0]
 800b6ba:	2000      	movs	r0, #0
 800b6bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6be:	f000 f877 	bl	800b7b0 <__malloc_lock>
 800b6c2:	4921      	ldr	r1, [pc, #132]	; (800b748 <_malloc_r+0xac>)
 800b6c4:	680a      	ldr	r2, [r1, #0]
 800b6c6:	4614      	mov	r4, r2
 800b6c8:	b99c      	cbnz	r4, 800b6f2 <_malloc_r+0x56>
 800b6ca:	4f20      	ldr	r7, [pc, #128]	; (800b74c <_malloc_r+0xb0>)
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	b923      	cbnz	r3, 800b6da <_malloc_r+0x3e>
 800b6d0:	4621      	mov	r1, r4
 800b6d2:	4630      	mov	r0, r6
 800b6d4:	f000 f83c 	bl	800b750 <_sbrk_r>
 800b6d8:	6038      	str	r0, [r7, #0]
 800b6da:	4629      	mov	r1, r5
 800b6dc:	4630      	mov	r0, r6
 800b6de:	f000 f837 	bl	800b750 <_sbrk_r>
 800b6e2:	1c43      	adds	r3, r0, #1
 800b6e4:	d123      	bne.n	800b72e <_malloc_r+0x92>
 800b6e6:	230c      	movs	r3, #12
 800b6e8:	6033      	str	r3, [r6, #0]
 800b6ea:	4630      	mov	r0, r6
 800b6ec:	f000 f866 	bl	800b7bc <__malloc_unlock>
 800b6f0:	e7e3      	b.n	800b6ba <_malloc_r+0x1e>
 800b6f2:	6823      	ldr	r3, [r4, #0]
 800b6f4:	1b5b      	subs	r3, r3, r5
 800b6f6:	d417      	bmi.n	800b728 <_malloc_r+0x8c>
 800b6f8:	2b0b      	cmp	r3, #11
 800b6fa:	d903      	bls.n	800b704 <_malloc_r+0x68>
 800b6fc:	6023      	str	r3, [r4, #0]
 800b6fe:	441c      	add	r4, r3
 800b700:	6025      	str	r5, [r4, #0]
 800b702:	e004      	b.n	800b70e <_malloc_r+0x72>
 800b704:	6863      	ldr	r3, [r4, #4]
 800b706:	42a2      	cmp	r2, r4
 800b708:	bf0c      	ite	eq
 800b70a:	600b      	streq	r3, [r1, #0]
 800b70c:	6053      	strne	r3, [r2, #4]
 800b70e:	4630      	mov	r0, r6
 800b710:	f000 f854 	bl	800b7bc <__malloc_unlock>
 800b714:	f104 000b 	add.w	r0, r4, #11
 800b718:	1d23      	adds	r3, r4, #4
 800b71a:	f020 0007 	bic.w	r0, r0, #7
 800b71e:	1ac2      	subs	r2, r0, r3
 800b720:	d0cc      	beq.n	800b6bc <_malloc_r+0x20>
 800b722:	1a1b      	subs	r3, r3, r0
 800b724:	50a3      	str	r3, [r4, r2]
 800b726:	e7c9      	b.n	800b6bc <_malloc_r+0x20>
 800b728:	4622      	mov	r2, r4
 800b72a:	6864      	ldr	r4, [r4, #4]
 800b72c:	e7cc      	b.n	800b6c8 <_malloc_r+0x2c>
 800b72e:	1cc4      	adds	r4, r0, #3
 800b730:	f024 0403 	bic.w	r4, r4, #3
 800b734:	42a0      	cmp	r0, r4
 800b736:	d0e3      	beq.n	800b700 <_malloc_r+0x64>
 800b738:	1a21      	subs	r1, r4, r0
 800b73a:	4630      	mov	r0, r6
 800b73c:	f000 f808 	bl	800b750 <_sbrk_r>
 800b740:	3001      	adds	r0, #1
 800b742:	d1dd      	bne.n	800b700 <_malloc_r+0x64>
 800b744:	e7cf      	b.n	800b6e6 <_malloc_r+0x4a>
 800b746:	bf00      	nop
 800b748:	200000e8 	.word	0x200000e8
 800b74c:	200000ec 	.word	0x200000ec

0800b750 <_sbrk_r>:
 800b750:	b538      	push	{r3, r4, r5, lr}
 800b752:	4d06      	ldr	r5, [pc, #24]	; (800b76c <_sbrk_r+0x1c>)
 800b754:	2300      	movs	r3, #0
 800b756:	4604      	mov	r4, r0
 800b758:	4608      	mov	r0, r1
 800b75a:	602b      	str	r3, [r5, #0]
 800b75c:	f7f5 ff2e 	bl	80015bc <_sbrk>
 800b760:	1c43      	adds	r3, r0, #1
 800b762:	d102      	bne.n	800b76a <_sbrk_r+0x1a>
 800b764:	682b      	ldr	r3, [r5, #0]
 800b766:	b103      	cbz	r3, 800b76a <_sbrk_r+0x1a>
 800b768:	6023      	str	r3, [r4, #0]
 800b76a:	bd38      	pop	{r3, r4, r5, pc}
 800b76c:	20000cb0 	.word	0x20000cb0

0800b770 <siprintf>:
 800b770:	b40e      	push	{r1, r2, r3}
 800b772:	b500      	push	{lr}
 800b774:	b09c      	sub	sp, #112	; 0x70
 800b776:	ab1d      	add	r3, sp, #116	; 0x74
 800b778:	9002      	str	r0, [sp, #8]
 800b77a:	9006      	str	r0, [sp, #24]
 800b77c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b780:	4809      	ldr	r0, [pc, #36]	; (800b7a8 <siprintf+0x38>)
 800b782:	9107      	str	r1, [sp, #28]
 800b784:	9104      	str	r1, [sp, #16]
 800b786:	4909      	ldr	r1, [pc, #36]	; (800b7ac <siprintf+0x3c>)
 800b788:	f853 2b04 	ldr.w	r2, [r3], #4
 800b78c:	9105      	str	r1, [sp, #20]
 800b78e:	6800      	ldr	r0, [r0, #0]
 800b790:	9301      	str	r3, [sp, #4]
 800b792:	a902      	add	r1, sp, #8
 800b794:	f000 f874 	bl	800b880 <_svfiprintf_r>
 800b798:	9b02      	ldr	r3, [sp, #8]
 800b79a:	2200      	movs	r2, #0
 800b79c:	701a      	strb	r2, [r3, #0]
 800b79e:	b01c      	add	sp, #112	; 0x70
 800b7a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7a4:	b003      	add	sp, #12
 800b7a6:	4770      	bx	lr
 800b7a8:	2000002c 	.word	0x2000002c
 800b7ac:	ffff0208 	.word	0xffff0208

0800b7b0 <__malloc_lock>:
 800b7b0:	4801      	ldr	r0, [pc, #4]	; (800b7b8 <__malloc_lock+0x8>)
 800b7b2:	f000 baf9 	b.w	800bda8 <__retarget_lock_acquire_recursive>
 800b7b6:	bf00      	nop
 800b7b8:	20000cb8 	.word	0x20000cb8

0800b7bc <__malloc_unlock>:
 800b7bc:	4801      	ldr	r0, [pc, #4]	; (800b7c4 <__malloc_unlock+0x8>)
 800b7be:	f000 baf4 	b.w	800bdaa <__retarget_lock_release_recursive>
 800b7c2:	bf00      	nop
 800b7c4:	20000cb8 	.word	0x20000cb8

0800b7c8 <__ssputs_r>:
 800b7c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7cc:	688e      	ldr	r6, [r1, #8]
 800b7ce:	429e      	cmp	r6, r3
 800b7d0:	4682      	mov	sl, r0
 800b7d2:	460c      	mov	r4, r1
 800b7d4:	4690      	mov	r8, r2
 800b7d6:	461f      	mov	r7, r3
 800b7d8:	d838      	bhi.n	800b84c <__ssputs_r+0x84>
 800b7da:	898a      	ldrh	r2, [r1, #12]
 800b7dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b7e0:	d032      	beq.n	800b848 <__ssputs_r+0x80>
 800b7e2:	6825      	ldr	r5, [r4, #0]
 800b7e4:	6909      	ldr	r1, [r1, #16]
 800b7e6:	eba5 0901 	sub.w	r9, r5, r1
 800b7ea:	6965      	ldr	r5, [r4, #20]
 800b7ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b7f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	444b      	add	r3, r9
 800b7f8:	106d      	asrs	r5, r5, #1
 800b7fa:	429d      	cmp	r5, r3
 800b7fc:	bf38      	it	cc
 800b7fe:	461d      	movcc	r5, r3
 800b800:	0553      	lsls	r3, r2, #21
 800b802:	d531      	bpl.n	800b868 <__ssputs_r+0xa0>
 800b804:	4629      	mov	r1, r5
 800b806:	f7ff ff49 	bl	800b69c <_malloc_r>
 800b80a:	4606      	mov	r6, r0
 800b80c:	b950      	cbnz	r0, 800b824 <__ssputs_r+0x5c>
 800b80e:	230c      	movs	r3, #12
 800b810:	f8ca 3000 	str.w	r3, [sl]
 800b814:	89a3      	ldrh	r3, [r4, #12]
 800b816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b81a:	81a3      	strh	r3, [r4, #12]
 800b81c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b824:	6921      	ldr	r1, [r4, #16]
 800b826:	464a      	mov	r2, r9
 800b828:	f7ff fed2 	bl	800b5d0 <memcpy>
 800b82c:	89a3      	ldrh	r3, [r4, #12]
 800b82e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b836:	81a3      	strh	r3, [r4, #12]
 800b838:	6126      	str	r6, [r4, #16]
 800b83a:	6165      	str	r5, [r4, #20]
 800b83c:	444e      	add	r6, r9
 800b83e:	eba5 0509 	sub.w	r5, r5, r9
 800b842:	6026      	str	r6, [r4, #0]
 800b844:	60a5      	str	r5, [r4, #8]
 800b846:	463e      	mov	r6, r7
 800b848:	42be      	cmp	r6, r7
 800b84a:	d900      	bls.n	800b84e <__ssputs_r+0x86>
 800b84c:	463e      	mov	r6, r7
 800b84e:	4632      	mov	r2, r6
 800b850:	6820      	ldr	r0, [r4, #0]
 800b852:	4641      	mov	r1, r8
 800b854:	f000 faaa 	bl	800bdac <memmove>
 800b858:	68a3      	ldr	r3, [r4, #8]
 800b85a:	6822      	ldr	r2, [r4, #0]
 800b85c:	1b9b      	subs	r3, r3, r6
 800b85e:	4432      	add	r2, r6
 800b860:	60a3      	str	r3, [r4, #8]
 800b862:	6022      	str	r2, [r4, #0]
 800b864:	2000      	movs	r0, #0
 800b866:	e7db      	b.n	800b820 <__ssputs_r+0x58>
 800b868:	462a      	mov	r2, r5
 800b86a:	f000 fab9 	bl	800bde0 <_realloc_r>
 800b86e:	4606      	mov	r6, r0
 800b870:	2800      	cmp	r0, #0
 800b872:	d1e1      	bne.n	800b838 <__ssputs_r+0x70>
 800b874:	6921      	ldr	r1, [r4, #16]
 800b876:	4650      	mov	r0, sl
 800b878:	f7ff fec0 	bl	800b5fc <_free_r>
 800b87c:	e7c7      	b.n	800b80e <__ssputs_r+0x46>
	...

0800b880 <_svfiprintf_r>:
 800b880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b884:	4698      	mov	r8, r3
 800b886:	898b      	ldrh	r3, [r1, #12]
 800b888:	061b      	lsls	r3, r3, #24
 800b88a:	b09d      	sub	sp, #116	; 0x74
 800b88c:	4607      	mov	r7, r0
 800b88e:	460d      	mov	r5, r1
 800b890:	4614      	mov	r4, r2
 800b892:	d50e      	bpl.n	800b8b2 <_svfiprintf_r+0x32>
 800b894:	690b      	ldr	r3, [r1, #16]
 800b896:	b963      	cbnz	r3, 800b8b2 <_svfiprintf_r+0x32>
 800b898:	2140      	movs	r1, #64	; 0x40
 800b89a:	f7ff feff 	bl	800b69c <_malloc_r>
 800b89e:	6028      	str	r0, [r5, #0]
 800b8a0:	6128      	str	r0, [r5, #16]
 800b8a2:	b920      	cbnz	r0, 800b8ae <_svfiprintf_r+0x2e>
 800b8a4:	230c      	movs	r3, #12
 800b8a6:	603b      	str	r3, [r7, #0]
 800b8a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8ac:	e0d1      	b.n	800ba52 <_svfiprintf_r+0x1d2>
 800b8ae:	2340      	movs	r3, #64	; 0x40
 800b8b0:	616b      	str	r3, [r5, #20]
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	9309      	str	r3, [sp, #36]	; 0x24
 800b8b6:	2320      	movs	r3, #32
 800b8b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8c0:	2330      	movs	r3, #48	; 0x30
 800b8c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ba6c <_svfiprintf_r+0x1ec>
 800b8c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8ca:	f04f 0901 	mov.w	r9, #1
 800b8ce:	4623      	mov	r3, r4
 800b8d0:	469a      	mov	sl, r3
 800b8d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8d6:	b10a      	cbz	r2, 800b8dc <_svfiprintf_r+0x5c>
 800b8d8:	2a25      	cmp	r2, #37	; 0x25
 800b8da:	d1f9      	bne.n	800b8d0 <_svfiprintf_r+0x50>
 800b8dc:	ebba 0b04 	subs.w	fp, sl, r4
 800b8e0:	d00b      	beq.n	800b8fa <_svfiprintf_r+0x7a>
 800b8e2:	465b      	mov	r3, fp
 800b8e4:	4622      	mov	r2, r4
 800b8e6:	4629      	mov	r1, r5
 800b8e8:	4638      	mov	r0, r7
 800b8ea:	f7ff ff6d 	bl	800b7c8 <__ssputs_r>
 800b8ee:	3001      	adds	r0, #1
 800b8f0:	f000 80aa 	beq.w	800ba48 <_svfiprintf_r+0x1c8>
 800b8f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8f6:	445a      	add	r2, fp
 800b8f8:	9209      	str	r2, [sp, #36]	; 0x24
 800b8fa:	f89a 3000 	ldrb.w	r3, [sl]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	f000 80a2 	beq.w	800ba48 <_svfiprintf_r+0x1c8>
 800b904:	2300      	movs	r3, #0
 800b906:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b90a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b90e:	f10a 0a01 	add.w	sl, sl, #1
 800b912:	9304      	str	r3, [sp, #16]
 800b914:	9307      	str	r3, [sp, #28]
 800b916:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b91a:	931a      	str	r3, [sp, #104]	; 0x68
 800b91c:	4654      	mov	r4, sl
 800b91e:	2205      	movs	r2, #5
 800b920:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b924:	4851      	ldr	r0, [pc, #324]	; (800ba6c <_svfiprintf_r+0x1ec>)
 800b926:	f7f4 fc63 	bl	80001f0 <memchr>
 800b92a:	9a04      	ldr	r2, [sp, #16]
 800b92c:	b9d8      	cbnz	r0, 800b966 <_svfiprintf_r+0xe6>
 800b92e:	06d0      	lsls	r0, r2, #27
 800b930:	bf44      	itt	mi
 800b932:	2320      	movmi	r3, #32
 800b934:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b938:	0711      	lsls	r1, r2, #28
 800b93a:	bf44      	itt	mi
 800b93c:	232b      	movmi	r3, #43	; 0x2b
 800b93e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b942:	f89a 3000 	ldrb.w	r3, [sl]
 800b946:	2b2a      	cmp	r3, #42	; 0x2a
 800b948:	d015      	beq.n	800b976 <_svfiprintf_r+0xf6>
 800b94a:	9a07      	ldr	r2, [sp, #28]
 800b94c:	4654      	mov	r4, sl
 800b94e:	2000      	movs	r0, #0
 800b950:	f04f 0c0a 	mov.w	ip, #10
 800b954:	4621      	mov	r1, r4
 800b956:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b95a:	3b30      	subs	r3, #48	; 0x30
 800b95c:	2b09      	cmp	r3, #9
 800b95e:	d94e      	bls.n	800b9fe <_svfiprintf_r+0x17e>
 800b960:	b1b0      	cbz	r0, 800b990 <_svfiprintf_r+0x110>
 800b962:	9207      	str	r2, [sp, #28]
 800b964:	e014      	b.n	800b990 <_svfiprintf_r+0x110>
 800b966:	eba0 0308 	sub.w	r3, r0, r8
 800b96a:	fa09 f303 	lsl.w	r3, r9, r3
 800b96e:	4313      	orrs	r3, r2
 800b970:	9304      	str	r3, [sp, #16]
 800b972:	46a2      	mov	sl, r4
 800b974:	e7d2      	b.n	800b91c <_svfiprintf_r+0x9c>
 800b976:	9b03      	ldr	r3, [sp, #12]
 800b978:	1d19      	adds	r1, r3, #4
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	9103      	str	r1, [sp, #12]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	bfbb      	ittet	lt
 800b982:	425b      	neglt	r3, r3
 800b984:	f042 0202 	orrlt.w	r2, r2, #2
 800b988:	9307      	strge	r3, [sp, #28]
 800b98a:	9307      	strlt	r3, [sp, #28]
 800b98c:	bfb8      	it	lt
 800b98e:	9204      	strlt	r2, [sp, #16]
 800b990:	7823      	ldrb	r3, [r4, #0]
 800b992:	2b2e      	cmp	r3, #46	; 0x2e
 800b994:	d10c      	bne.n	800b9b0 <_svfiprintf_r+0x130>
 800b996:	7863      	ldrb	r3, [r4, #1]
 800b998:	2b2a      	cmp	r3, #42	; 0x2a
 800b99a:	d135      	bne.n	800ba08 <_svfiprintf_r+0x188>
 800b99c:	9b03      	ldr	r3, [sp, #12]
 800b99e:	1d1a      	adds	r2, r3, #4
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	9203      	str	r2, [sp, #12]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	bfb8      	it	lt
 800b9a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b9ac:	3402      	adds	r4, #2
 800b9ae:	9305      	str	r3, [sp, #20]
 800b9b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ba7c <_svfiprintf_r+0x1fc>
 800b9b4:	7821      	ldrb	r1, [r4, #0]
 800b9b6:	2203      	movs	r2, #3
 800b9b8:	4650      	mov	r0, sl
 800b9ba:	f7f4 fc19 	bl	80001f0 <memchr>
 800b9be:	b140      	cbz	r0, 800b9d2 <_svfiprintf_r+0x152>
 800b9c0:	2340      	movs	r3, #64	; 0x40
 800b9c2:	eba0 000a 	sub.w	r0, r0, sl
 800b9c6:	fa03 f000 	lsl.w	r0, r3, r0
 800b9ca:	9b04      	ldr	r3, [sp, #16]
 800b9cc:	4303      	orrs	r3, r0
 800b9ce:	3401      	adds	r4, #1
 800b9d0:	9304      	str	r3, [sp, #16]
 800b9d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9d6:	4826      	ldr	r0, [pc, #152]	; (800ba70 <_svfiprintf_r+0x1f0>)
 800b9d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9dc:	2206      	movs	r2, #6
 800b9de:	f7f4 fc07 	bl	80001f0 <memchr>
 800b9e2:	2800      	cmp	r0, #0
 800b9e4:	d038      	beq.n	800ba58 <_svfiprintf_r+0x1d8>
 800b9e6:	4b23      	ldr	r3, [pc, #140]	; (800ba74 <_svfiprintf_r+0x1f4>)
 800b9e8:	bb1b      	cbnz	r3, 800ba32 <_svfiprintf_r+0x1b2>
 800b9ea:	9b03      	ldr	r3, [sp, #12]
 800b9ec:	3307      	adds	r3, #7
 800b9ee:	f023 0307 	bic.w	r3, r3, #7
 800b9f2:	3308      	adds	r3, #8
 800b9f4:	9303      	str	r3, [sp, #12]
 800b9f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9f8:	4433      	add	r3, r6
 800b9fa:	9309      	str	r3, [sp, #36]	; 0x24
 800b9fc:	e767      	b.n	800b8ce <_svfiprintf_r+0x4e>
 800b9fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba02:	460c      	mov	r4, r1
 800ba04:	2001      	movs	r0, #1
 800ba06:	e7a5      	b.n	800b954 <_svfiprintf_r+0xd4>
 800ba08:	2300      	movs	r3, #0
 800ba0a:	3401      	adds	r4, #1
 800ba0c:	9305      	str	r3, [sp, #20]
 800ba0e:	4619      	mov	r1, r3
 800ba10:	f04f 0c0a 	mov.w	ip, #10
 800ba14:	4620      	mov	r0, r4
 800ba16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba1a:	3a30      	subs	r2, #48	; 0x30
 800ba1c:	2a09      	cmp	r2, #9
 800ba1e:	d903      	bls.n	800ba28 <_svfiprintf_r+0x1a8>
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d0c5      	beq.n	800b9b0 <_svfiprintf_r+0x130>
 800ba24:	9105      	str	r1, [sp, #20]
 800ba26:	e7c3      	b.n	800b9b0 <_svfiprintf_r+0x130>
 800ba28:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba2c:	4604      	mov	r4, r0
 800ba2e:	2301      	movs	r3, #1
 800ba30:	e7f0      	b.n	800ba14 <_svfiprintf_r+0x194>
 800ba32:	ab03      	add	r3, sp, #12
 800ba34:	9300      	str	r3, [sp, #0]
 800ba36:	462a      	mov	r2, r5
 800ba38:	4b0f      	ldr	r3, [pc, #60]	; (800ba78 <_svfiprintf_r+0x1f8>)
 800ba3a:	a904      	add	r1, sp, #16
 800ba3c:	4638      	mov	r0, r7
 800ba3e:	f3af 8000 	nop.w
 800ba42:	1c42      	adds	r2, r0, #1
 800ba44:	4606      	mov	r6, r0
 800ba46:	d1d6      	bne.n	800b9f6 <_svfiprintf_r+0x176>
 800ba48:	89ab      	ldrh	r3, [r5, #12]
 800ba4a:	065b      	lsls	r3, r3, #25
 800ba4c:	f53f af2c 	bmi.w	800b8a8 <_svfiprintf_r+0x28>
 800ba50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba52:	b01d      	add	sp, #116	; 0x74
 800ba54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba58:	ab03      	add	r3, sp, #12
 800ba5a:	9300      	str	r3, [sp, #0]
 800ba5c:	462a      	mov	r2, r5
 800ba5e:	4b06      	ldr	r3, [pc, #24]	; (800ba78 <_svfiprintf_r+0x1f8>)
 800ba60:	a904      	add	r1, sp, #16
 800ba62:	4638      	mov	r0, r7
 800ba64:	f000 f87a 	bl	800bb5c <_printf_i>
 800ba68:	e7eb      	b.n	800ba42 <_svfiprintf_r+0x1c2>
 800ba6a:	bf00      	nop
 800ba6c:	0800c53c 	.word	0x0800c53c
 800ba70:	0800c546 	.word	0x0800c546
 800ba74:	00000000 	.word	0x00000000
 800ba78:	0800b7c9 	.word	0x0800b7c9
 800ba7c:	0800c542 	.word	0x0800c542

0800ba80 <_printf_common>:
 800ba80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba84:	4616      	mov	r6, r2
 800ba86:	4699      	mov	r9, r3
 800ba88:	688a      	ldr	r2, [r1, #8]
 800ba8a:	690b      	ldr	r3, [r1, #16]
 800ba8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba90:	4293      	cmp	r3, r2
 800ba92:	bfb8      	it	lt
 800ba94:	4613      	movlt	r3, r2
 800ba96:	6033      	str	r3, [r6, #0]
 800ba98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba9c:	4607      	mov	r7, r0
 800ba9e:	460c      	mov	r4, r1
 800baa0:	b10a      	cbz	r2, 800baa6 <_printf_common+0x26>
 800baa2:	3301      	adds	r3, #1
 800baa4:	6033      	str	r3, [r6, #0]
 800baa6:	6823      	ldr	r3, [r4, #0]
 800baa8:	0699      	lsls	r1, r3, #26
 800baaa:	bf42      	ittt	mi
 800baac:	6833      	ldrmi	r3, [r6, #0]
 800baae:	3302      	addmi	r3, #2
 800bab0:	6033      	strmi	r3, [r6, #0]
 800bab2:	6825      	ldr	r5, [r4, #0]
 800bab4:	f015 0506 	ands.w	r5, r5, #6
 800bab8:	d106      	bne.n	800bac8 <_printf_common+0x48>
 800baba:	f104 0a19 	add.w	sl, r4, #25
 800babe:	68e3      	ldr	r3, [r4, #12]
 800bac0:	6832      	ldr	r2, [r6, #0]
 800bac2:	1a9b      	subs	r3, r3, r2
 800bac4:	42ab      	cmp	r3, r5
 800bac6:	dc26      	bgt.n	800bb16 <_printf_common+0x96>
 800bac8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bacc:	1e13      	subs	r3, r2, #0
 800bace:	6822      	ldr	r2, [r4, #0]
 800bad0:	bf18      	it	ne
 800bad2:	2301      	movne	r3, #1
 800bad4:	0692      	lsls	r2, r2, #26
 800bad6:	d42b      	bmi.n	800bb30 <_printf_common+0xb0>
 800bad8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800badc:	4649      	mov	r1, r9
 800bade:	4638      	mov	r0, r7
 800bae0:	47c0      	blx	r8
 800bae2:	3001      	adds	r0, #1
 800bae4:	d01e      	beq.n	800bb24 <_printf_common+0xa4>
 800bae6:	6823      	ldr	r3, [r4, #0]
 800bae8:	68e5      	ldr	r5, [r4, #12]
 800baea:	6832      	ldr	r2, [r6, #0]
 800baec:	f003 0306 	and.w	r3, r3, #6
 800baf0:	2b04      	cmp	r3, #4
 800baf2:	bf08      	it	eq
 800baf4:	1aad      	subeq	r5, r5, r2
 800baf6:	68a3      	ldr	r3, [r4, #8]
 800baf8:	6922      	ldr	r2, [r4, #16]
 800bafa:	bf0c      	ite	eq
 800bafc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb00:	2500      	movne	r5, #0
 800bb02:	4293      	cmp	r3, r2
 800bb04:	bfc4      	itt	gt
 800bb06:	1a9b      	subgt	r3, r3, r2
 800bb08:	18ed      	addgt	r5, r5, r3
 800bb0a:	2600      	movs	r6, #0
 800bb0c:	341a      	adds	r4, #26
 800bb0e:	42b5      	cmp	r5, r6
 800bb10:	d11a      	bne.n	800bb48 <_printf_common+0xc8>
 800bb12:	2000      	movs	r0, #0
 800bb14:	e008      	b.n	800bb28 <_printf_common+0xa8>
 800bb16:	2301      	movs	r3, #1
 800bb18:	4652      	mov	r2, sl
 800bb1a:	4649      	mov	r1, r9
 800bb1c:	4638      	mov	r0, r7
 800bb1e:	47c0      	blx	r8
 800bb20:	3001      	adds	r0, #1
 800bb22:	d103      	bne.n	800bb2c <_printf_common+0xac>
 800bb24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb2c:	3501      	adds	r5, #1
 800bb2e:	e7c6      	b.n	800babe <_printf_common+0x3e>
 800bb30:	18e1      	adds	r1, r4, r3
 800bb32:	1c5a      	adds	r2, r3, #1
 800bb34:	2030      	movs	r0, #48	; 0x30
 800bb36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb3a:	4422      	add	r2, r4
 800bb3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb44:	3302      	adds	r3, #2
 800bb46:	e7c7      	b.n	800bad8 <_printf_common+0x58>
 800bb48:	2301      	movs	r3, #1
 800bb4a:	4622      	mov	r2, r4
 800bb4c:	4649      	mov	r1, r9
 800bb4e:	4638      	mov	r0, r7
 800bb50:	47c0      	blx	r8
 800bb52:	3001      	adds	r0, #1
 800bb54:	d0e6      	beq.n	800bb24 <_printf_common+0xa4>
 800bb56:	3601      	adds	r6, #1
 800bb58:	e7d9      	b.n	800bb0e <_printf_common+0x8e>
	...

0800bb5c <_printf_i>:
 800bb5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb60:	460c      	mov	r4, r1
 800bb62:	4691      	mov	r9, r2
 800bb64:	7e27      	ldrb	r7, [r4, #24]
 800bb66:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bb68:	2f78      	cmp	r7, #120	; 0x78
 800bb6a:	4680      	mov	r8, r0
 800bb6c:	469a      	mov	sl, r3
 800bb6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb72:	d807      	bhi.n	800bb84 <_printf_i+0x28>
 800bb74:	2f62      	cmp	r7, #98	; 0x62
 800bb76:	d80a      	bhi.n	800bb8e <_printf_i+0x32>
 800bb78:	2f00      	cmp	r7, #0
 800bb7a:	f000 80d8 	beq.w	800bd2e <_printf_i+0x1d2>
 800bb7e:	2f58      	cmp	r7, #88	; 0x58
 800bb80:	f000 80a3 	beq.w	800bcca <_printf_i+0x16e>
 800bb84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bb88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb8c:	e03a      	b.n	800bc04 <_printf_i+0xa8>
 800bb8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bb92:	2b15      	cmp	r3, #21
 800bb94:	d8f6      	bhi.n	800bb84 <_printf_i+0x28>
 800bb96:	a001      	add	r0, pc, #4	; (adr r0, 800bb9c <_printf_i+0x40>)
 800bb98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bb9c:	0800bbf5 	.word	0x0800bbf5
 800bba0:	0800bc09 	.word	0x0800bc09
 800bba4:	0800bb85 	.word	0x0800bb85
 800bba8:	0800bb85 	.word	0x0800bb85
 800bbac:	0800bb85 	.word	0x0800bb85
 800bbb0:	0800bb85 	.word	0x0800bb85
 800bbb4:	0800bc09 	.word	0x0800bc09
 800bbb8:	0800bb85 	.word	0x0800bb85
 800bbbc:	0800bb85 	.word	0x0800bb85
 800bbc0:	0800bb85 	.word	0x0800bb85
 800bbc4:	0800bb85 	.word	0x0800bb85
 800bbc8:	0800bd15 	.word	0x0800bd15
 800bbcc:	0800bc39 	.word	0x0800bc39
 800bbd0:	0800bcf7 	.word	0x0800bcf7
 800bbd4:	0800bb85 	.word	0x0800bb85
 800bbd8:	0800bb85 	.word	0x0800bb85
 800bbdc:	0800bd37 	.word	0x0800bd37
 800bbe0:	0800bb85 	.word	0x0800bb85
 800bbe4:	0800bc39 	.word	0x0800bc39
 800bbe8:	0800bb85 	.word	0x0800bb85
 800bbec:	0800bb85 	.word	0x0800bb85
 800bbf0:	0800bcff 	.word	0x0800bcff
 800bbf4:	680b      	ldr	r3, [r1, #0]
 800bbf6:	1d1a      	adds	r2, r3, #4
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	600a      	str	r2, [r1, #0]
 800bbfc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bc00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc04:	2301      	movs	r3, #1
 800bc06:	e0a3      	b.n	800bd50 <_printf_i+0x1f4>
 800bc08:	6825      	ldr	r5, [r4, #0]
 800bc0a:	6808      	ldr	r0, [r1, #0]
 800bc0c:	062e      	lsls	r6, r5, #24
 800bc0e:	f100 0304 	add.w	r3, r0, #4
 800bc12:	d50a      	bpl.n	800bc2a <_printf_i+0xce>
 800bc14:	6805      	ldr	r5, [r0, #0]
 800bc16:	600b      	str	r3, [r1, #0]
 800bc18:	2d00      	cmp	r5, #0
 800bc1a:	da03      	bge.n	800bc24 <_printf_i+0xc8>
 800bc1c:	232d      	movs	r3, #45	; 0x2d
 800bc1e:	426d      	negs	r5, r5
 800bc20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc24:	485e      	ldr	r0, [pc, #376]	; (800bda0 <_printf_i+0x244>)
 800bc26:	230a      	movs	r3, #10
 800bc28:	e019      	b.n	800bc5e <_printf_i+0x102>
 800bc2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bc2e:	6805      	ldr	r5, [r0, #0]
 800bc30:	600b      	str	r3, [r1, #0]
 800bc32:	bf18      	it	ne
 800bc34:	b22d      	sxthne	r5, r5
 800bc36:	e7ef      	b.n	800bc18 <_printf_i+0xbc>
 800bc38:	680b      	ldr	r3, [r1, #0]
 800bc3a:	6825      	ldr	r5, [r4, #0]
 800bc3c:	1d18      	adds	r0, r3, #4
 800bc3e:	6008      	str	r0, [r1, #0]
 800bc40:	0628      	lsls	r0, r5, #24
 800bc42:	d501      	bpl.n	800bc48 <_printf_i+0xec>
 800bc44:	681d      	ldr	r5, [r3, #0]
 800bc46:	e002      	b.n	800bc4e <_printf_i+0xf2>
 800bc48:	0669      	lsls	r1, r5, #25
 800bc4a:	d5fb      	bpl.n	800bc44 <_printf_i+0xe8>
 800bc4c:	881d      	ldrh	r5, [r3, #0]
 800bc4e:	4854      	ldr	r0, [pc, #336]	; (800bda0 <_printf_i+0x244>)
 800bc50:	2f6f      	cmp	r7, #111	; 0x6f
 800bc52:	bf0c      	ite	eq
 800bc54:	2308      	moveq	r3, #8
 800bc56:	230a      	movne	r3, #10
 800bc58:	2100      	movs	r1, #0
 800bc5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc5e:	6866      	ldr	r6, [r4, #4]
 800bc60:	60a6      	str	r6, [r4, #8]
 800bc62:	2e00      	cmp	r6, #0
 800bc64:	bfa2      	ittt	ge
 800bc66:	6821      	ldrge	r1, [r4, #0]
 800bc68:	f021 0104 	bicge.w	r1, r1, #4
 800bc6c:	6021      	strge	r1, [r4, #0]
 800bc6e:	b90d      	cbnz	r5, 800bc74 <_printf_i+0x118>
 800bc70:	2e00      	cmp	r6, #0
 800bc72:	d04d      	beq.n	800bd10 <_printf_i+0x1b4>
 800bc74:	4616      	mov	r6, r2
 800bc76:	fbb5 f1f3 	udiv	r1, r5, r3
 800bc7a:	fb03 5711 	mls	r7, r3, r1, r5
 800bc7e:	5dc7      	ldrb	r7, [r0, r7]
 800bc80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bc84:	462f      	mov	r7, r5
 800bc86:	42bb      	cmp	r3, r7
 800bc88:	460d      	mov	r5, r1
 800bc8a:	d9f4      	bls.n	800bc76 <_printf_i+0x11a>
 800bc8c:	2b08      	cmp	r3, #8
 800bc8e:	d10b      	bne.n	800bca8 <_printf_i+0x14c>
 800bc90:	6823      	ldr	r3, [r4, #0]
 800bc92:	07df      	lsls	r7, r3, #31
 800bc94:	d508      	bpl.n	800bca8 <_printf_i+0x14c>
 800bc96:	6923      	ldr	r3, [r4, #16]
 800bc98:	6861      	ldr	r1, [r4, #4]
 800bc9a:	4299      	cmp	r1, r3
 800bc9c:	bfde      	ittt	le
 800bc9e:	2330      	movle	r3, #48	; 0x30
 800bca0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bca4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800bca8:	1b92      	subs	r2, r2, r6
 800bcaa:	6122      	str	r2, [r4, #16]
 800bcac:	f8cd a000 	str.w	sl, [sp]
 800bcb0:	464b      	mov	r3, r9
 800bcb2:	aa03      	add	r2, sp, #12
 800bcb4:	4621      	mov	r1, r4
 800bcb6:	4640      	mov	r0, r8
 800bcb8:	f7ff fee2 	bl	800ba80 <_printf_common>
 800bcbc:	3001      	adds	r0, #1
 800bcbe:	d14c      	bne.n	800bd5a <_printf_i+0x1fe>
 800bcc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bcc4:	b004      	add	sp, #16
 800bcc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcca:	4835      	ldr	r0, [pc, #212]	; (800bda0 <_printf_i+0x244>)
 800bccc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bcd0:	6823      	ldr	r3, [r4, #0]
 800bcd2:	680e      	ldr	r6, [r1, #0]
 800bcd4:	061f      	lsls	r7, r3, #24
 800bcd6:	f856 5b04 	ldr.w	r5, [r6], #4
 800bcda:	600e      	str	r6, [r1, #0]
 800bcdc:	d514      	bpl.n	800bd08 <_printf_i+0x1ac>
 800bcde:	07d9      	lsls	r1, r3, #31
 800bce0:	bf44      	itt	mi
 800bce2:	f043 0320 	orrmi.w	r3, r3, #32
 800bce6:	6023      	strmi	r3, [r4, #0]
 800bce8:	b91d      	cbnz	r5, 800bcf2 <_printf_i+0x196>
 800bcea:	6823      	ldr	r3, [r4, #0]
 800bcec:	f023 0320 	bic.w	r3, r3, #32
 800bcf0:	6023      	str	r3, [r4, #0]
 800bcf2:	2310      	movs	r3, #16
 800bcf4:	e7b0      	b.n	800bc58 <_printf_i+0xfc>
 800bcf6:	6823      	ldr	r3, [r4, #0]
 800bcf8:	f043 0320 	orr.w	r3, r3, #32
 800bcfc:	6023      	str	r3, [r4, #0]
 800bcfe:	2378      	movs	r3, #120	; 0x78
 800bd00:	4828      	ldr	r0, [pc, #160]	; (800bda4 <_printf_i+0x248>)
 800bd02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bd06:	e7e3      	b.n	800bcd0 <_printf_i+0x174>
 800bd08:	065e      	lsls	r6, r3, #25
 800bd0a:	bf48      	it	mi
 800bd0c:	b2ad      	uxthmi	r5, r5
 800bd0e:	e7e6      	b.n	800bcde <_printf_i+0x182>
 800bd10:	4616      	mov	r6, r2
 800bd12:	e7bb      	b.n	800bc8c <_printf_i+0x130>
 800bd14:	680b      	ldr	r3, [r1, #0]
 800bd16:	6826      	ldr	r6, [r4, #0]
 800bd18:	6960      	ldr	r0, [r4, #20]
 800bd1a:	1d1d      	adds	r5, r3, #4
 800bd1c:	600d      	str	r5, [r1, #0]
 800bd1e:	0635      	lsls	r5, r6, #24
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	d501      	bpl.n	800bd28 <_printf_i+0x1cc>
 800bd24:	6018      	str	r0, [r3, #0]
 800bd26:	e002      	b.n	800bd2e <_printf_i+0x1d2>
 800bd28:	0671      	lsls	r1, r6, #25
 800bd2a:	d5fb      	bpl.n	800bd24 <_printf_i+0x1c8>
 800bd2c:	8018      	strh	r0, [r3, #0]
 800bd2e:	2300      	movs	r3, #0
 800bd30:	6123      	str	r3, [r4, #16]
 800bd32:	4616      	mov	r6, r2
 800bd34:	e7ba      	b.n	800bcac <_printf_i+0x150>
 800bd36:	680b      	ldr	r3, [r1, #0]
 800bd38:	1d1a      	adds	r2, r3, #4
 800bd3a:	600a      	str	r2, [r1, #0]
 800bd3c:	681e      	ldr	r6, [r3, #0]
 800bd3e:	6862      	ldr	r2, [r4, #4]
 800bd40:	2100      	movs	r1, #0
 800bd42:	4630      	mov	r0, r6
 800bd44:	f7f4 fa54 	bl	80001f0 <memchr>
 800bd48:	b108      	cbz	r0, 800bd4e <_printf_i+0x1f2>
 800bd4a:	1b80      	subs	r0, r0, r6
 800bd4c:	6060      	str	r0, [r4, #4]
 800bd4e:	6863      	ldr	r3, [r4, #4]
 800bd50:	6123      	str	r3, [r4, #16]
 800bd52:	2300      	movs	r3, #0
 800bd54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd58:	e7a8      	b.n	800bcac <_printf_i+0x150>
 800bd5a:	6923      	ldr	r3, [r4, #16]
 800bd5c:	4632      	mov	r2, r6
 800bd5e:	4649      	mov	r1, r9
 800bd60:	4640      	mov	r0, r8
 800bd62:	47d0      	blx	sl
 800bd64:	3001      	adds	r0, #1
 800bd66:	d0ab      	beq.n	800bcc0 <_printf_i+0x164>
 800bd68:	6823      	ldr	r3, [r4, #0]
 800bd6a:	079b      	lsls	r3, r3, #30
 800bd6c:	d413      	bmi.n	800bd96 <_printf_i+0x23a>
 800bd6e:	68e0      	ldr	r0, [r4, #12]
 800bd70:	9b03      	ldr	r3, [sp, #12]
 800bd72:	4298      	cmp	r0, r3
 800bd74:	bfb8      	it	lt
 800bd76:	4618      	movlt	r0, r3
 800bd78:	e7a4      	b.n	800bcc4 <_printf_i+0x168>
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	4632      	mov	r2, r6
 800bd7e:	4649      	mov	r1, r9
 800bd80:	4640      	mov	r0, r8
 800bd82:	47d0      	blx	sl
 800bd84:	3001      	adds	r0, #1
 800bd86:	d09b      	beq.n	800bcc0 <_printf_i+0x164>
 800bd88:	3501      	adds	r5, #1
 800bd8a:	68e3      	ldr	r3, [r4, #12]
 800bd8c:	9903      	ldr	r1, [sp, #12]
 800bd8e:	1a5b      	subs	r3, r3, r1
 800bd90:	42ab      	cmp	r3, r5
 800bd92:	dcf2      	bgt.n	800bd7a <_printf_i+0x21e>
 800bd94:	e7eb      	b.n	800bd6e <_printf_i+0x212>
 800bd96:	2500      	movs	r5, #0
 800bd98:	f104 0619 	add.w	r6, r4, #25
 800bd9c:	e7f5      	b.n	800bd8a <_printf_i+0x22e>
 800bd9e:	bf00      	nop
 800bda0:	0800c54d 	.word	0x0800c54d
 800bda4:	0800c55e 	.word	0x0800c55e

0800bda8 <__retarget_lock_acquire_recursive>:
 800bda8:	4770      	bx	lr

0800bdaa <__retarget_lock_release_recursive>:
 800bdaa:	4770      	bx	lr

0800bdac <memmove>:
 800bdac:	4288      	cmp	r0, r1
 800bdae:	b510      	push	{r4, lr}
 800bdb0:	eb01 0402 	add.w	r4, r1, r2
 800bdb4:	d902      	bls.n	800bdbc <memmove+0x10>
 800bdb6:	4284      	cmp	r4, r0
 800bdb8:	4623      	mov	r3, r4
 800bdba:	d807      	bhi.n	800bdcc <memmove+0x20>
 800bdbc:	1e43      	subs	r3, r0, #1
 800bdbe:	42a1      	cmp	r1, r4
 800bdc0:	d008      	beq.n	800bdd4 <memmove+0x28>
 800bdc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bdc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bdca:	e7f8      	b.n	800bdbe <memmove+0x12>
 800bdcc:	4402      	add	r2, r0
 800bdce:	4601      	mov	r1, r0
 800bdd0:	428a      	cmp	r2, r1
 800bdd2:	d100      	bne.n	800bdd6 <memmove+0x2a>
 800bdd4:	bd10      	pop	{r4, pc}
 800bdd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bdda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bdde:	e7f7      	b.n	800bdd0 <memmove+0x24>

0800bde0 <_realloc_r>:
 800bde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bde2:	4607      	mov	r7, r0
 800bde4:	4614      	mov	r4, r2
 800bde6:	460e      	mov	r6, r1
 800bde8:	b921      	cbnz	r1, 800bdf4 <_realloc_r+0x14>
 800bdea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bdee:	4611      	mov	r1, r2
 800bdf0:	f7ff bc54 	b.w	800b69c <_malloc_r>
 800bdf4:	b922      	cbnz	r2, 800be00 <_realloc_r+0x20>
 800bdf6:	f7ff fc01 	bl	800b5fc <_free_r>
 800bdfa:	4625      	mov	r5, r4
 800bdfc:	4628      	mov	r0, r5
 800bdfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be00:	f000 f814 	bl	800be2c <_malloc_usable_size_r>
 800be04:	42a0      	cmp	r0, r4
 800be06:	d20f      	bcs.n	800be28 <_realloc_r+0x48>
 800be08:	4621      	mov	r1, r4
 800be0a:	4638      	mov	r0, r7
 800be0c:	f7ff fc46 	bl	800b69c <_malloc_r>
 800be10:	4605      	mov	r5, r0
 800be12:	2800      	cmp	r0, #0
 800be14:	d0f2      	beq.n	800bdfc <_realloc_r+0x1c>
 800be16:	4631      	mov	r1, r6
 800be18:	4622      	mov	r2, r4
 800be1a:	f7ff fbd9 	bl	800b5d0 <memcpy>
 800be1e:	4631      	mov	r1, r6
 800be20:	4638      	mov	r0, r7
 800be22:	f7ff fbeb 	bl	800b5fc <_free_r>
 800be26:	e7e9      	b.n	800bdfc <_realloc_r+0x1c>
 800be28:	4635      	mov	r5, r6
 800be2a:	e7e7      	b.n	800bdfc <_realloc_r+0x1c>

0800be2c <_malloc_usable_size_r>:
 800be2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be30:	1f18      	subs	r0, r3, #4
 800be32:	2b00      	cmp	r3, #0
 800be34:	bfbc      	itt	lt
 800be36:	580b      	ldrlt	r3, [r1, r0]
 800be38:	18c0      	addlt	r0, r0, r3
 800be3a:	4770      	bx	lr

0800be3c <_init>:
 800be3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be3e:	bf00      	nop
 800be40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be42:	bc08      	pop	{r3}
 800be44:	469e      	mov	lr, r3
 800be46:	4770      	bx	lr

0800be48 <_fini>:
 800be48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be4a:	bf00      	nop
 800be4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be4e:	bc08      	pop	{r3}
 800be50:	469e      	mov	lr, r3
 800be52:	4770      	bx	lr
